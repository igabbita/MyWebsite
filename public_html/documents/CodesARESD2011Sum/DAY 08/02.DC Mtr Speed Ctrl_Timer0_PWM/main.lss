
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001dc  2**0
                  ALLOC
  2 .stab         00000828  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006df  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	69 c0       	rjmp	.+210    	; 0xe6 <__vector_9>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	6d c0       	rjmp	.+218    	; 0x102 <__vector_19>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e8 e6       	ldi	r30, 0x68	; 104
  3e:	f1 e0       	ldi	r31, 0x01	; 1
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	a0 36       	cpi	r26, 0x60	; 96
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a4 36       	cpi	r26, 0x64	; 100
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	5d d0       	rcall	.+186    	; 0x118 <main>
  5e:	83 c0       	rjmp	.+262    	; 0x166 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__heap_end>

00000062 <delayms>:
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  62:	10 92 63 00 	sts	0x0063, r1
  66:	10 92 62 00 	sts	0x0062, r1
  6a:	20 e0       	ldi	r18, 0x00	; 0
  6c:	30 e0       	ldi	r19, 0x00	; 0
  6e:	40 e0       	ldi	r20, 0x00	; 0
  70:	50 e0       	ldi	r21, 0x00	; 0
	...
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
		  {
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  8a:	4f 5f       	subi	r20, 0xFF	; 255
  8c:	5f 4f       	sbci	r21, 0xFF	; 255
  8e:	63 e0       	ldi	r22, 0x03	; 3
  90:	41 32       	cpi	r20, 0x21	; 33
  92:	56 07       	cpc	r21, r22
  94:	71 f7       	brne	.-36     	; 0x72 <delayms+0x10>
  96:	2f 5f       	subi	r18, 0xFF	; 255
  98:	3f 4f       	sbci	r19, 0xFF	; 255
  9a:	82 17       	cp	r24, r18
  9c:	93 07       	cpc	r25, r19
  9e:	38 f7       	brcc	.-50     	; 0x6e <delayms+0xc>
  a0:	30 93 63 00 	sts	0x0063, r19
  a4:	20 93 62 00 	sts	0x0062, r18
  a8:	50 93 61 00 	sts	0x0061, r21
  ac:	40 93 60 00 	sts	0x0060, r20
  b0:	08 95       	ret

000000b2 <delayus>:
		  }
		
	 }
}

void delayus(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  b2:	10 92 63 00 	sts	0x0063, r1
  b6:	10 92 62 00 	sts	0x0062, r1
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
	...
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	82 17       	cp	r24, r18
  d8:	93 07       	cpc	r25, r19
  da:	88 f7       	brcc	.-30     	; 0xbe <delayus+0xc>
  dc:	30 93 63 00 	sts	0x0063, r19
  e0:	20 93 62 00 	sts	0x0062, r18
  e4:	08 95       	ret

000000e6 <__vector_9>:
#include<avr/interrupt.h>
#include"delay.h"

ISR (TIMER0_OVF_vect)				// Subroutine of Timer0 overflow interrupt
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24

	PORTD=0x50; 
  f2:	80 e5       	ldi	r24, 0x50	; 80
  f4:	82 bb       	out	0x12, r24	; 18
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_19>:
}

ISR (TIMER0_COMP_vect)				// Subroutine of Timer0 compare match interrupt
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
	PORTD=0x00;
 10c:	12 ba       	out	0x12, r1	; 18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <main>:
}


int main(void)         
{
	DDRD=0xF0;						// Port D data direction configuration as output port.
 118:	80 ef       	ldi	r24, 0xF0	; 240
 11a:	81 bb       	out	0x11, r24	; 17
	DDRA=0x00;
 11c:	1a ba       	out	0x1a, r1	; 26
	PORTA=0xF0;
 11e:	8b bb       	out	0x1b, r24	; 27
   
	TIMSK=0x03;						// This is for interrupt enable for timer0.
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	89 bf       	out	0x39, r24	; 57
	TCCR0=0x4A;						// This is for timer0 initialization.
 124:	8a e4       	ldi	r24, 0x4A	; 74
 126:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
 128:	12 be       	out	0x32, r1	; 50
	OCR0=150;
 12a:	86 e9       	ldi	r24, 0x96	; 150
 12c:	8c bf       	out	0x3c, r24	; 60
	sei();
 12e:	78 94       	sei
	
 while(1)
  {
	if((PINA & 0x10)==0)
 130:	cc 99       	sbic	0x19, 4	; 25
 132:	0b c0       	rjmp	.+22     	; 0x14a <main+0x32>
		{
		delayms(10);
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	94 df       	rcall	.-216    	; 0x62 <delayms>
		OCR0++;
 13a:	8c b7       	in	r24, 0x3c	; 60
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	8c bf       	out	0x3c, r24	; 60
		if(OCR0>=253){OCR0=253;}
 140:	8c b7       	in	r24, 0x3c	; 60
 142:	8d 3f       	cpi	r24, 0xFD	; 253
 144:	10 f0       	brcs	.+4      	; 0x14a <main+0x32>
 146:	8d ef       	ldi	r24, 0xFD	; 253
 148:	8c bf       	out	0x3c, r24	; 60
		}
	if((PINA & 0x20)==0)
 14a:	cd 99       	sbic	0x19, 5	; 25
 14c:	f1 cf       	rjmp	.-30     	; 0x130 <main+0x18>
		{
		delayms(10);
 14e:	8a e0       	ldi	r24, 0x0A	; 10
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	87 df       	rcall	.-242    	; 0x62 <delayms>
		OCR0--;
 154:	8c b7       	in	r24, 0x3c	; 60
 156:	81 50       	subi	r24, 0x01	; 1
 158:	8c bf       	out	0x3c, r24	; 60
		if(OCR0<=3){OCR0=3;}
 15a:	8c b7       	in	r24, 0x3c	; 60
 15c:	84 30       	cpi	r24, 0x04	; 4
 15e:	40 f7       	brcc	.-48     	; 0x130 <main+0x18>
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	8c bf       	out	0x3c, r24	; 60
 164:	e5 cf       	rjmp	.-54     	; 0x130 <main+0x18>

00000166 <_exit>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <_exit>

   1               		.file	"main.c"
   2               		.arch atmega8535
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  69               	.global	delayms
  71               	delayms:
  73               	.Ltext1:
   1:delay.h       **** /*	LCD.h
   2:delay.h       **** Technophilia embedded systems
   3:delay.h       **** 
   4:delay.h       **** 	this header file provides time delay in the form of mili second and micro second
   5:delay.h       **** 	without affecting any interrupts.
   6:delay.h       **** 
   7:delay.h       **** 	delayms()  this function provides delay in the form of mili second
   8:delay.h       **** 	delayus()  this function provides delay in the form of micro second
   9:delay.h       **** 	
  10:delay.h       **** */
  11:delay.h       **** #ifndef _DELAY_H_
  12:delay.h       **** #define _DELAY_H_
  13:delay.h       **** unsigned int delaycounter1,delaycounter2;
  14:delay.h       **** void delayms(unsigned int delaytime)
  15:delay.h       **** {
  74               	ue end (size=0) */
  76               	.LM1:
  77               		sts (delaycounter1)+1,__zero_reg__
  16:delay.h       **** 
  17:delay.h       **** 	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  78               	 delaycounter1,__zero_reg__
  79               		ldi r18,lo8(0)
  80 0000 1092 0000 		ldi r19,hi8(0)
  81 0004 1092 0000 	.L2:
  83 000a 30E0      	.LM2:
  84               		ldi r20,lo8(0)
  85               		ldi r21,hi8(0)
  86               	.L3:
  88 000e 50E0      	.LM3:
  89               	/* #APP */
  18:delay.h       **** 	 {
  19:delay.h       **** 		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
  20:delay.h       **** 		  {
  21:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  90               	op
  91               		nop
  92               		nop
  93 0010 0000      		nop
  95 0014 0000      	.LM4:
  96 0016 0000      		nop
  97 0018 0000      		nop
  98 001a 0000      		nop
  22:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  99               	
 100               		nop
 101 001c 0000      	/* #NOAPP */
 102 001e 0000      		subi r20,lo8(-(1))
 103 0020 0000      		sbci r21,hi8(-(1))
 105 0024 0000      	.LM5:
 106 0026 0000      		ldi r22,hi8(801)
 107               		cpi r20,lo8(801)
 108 0028 4F5F      		cpc r21,r22
 109 002a 5F4F      		brne .L3
 110               		subi r18,lo8(-(1))
 111               		sbci r19,hi8(-(1))
 113 002e 4132      	.LM6:
 114 0030 5607      		cp r24,r18
 115 0032 01F4      		cpc r25,r19
 116 0034 2F5F      		brsh .L2
 117 0036 3F4F      		sts (delaycounter1)+1,r19
 118               		sts delaycounter1,r18
 119               		sts (delaycounter2)+1,r21
 120 0038 8217      		sts delaycounter2,r20
 121 003a 9307      	/* epilogue: frame size=0 */
 122 003c 00F4      		ret
 123 003e 3093 0000 	/* epilogue end (size=1) */
 124 0042 2093 0000 	/* function delayms size 52 (51) */
 126 004a 4093 0000 	.Lscope0:
 129               	.global	delayus
 131               	delayus:
 133               	.LM7:
 134               	/* prologue: frame size=0 */
 135               	/* prologue end (size=0) */
 137               	.LM8:
  23:delay.h       **** 		  }
  24:delay.h       **** 		
  25:delay.h       **** 	 }
  26:delay.h       **** }
  27:delay.h       **** 
  28:delay.h       **** void delayus(unsigned int delaytime)
  29:delay.h       **** {
 138               	ts delaycounter1,__zero_reg__
 139               		ldi r18,lo8(0)
 140               		ldi r19,hi8(0)
 141               	.L12:
  30:delay.h       **** 
  31:delay.h       **** 	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 142               	abn	68,0,34,.LM9-delayus
 143               	.LM9:
 144 0050 1092 0000 	/* #APP */
 145 0054 1092 0000 		nop
 146 0058 20E0      		nop
 147 005a 30E0      		nop
 148               		nop
  32:delay.h       **** 	 {
  33:delay.h       **** 		 
  34:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 149               	op
 151               	.LM10:
 152 005c 0000      		nop
 153 005e 0000      		nop
 154 0060 0000      		nop
 155 0062 0000      		nop
 156 0064 0000      	/* #NOAPP */
 157 0066 0000      		subi r18,lo8(-(1))
  35:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");
 158               	,hi8(-(1))
 160 0068 0000      	.LM11:
 161 006a 0000      		cp r24,r18
 162 006c 0000      		cpc r25,r19
 163 006e 0000      		brsh .L12
 164               		sts (delaycounter1)+1,r19
 165 0070 2F5F      		sts delaycounter1,r18
 166 0072 3F4F      	/* epilogue: frame size=0 */
 167               		ret
 168               	/* epilogue end (size=1) */
 169 0074 8217      	/* function delayus size 36 (35) */
 171 0078 00F4      	.Lscope1:
 174               	.global	dely_ns
 176               	dely_ns:
 178               	.Ltext2:
 180               	.LM12:
 181               	/* prologue: frame size=0 */
 182               	/* prologue end (size=0) */
 184               	.LM13:
 185               		sts j,__zero_reg__
 186               		lds r18,k
   1:lcd.h         **** /*	LCD.h
   2:lcd.h         **** Technophilia embedded systems
   3:lcd.h         **** 
   4:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
   5:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
   6:lcd.h         **** 	calling any other functions to initialize the lcd.
   7:lcd.h         **** 
   8:lcd.h         **** 
   9:lcd.h         **** 	lcd_init() ----- Call the lcd_init() function before calling any other functions
  10:lcd.h         **** 			  to initialize the lcd.
  11:lcd.h         **** 	lcd_cmd() ------ This function is used to give any command instructions to the
  12:lcd.h         **** 			  LCD. For e.g lcd_cmd(0x01) will give the clear command.
  13:lcd.h         **** 	lcd_char() ----- This function will display a single character on the LCD display.
  14:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
  15:lcd.h         **** 			  will display b.
  16:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
  17:lcd.h         **** 			  like lcd_string("This is AVR")
  18:lcd.h         **** 	lcd_showvalue()- This will show a 3-digit decimal value on the LCD. For example if
  19:lcd.h         **** 			  we give lcd_showvalue(0xFF) then 255 will be displayed.
  20:lcd.h         **** 	lcd_gotoxy()--- Will set the cursor at a particular position on of the LCD.
  21:lcd.h         **** 			  So lcd_gotoxy(1,4) will set the cursor at the 2d row 3rd column
  22:lcd.h         **** 			  row and column address are starts from(0,0)
  23:lcd.h         **** 	lcd_clear()---To clear the LCD
  24:lcd.h         **** 	
  25:lcd.h         **** */
  26:lcd.h         **** 
  27:lcd.h         **** #ifndef _LCD_H_
  28:lcd.h         **** #define _LCD_H_
  29:lcd.h         **** 
  30:lcd.h         **** 
  31:lcd.h         **** unsigned char k=0,j=0;
  32:lcd.h         **** unsigned char save=0;
  33:lcd.h         **** 
  34:lcd.h         **** void lcd_init(void);
  35:lcd.h         **** void lcd_cmd(unsigned char cmd);
  36:lcd.h         **** void latch(void);
  37:lcd.h         **** void dely_ns(unsigned char tim);
  38:lcd.h         **** void lcd_char(unsigned char single);
  39:lcd.h         **** void lcd_string(unsigned char str[32]);
  40:lcd.h         **** void lcd_showvalue(unsigned char num);
  41:lcd.h         **** void lcd_gotoxy(unsigned char row,unsigned char column);
  42:lcd.h         **** void delay_ms(unsigned int ms);
  43:lcd.h         **** void lcd_clear();
  44:lcd.h         **** 
  45:lcd.h         **** void lcd_init(void)	//init the lcd
  46:lcd.h         **** {	
  47:lcd.h         **** 	delay_ms(20);
  48:lcd.h         **** 	save=PORTC;
  49:lcd.h         **** 	DDRC=0xFF;
  50:lcd.h         **** 	delay_ms(15);
  51:lcd.h         **** 	PORTC=0x20;
  52:lcd.h         **** 	lcd_cmd(0x01);
  53:lcd.h         **** 	lcd_cmd(0x02);
  54:lcd.h         **** 	lcd_cmd(0X80);
  55:lcd.h         **** 	delay_ms(20);
  56:lcd.h         **** }
  57:lcd.h         **** 
  58:lcd.h         **** void latch(void)
  59:lcd.h         **** {
  60:lcd.h         **** PORTC&=~0x04;
  61:lcd.h         **** dely_ns(200);  
  62:lcd.h         **** PORTC|=0x04;
  63:lcd.h         **** dely_ns(200);  
  64:lcd.h         **** PORTC&=~0x04;
  65:lcd.h         **** }
  66:lcd.h         **** 
  67:lcd.h         **** void dely_ns(unsigned char tim)
  68:lcd.h         **** {
 187               	19:
 189               	.LM14:
 190               		subi r25,lo8(-(1))
  69:lcd.h         **** 0);  
 191               	 r18,lo8(11)
 192               	.L18:
 193 0084 1092 0000 		cp r25,r24
 194 0088 2091 0000 		brlo .L19
 195 008c 90E0      		sts k,r18
 196 008e 00C0      		sts j,r25
 197               	/* epilogue: frame size=0 */
 198               		ret
 199               	/* epilogue end (size=1) */
 200 0090 9F5F      	/* function dely_ns size 15 (14) */
 202               	.Lscope2:
 204 0096 00F0      	.global	latch
 206 009c 9093 0000 	latch:
 208 00a0 0895      	.LM15:
 209               	/* prologue: frame size=0 */
 210               	/* prologue end (size=0) */
 212               	.LM16:
 213               		cbi 53-0x20,2
 215               	.LM17:
 216               		ldi r24,lo8(-56)
 217               		rcall dely_ns
 219               	.LM18:
 220               		sbi 53-0x20,2
 222               	.LM19:
 223 00a2 AA98      		ldi r24,lo8(-56)
 224               		rcall dely_ns
 226 00a4 88EC      	.LM20:
 227 00a6 00D0      		cbi 53-0x20,2
 228               	/* epilogue: frame size=0 */
 229               		ret
 230 00a8 AA9A      	/* epilogue end (size=1) */
 231               	/* function latch size 8 (7) */
 233 00aa 88EC      	.Lscope3:
 236               	.global	lcd_cmd
 238               	lcd_cmd:
 240               	.LM21:
 241               	/* prologue: frame size=0 */
 242               		push r16
 243               		push r17
 244               	/* prologue end (size=2) */
 245               		mov r16,r24
 247               	.LM22:
 248               		in r24,53-0x20
  70:lcd.h         **** md(0x02);
  71:lcd.h         **** 	lcd_cmd(0X80);
  72:lcd.h         **** 	delay_ms(20);
  73:lcd.h         **** }
  74:lcd.h         **** 
  75:lcd.h         **** void latch(void)
  76:lcd.h         **** {
  77:lcd.h         **** PORTC&=~0x04;
 249               	cd_cmd
 250               	.LM23:
 251               		mov r24,r16
 252 00b2 0F93      		andi r24,lo8(-16)
 253 00b4 1F93      		out 53-0x20,r24
 255 00b6 082F      	.LM24:
  78:lcd.h         **** cmd(0x01);
 256               	latch
 258 00b8 85B3      	.LM25:
 259 00ba 887F      		clr r17
 260 00bc 85BB      		andi r16,lo8(15)
  79:lcd.h         **** //init the lcd
 261               	 r17,hi8(15)
 262               		ldi r24,4
 263 00be 802F      	1:	lsl r16
 264 00c0 807F      		rol r17
 265 00c2 85BB      		dec r24
  80:lcd.h         **** unsigned char column);
 266               	 1b
 267               		out 53-0x20,r16
  81:lcd.h         **** d char str[32]);
 269               	26:
 270               		rcall latch
 271 00c6 1127      	/* epilogue: frame size=0 */
 272 00c8 0F70      		pop r17
 273 00ca 1070      		pop r16
 274 00cc 84E0      		ret
 275 00ce 000F      	/* epilogue end (size=3) */
 276 00d0 111F      	/* function lcd_cmd size 23 (18) */
 278 00d4 01F4      	.Lscope4:
  82:lcd.h         **** id);
 280               	ngle:P(0,11)",64,0,0,17
 281               	.global	lcd_char
 283               	lcd_char:
 285 00dc 0F91      	.LM27:
 286 00de 0895      	/* prologue: frame size=0 */
 287               		push r17
 288               	/* prologue end (size=1) */
 289               		mov r17,r24
 291               	.LM28:
 292               		ldi r24,lo8(1)
 293               		out 53-0x20,r24
 295               	.LM29:
  83:lcd.h         **** unsigned char k=0,j=0;
  84:lcd.h         **** unsigned char save=0;
  85:lcd.h         **** 
  86:lcd.h         **** void lcd_init(void);
  87:lcd.h         **** void lcd_cmd(unsigned char cmd);
 296               	ero_reg__
 298               	.LM30:
 299 00e0 1F93      		mov r24,r17
 300               		andi r24,lo8(-16)
 301 00e2 182F      		ori r24,lo8(1)
  88:lcd.h         **** 
 302               	3-0x20,r24
 304 00e4 81E0      	.LM31:
 305 00e6 85BB      		rcall latch
  89:lcd.h         ****  the 2d row 3rd column
 306               	abn	68,0,92,.LM32-lcd_char
 307               	.LM32:
 308 00e8 15BA      		swap r17
  90:lcd.h         **** -- Will set the cursor at a particular position on of the LCD.
 309               	di r17,0xf0
 310               		ori r17,lo8(1)
 311 00ea 812F      		out 53-0x20,r17
 313 00ee 8160      	.LM33:
 314 00f0 85BB      		rcall latch
  91:lcd.h         **** we give lcd_showvalue(0xFF) then 255 will be displayed.
 315               	logue: frame size=0 */
 316               		pop r17
 317 00f2 00D0      		ret
  92:lcd.h         **** lue()- This will show a 3-digit decimal value on the LCD. For example if
 318               	epilogue end (size=2) */
 319               	/* function lcd_char size 17 (14) */
 321 00f6 107F      	.Lscope5:
  93:lcd.h         ****  this would be
 324               	l	lcd_string
 326 00fc 00D0      	lcd_string:
 328 00fe 1F91      	.LM34:
 329 0100 0895      	/* prologue: frame size=0 */
 330               		push r14
 331               		push r15
 332               		push r16
 333               		push r17
 334               		push r28
 335               		push r29
 336               	/* prologue end (size=6) */
 337               		movw r14,r24
  94:lcd.h         **** l display A. Again lcd_char('b')
  95:lcd.h         **** 			  will display b.
  96:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
  97:lcd.h         **** 			  like lcd_string("This is AVR")
 339               	,lo8(1)
 340               		out 53-0x20,r24
 342 0102 EF92      	.LM36:
 343 0104 FF92      		out 53-0x20,__zero_reg__
 344 0106 0F93      		ldi r16,lo8(0)
 345 0108 1F93      		ldi r17,hi8(0)
 346 010a CF93      		rjmp .L29
 347 010c DF93      	.L30:
 349 010e 7C01      	.LM37:
  98:lcd.h         ****  will display b.
  99:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
 350               	8(16)
 351               		brne .L31
 353 0112 85BB      	.LM38:
 100:lcd.h         **** l display A. Again lcd_char('b')
 354               	 r24,lo8(-64)
 355               		rcall lcd_cmd
 356 0114 15BA      	.L31:
 358 0118 10E0      	.LM39:
 359 011a 00C0      		ld r24,Y
 360               		andi r24,lo8(-16)
 101:lcd.h         **** ---- This function will display a single character on the LCD display.
 102:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
 103:lcd.h         **** 			  will display b.
 361               	4,lo8(1)
 362               		out 53-0x20,r24
 364 011e 01F4      	.LM40:
 104:lcd.h         **** l display a single character on the LCD display.
 365               	ll latch
 367 0120 80EC      	.LM41:
 368 0122 00D0      		ld r24,Y
 369               		swap r24
 105:lcd.h         **** LCD. For e.g lcd_cmd(0x01) will give the clear command.
 370               	 r24,0xf0
 371               		ori r24,lo8(1)
 372 0124 8881      		out 53-0x20,r24
 374 0128 8160      	.LM42:
 375 012a 85BB      		rcall latch
 106:lcd.h         **** 	lcd_cmd() ------ This function is used to give any command instructions to the
 376               	r16,lo8(-(1))
 377               		sbci r17,hi8(-(1))
 378 012c 00D0      	.L29:
 107:lcd.h         **** efore calling any other functions
 379               	v r25,r16
 381 012e 8881      	.LM43:
 382 0130 8295      		movw r28,r14
 383 0132 807F      		add r28,r16
 384 0134 8160      		adc r29,__zero_reg__
 385 0136 85BB      		ld r24,Y
 108:lcd.h         ****  before
 386               	4
 387               		brne .L30
 388 0138 00D0      	/* epilogue: frame size=0 */
 389 013a 0F5F      		pop r29
 390 013c 1F4F      		pop r28
 391               		pop r17
 392 013e 902F      		pop r16
 393               		pop r15
 394               		pop r14
 395 0140 E701      		ret
 396 0142 C00F      	/* epilogue end (size=7) */
 397 0144 D11D      	/* function lcd_string size 44 (31) */
 402 014c DF91      	.Lscope6:
 405 0152 0F91      	.global	lcd_showvalue
 407 0156 EF90      	lcd_showvalue:
 409               	.LM44:
 410               	/* prologue: frame size=0 */
 411               		push r13
 412               		push r14
 413               		push r15
 414               		push r16
 415               		push r17
 416               	/* prologue end (size=5) */
 417               		mov r13,r24
 419               	.LM45:
 420               		ldi r22,lo8(100)
 109:lcd.h         **** header files have implementation of some common finctions of the LCD.
 110:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 111:lcd.h         **** 	calling any other functions to initialize the lcd.
 112:lcd.h         **** 
 113:lcd.h         **** 
 114:lcd.h         **** 	lcd_init() ----- Call the lcd_init() function before calling any other functions
 115:lcd.h         **** 			  to initialize the lcd.
 421               	stabn	68,0,118,.LM46-lcd_showvalue
 422               	.LM46:
 423               		ldi r25,lo8(100)
 424 015a DF92      		mov r14,r25
 425 015c EF92      		mul r24,r14
 426 015e FF92      		movw r14,r0
 427 0160 0F93      		clr r1
 428 0162 1F93      		mov r24,r13
 429               		clr r25
 430 0164 D82E      		sub r24,r14
 116:lcd.h         **** nctions to initialize the lcd.
 117:lcd.h         **** 
 431               	15
 432               		ldi r22,lo8(10)
 433 0166 64E6      		ldi r23,hi8(10)
 434 0168 00D0      		rcall __divmodhi4
 435 016a 282F      		movw r16,r22
 118:lcd.h         **** ns of the LCD.
 436               	bn	68,0,121,.LM47-lcd_showvalue
 437               	.LM47:
 438 016c 94E6      		mov r24,r18
 439 016e E92E      		subi r24,lo8(-(48))
 440 0170 8E9D      		rcall lcd_char
 442 0174 1124      	.LM48:
 443 0176 8D2D      		mov r24,r16
 444 0178 9927      		subi r24,lo8(-(48))
 445 017a 8E19      		rcall lcd_char
 447 017e 6AE0      	.LM49:
 448 0180 70E0      		sub r13,r14
 449 0182 00D0      		ldi r24,lo8(10)
 450 0184 8B01      		mul r16,r24
 119:lcd.h         **** /*	LCD.h
 120:lcd.h         **** Technophilia embedded systems
 121:lcd.h         **** 
 451               	lr r1
 452               		sub r13,r24
 453 0186 822F      		mov r24,r13
 454 0188 805D      		subi r24,lo8(-(48))
 455 018a 00D0      		rcall lcd_char
 122:lcd.h         **** /*	LCD.h
 456               	ilogue: frame size=0 */
 457               		pop r17
 458 018c 802F      		pop r16
 459 018e 805D      		pop r15
 460 0190 00D0      		pop r14
 123:lcd.h         **** /*	LCD.h
 461               	r13
 462               		ret
 463 0192 DE18      	/* epilogue end (size=6) */
 464 0194 8AE0      	/* function lcd_showvalue size 43 (32) */
 469 019e 8D2D      	.Lscope7:
 473 01a4 1F91      	.global	lcd_gotoxy
 475 01a8 FF90      	lcd_gotoxy:
 477 01ac DF90      	.LM50:
 478 01ae 0895      	/* prologue: frame size=0 */
 479               	/* prologue end (size=0) */
 481               	.LM51:
 482               		tst r24
 483               		brne .L38
 485               	.LM52:
 486               		mov r24,r22
 487               		subi r24,lo8(-(-128))
 488               		rcall lcd_cmd
 489               		ret
 490               	.L38:
 124:lcd.h         **** /*	LCD.h
 125:lcd.h         **** Technophilia embedded systems
 126:lcd.h         **** 
 127:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
 492               	42
 494               	.LM54:
 495               		mov r24,r22
 128:lcd.h         **** /*	LCD.h
 496               	i r24,lo8(-(-64))
 497               		rcall lcd_cmd
 498 01b0 8823      	.L42:
 499 01b2 01F4      		ret
 129:lcd.h         **** /*	LCD.h
 130:lcd.h         **** Technophilia embedded systems
 500               	pilogue: frame size=0 */
 501               	/* epilogue: noreturn */
 502 01b4 862F      	/* epilogue end (size=0) */
 503 01b6 8058      	/* function lcd_gotoxy size 12 (12) */
 505 01ba 0895      	.Lscope8:
 131:lcd.h         **** /*	LCD.h
 132:lcd.h         **** Technophilia embedded systems
 507               		"ms:P(0,4)",64,0,0,24
 508               	.global	delay_ms
 510 01be 01F4      	delay_ms:
 133:lcd.h         **** /*	LCD.h
 134:lcd.h         **** Technophilia embedded systems
 511               	abn	68,0,140,.LM55-delay_ms
 512               	.LM55:
 513 01c0 862F      	/* prologue: frame size=0 */
 514 01c2 8054      	/* prologue end (size=0) */
 515 01c4 00D0      		rjmp .L44
 516               	.L45:
 518               	.LM56:
 519               		ldi r18,lo8(0)
 520               		ldi r19,hi8(0)
 521               	.L46:
 523               	.LM57:
 524               	/* #APP */
 525               		nop
 527               	.LM58:
 528               	/* #NOAPP */
 135:lcd.h         **** /*	LCD.h
 136:lcd.h         **** Technophilia embedded systems
 137:lcd.h         **** 
 138:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
 139:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 140:lcd.h         **** 	calling any other functions to initialize the lcd.
 529               	)
 530               		sbci r19,hi8(-(1))
 531               		ldi r20,hi8(3276)
 532               		cpi r18,lo8(3276)
 533 01c8 00C0      		cpc r19,r20
 534               		brne .L46
 141:lcd.h         **** ions of the LCD.
 142:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 143:lcd.h         **** 	calling any other functions to initialize the lcd.
 536               	.LM59:
 537 01ca 20E0      		sbiw r24,1
 538 01cc 30E0      		ldi r18,hi8(-1)
 539               		cpi r24,lo8(-1)
 144:lcd.h         **** ions of the LCD.
 145:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 146:lcd.h         **** 	calling any other functions to initialize the lcd.
 147:lcd.h         **** 
 540               	r25,r18
 541               		brne .L45
 542               	/* epilogue: frame size=0 */
 543 01ce 0000      		ret
 544               	/* epilogue end (size=1) */
 545               	/* function delay_ms size 17 (16) */
 550 01d6 2C3C      	.Lscope9:
 552 01da 01F4      	.global	lcd_init
 554               	lcd_init:
 556 01dc 0197      	.LM60:
 557 01de 2FEF      	/* prologue: frame size=0 */
 558 01e0 8F3F      	/* prologue end (size=0) */
 560 01e4 01F4      	.LM61:
 561               		ldi r24,lo8(20)
 562 01e6 0895      		ldi r25,hi8(20)
 563               		rcall delay_ms
 565               	.LM62:
 566               		in r24,53-0x20
 567               		sts save,r24
 569               	.LM63:
 570               		ldi r24,lo8(-1)
 571               		out 52-0x20,r24
 573               	.LM64:
 574               		ldi r24,lo8(15)
 575               		ldi r25,hi8(15)
 576               		rcall delay_ms
 578               	.LM65:
 579               		ldi r24,lo8(32)
 580 01e8 84E1      		out 53-0x20,r24
 582 01ec 00D0      	.LM66:
 583               		ldi r24,lo8(1)
 584               		rcall lcd_cmd
 586 01f0 8093 0000 	.LM67:
 587               		ldi r24,lo8(2)
 588               		rcall lcd_cmd
 590 01f6 84BB      	.LM68:
 591               		ldi r24,lo8(-128)
 592               		rcall lcd_cmd
 594 01fa 90E0      	.LM69:
 595 01fc 00D0      		ldi r24,lo8(20)
 596               		ldi r25,hi8(20)
 597               		rcall delay_ms
 598 01fe 80E2      	/* epilogue: frame size=0 */
 599 0200 85BB      		ret
 600               	/* epilogue end (size=1) */
 601               	/* function lcd_init size 23 (22) */
 603 0204 00D0      	.Lscope10:
 605               	.global	lcd_clear
 607 0208 00D0      	lcd_clear:
 609               	.LM70:
 610 020a 80E8      	/* prologue: frame size=0 */
 611 020c 00D0      	/* prologue end (size=0) */
 613               	.LM71:
 614 020e 84E1      		ldi r24,lo8(1)
 615 0210 90E0      		rcall lcd_cmd
 616 0212 00D0      	/* epilogue: frame size=0 */
 617               		ret
 618 0214 0895      	/* epilogue end (size=1) */
 619               	/* function lcd_clear size 3 (2) */
 621               	.Lscope11:
 622               		.data
 623               	.LC0:
 624               		.string	"RC 5 decoder"
 625               		.text
 148:lcd.h         **** ns of the LCD.
 149:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 150:lcd.h         **** 	calling any other functions to initialize the lcd.
 151:lcd.h         **** 
 152:lcd.h         **** 
 627               	tabn	68,0,23,.LM72-main
 628               	.LM72:
 629               	/* prologue: frame size=14 */
 630               		push r16
 153:lcd.h         ****  of the LCD.
 631               	"RC 5 decoder"
 632               		.text
 634 0218 00D0      	.global	main
 636 021a 0895      	main:
 638               	.Ltext3:
 640               	.LM72:
 641               	/* prologue: frame size=14 */
 642               		push r16
 643 0000 5243 2035 		push r17
 643      2064 6563 
 643      6F64 6572 
 643      00
 644               		push r28
 645               		push r29
 646               		in r28,__SP_L__
 647               		in r29,__SP_H__
 648               		sbiw r28,14
 649               		in __tmp_reg__,__SREG__
 650               		cli
   1:main.c        **** /***********************************************************************
   2:main.c        **** 
   3:main.c        **** CODE10: Program for RC5 Receiver
   4:main.c        **** 
   5:main.c        **** ***********************************************************************
   6:main.c        **** COPYRIGHT(C)Technophilia Systems
   7:main.c        **** Date:...............1st May 2011
   8:main.c        **** Author:.............Prasanta Kumar Nayak
   9:main.c        **** Organization:.......Technophilia Syestems
  10:main.c        **** Target system:......AVR devlopment board s/n-107010
  11:main.c        **** Manufacturer:.......Technophilia Syestems
  12:main.c        **** Microcontroller:....ATmega-8535
  13:main.c        **** Clock:..............16mhz
  14:main.c        **** IR TX PortB0		used for transmitter
  15:main.c        **** IR Rx PortB1  		used for receiver 
  16:main.c        **** 
  17:main.c        **** *********************************************************************************/
  18:main.c        **** #include<avr/io.h>
  19:main.c        **** #include "delay.h"
  20:main.c        **** #include "lcd.h"
  21:main.c        **** 
  22:main.c        **** int main(void)
  23:main.c        **** {
 651               	132,0,0,.Ltext3
 652               	.Ltext3:
 654 021c 0F93      	.LM72:
 655 021e 1F93      	/* prologue: frame size=14 */
 656 0220 CF93      		push r16
 657 0222 DF93      		push r17
 658 0224 CDB7      		push r28
 659 0226 DEB7      		push r29
 660 0228 2E97      		in r28,__SP_L__
 661 022a 0FB6      		in r29,__SP_H__
 662 022c F894      		sbiw r28,14
 663 022e DEBF      		in __tmp_reg__,__SREG__
 664 0230 0FBE      		cli
 665 0232 CDBF      		out __SP_H__,r29
 666               		out __SREG__,__tmp_reg__
  24:main.c        **** 
  25:main.c        **** delayms(300);
 667               	-main
 668               	.LM72:
 669 0234 8CE2      	/* prologue: frame size=14 */
 670 0236 91E0      		push r16
 671 0238 00D0      		push r17
  26:main.c        **** lcd_cmd(0x01);
 672               	er"
 673               		.text
 675 023c 00D0      	.global	main
  27:main.c        **** delayms(300);
 676               	gue: frame size=0 */
 677               		ret
 678 023e 8CE2      	/* epilogue end (size=1) */
 679 0240 91E0      	/* function lcd_clear size 3 (2) */
  28:main.c        **** unsigned char i,a[14];
  29:main.c        ****  lcd_init();
 681               	/
 682               	/* prologue end (size=0) */
  30:main.c        ****  lcd_string("RC 5 decoder");
 684               	71:
 685               		ldi r24,lo8(1)
 686 0246 80E0      		rcall lcd_cmd
 687 0248 90E0      	/* epilogue: frame size=0 */
 688 024a 00D0      		ret
  31:main.c        ****  delayms(1000);
 689               	ilogue end (size=1) */
 690               	/* function lcd_clear size 3 (2) */
 692 024e 93E0      	.Lscope11:
 693 0250 00D0      		.data
  32:main.c        ****  DDRB=0X00;
 694               	ize=0) */
 696 0252 17BA      	.LM71:
  33:main.c        ****  lcd_clear();
 697               	i r24,lo8(1)
 698               		rcall lcd_cmd
 699 0254 00D0      	/* epilogue: frame size=0 */
  34:main.c        ****  delayms(100);
 700               	t
 701               	/* epilogue end (size=1) */
 702 0256 84E6      	/* function lcd_clear size 3 (2) */
 704 025a 00D0      	.Lscope11:
 705               		.data
  35:main.c        ****  while(1)
  36:main.c        ****   {
  37:main.c        ****    if((PINB&0x02)==0x02)
 706               	ize=0) */
 708 025c B19B      	.LM71:
 709 025e 00C0      		ldi r24,lo8(1)
  38:main.c        ****    {
  39:main.c        ****     delayus(100);
 710               	ll lcd_cmd
 711               	/* epilogue: frame size=0 */
 712 0260 84E6      		ret
 713 0262 90E0      	/* epilogue end (size=1) */
 714 0264 00D0      	/* function lcd_clear size 3 (2) */
 716 0268 0F5F      	.Lscope11:
 717 026a 1F4F      		.data
 718               	.LC0:
  40:main.c        ****     for(i=0;i<14;i++)
  41:main.c        **** 	 {
  42:main.c        **** 	  if((PINB&0x02)==0x02)
 719               	"RC 5 decoder"
 720               		.text
 722 026e 00C0      	.global	main
  43:main.c        **** 	    {a[i]=1;}
 723               	gue: frame size=0 */
 724               		ret
 725 0270 81E0      	/* epilogue end (size=1) */
 726 0272 F801      	/* function lcd_clear size 3 (2) */
 728 0276 00C0      	.Lscope11:
 729               		.data
  44:main.c        **** 	  else{a[i]=0;}	
 730               	ize=0) */
 732 0278 F801      	.LM71:
 733 027a 1082      		ldi r24,lo8(1)
 734               		rcall lcd_cmd
  45:main.c        **** 	  delayus(1777);
 735               	ilogue: frame size=0 */
 736               		ret
 737 027c 81EF      	/* epilogue end (size=1) */
 738 027e 96E0      	/* function lcd_clear size 3 (2) */
 740 0282 0F5F      	.Lscope11:
 741 0284 1F4F      		.data
 742               	.LC0:
 743               		.string	"RC 5 decoder"
 744 0286 CE01      		.text
 746 028a 0817      	.global	main
 748 028e 01F4      	main:
  46:main.c        **** 	 }
  47:main.c        **** 	  lcd_gotoxy(0,0);			//  to use it as a IR remote controller receiver 
 749               	ilogue end (size=1) */
 750               	/* function lcd_clear size 3 (2) */
 752 0292 80E0      	.Lscope11:
 753 0294 00D0      		.data
  48:main.c        **** 	  
  49:main.c        **** 	  lcd_char((a[0])+0x30);	//instread if displaying its received data in LCD 
 754               	ize=0) */
 756 0296 8981      	.LM71:
 757 0298 805D      		ldi r24,lo8(1)
 758 029a 00D0      		rcall lcd_cmd
  50:main.c        **** 	  lcd_char((a[1])+0x30);	//separate the data and address bit check the 
 759               	ilogue: frame size=0 */
 760               		ret
 761 029c 8A81      	/* epilogue end (size=1) */
 762 029e 805D      	/* function lcd_clear size 3 (2) */
  51:main.c        **** 	  lcd_char((a[2])+0x30);	//address and on the respective matching command 
 764               	/
 765               	/* prologue end (size=0) */
 767 02a4 805D      	.LM71:
 768 02a6 00D0      		ldi r24,lo8(1)
  52:main.c        **** 	  lcd_char((a[3])+0x30);	//or data do the necessary action
 769               	l lcd_cmd
 770               	/* epilogue: frame size=0 */
 771 02a8 8C81      		ret
 772 02aa 805D      	/* epilogue end (size=1) */
 773 02ac 00D0      	/* function lcd_clear size 3 (2) */
  53:main.c        **** 	  lcd_char((a[4])+0x30);
 774               	e	lcd_clear, .-lcd_clear
 775               	.Lscope11:
 776 02ae 8D81      		.data
 777 02b0 805D      	.LC0:
 778 02b2 00D0      		.string	"RC 5 decoder"
  54:main.c        **** 	  lcd_char((a[5])+0x30);
 779               	-lcd_clear
 780               	.LM71:
 781 02b4 8E81      		ldi r24,lo8(1)
 782 02b6 805D      		rcall lcd_cmd
 783 02b8 00D0      	/* epilogue: frame size=0 */
  55:main.c        **** 	  lcd_char((a[6])+0x30);
 784               	/* epilogue end (size=1) */
 785               	/* function lcd_clear size 3 (2) */
 787 02bc 805D      	.Lscope11:
 788 02be 00D0      		.data
  56:main.c        **** 	  lcd_char((a[7])+0x30);
 789               	ize=0) */
 791 02c0 8885      	.LM71:
 792 02c2 805D      		ldi r24,lo8(1)
 793 02c4 00D0      		rcall lcd_cmd
  57:main.c        **** 	  
  58:main.c        **** 	  lcd_gotoxy(1,0);
 794               	ilogue: frame size=0 */
 795               		ret
 796 02c6 60E0      	/* epilogue end (size=1) */
 797 02c8 81E0      	/* function lcd_clear size 3 (2) */
  59:main.c        **** 	  
  60:main.c        **** 	  lcd_char((a[8])+0x30);
 799               	/
 800               	/* prologue end (size=0) */
 802 02ce 805D      	.LM71:
 803 02d0 00D0      		ldi r24,lo8(1)
  61:main.c        **** 	  lcd_char((a[9])+0x30);
 804               	l lcd_cmd
 805               	/* epilogue: frame size=0 */
 806 02d2 8A85      		ret
 807 02d4 805D      	/* epilogue end (size=1) */
 808 02d6 00D0      	/* function lcd_clear size 3 (2) */
  62:main.c        **** 	  lcd_char((a[10])+0x30);
 809               	e	lcd_clear, .-lcd_clear
 810               	.Lscope11:
 811 02d8 8B85      		.data
 812 02da 805D      	.LC0:
 813 02dc 00D0      		.string	"RC 5 decoder"
  63:main.c        **** 	  lcd_char((a[11])+0x30);
 814               	-lcd_clear
 815               	.LM71:
 816 02de 8C85      		ldi r24,lo8(1)
 817 02e0 805D      		rcall lcd_cmd
 818 02e2 00D0      	/* epilogue: frame size=0 */
  64:main.c        **** 	  lcd_char((a[12])+0x30);
 819               	/* epilogue end (size=1) */
 820               	/* function lcd_clear size 3 (2) */
 822 02e6 805D      	.Lscope11:
 823 02e8 00D0      		.data
  65:main.c        **** 	  lcd_char((a[13])+0x30);
 824               	ize=0) */
 826 02ea 8E85      	.LM71:
 827 02ec 805D      		ldi r24,lo8(1)
 828 02ee 00D0      		rcall lcd_cmd
 829 02f0 00C0      	/* epilogue: frame size=0 */
 830               		ret
 831               	/* epilogue end (size=1) */
 832               	/* function lcd_clear size 3 (2) */
 834               	.Lscope11:
 835               		.data
 836               	.LC0:
 837               		.string	"RC 5 decoder"
 838               		.text
 840               	.global	main
 842               	main:
 844               	.Ltext3:
 846               	.LM72:
 847               	/* prologue: frame size=14 */
 848               		push r16
 849               		push r17
 850               		push r28
 851 0001 00        		push r29
 852               		in r28,__SP_L__
 853               		in r29,__SP_H__
 854               		sbiw r28,14
 855               		in __tmp_reg__,__SREG__
 856               		cli
 857 0002 00        		out __SP_H__,r29
 858               		out __SREG__,__tmp_reg__
 859               		out __SP_L__,r28
 860               	/* prologue end (size=12) */
 862               	.LM73:
 863               		ldi r24,lo8(300)
 864               		ldi r25,hi8(300)
 865               		rcall delayms
 867               	.LM74:
 868               		ldi r24,lo8(1)
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:3      *ABS*:0000003f __SREG__
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:4      *ABS*:0000003e __SP_H__
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:5      *ABS*:0000003d __SP_L__
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:7      *ABS*:00000001 __zero_reg__
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:71     .text:00000000 delayms
                            *COM*:00000002 delaycounter1
                            *COM*:00000002 delaycounter2
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:137    .text:00000050 delayus
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:184    .text:00000084 dely_ns
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:850    .bss:00000001 j
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:844    .bss:00000000 k
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:216    .text:000000a2 latch
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:248    .text:000000b2 lcd_cmd
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:295    .text:000000e0 lcd_char
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:338    .text:00000102 lcd_string
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:420    .text:0000015a lcd_showvalue
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:491    .text:000001b0 lcd_gotoxy
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:528    .text:000001c8 delay_ms
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:573    .text:000001e8 lcd_init
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:856    .bss:00000002 save
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:626    .text:00000216 lcd_clear
C:\Users\User\AppData\Local\Temp/ccOuKBaM.s:648    .text:0000021c main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__udivmodqi4
__divmodhi4

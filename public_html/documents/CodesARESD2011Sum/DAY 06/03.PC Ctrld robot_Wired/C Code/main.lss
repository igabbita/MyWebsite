
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000002ce  2**0
                  ALLOC
  2 .stab         0000072c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000786  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a4 36       	cpi	r26, 0x64	; 100
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	ab d0       	rcall	.+342    	; 0x19e <main>
  48:	06 c1       	rjmp	.+524    	; 0x256 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <delayms>:
*/
#ifndef _DELAY_H_
#define _DELAY_H_
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{
  4c:	20 91 60 00 	lds	r18, 0x0060
  50:	30 91 61 00 	lds	r19, 0x0061
  54:	40 e0       	ldi	r20, 0x00	; 0
  56:	50 e0       	ldi	r21, 0x00	; 0
  58:	16 c0       	rjmp	.+44     	; 0x86 <delayms+0x3a>
	...
	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
		  {
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  72:	2f 5f       	subi	r18, 0xFF	; 255
  74:	3f 4f       	sbci	r19, 0xFF	; 255
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
  76:	63 e0       	ldi	r22, 0x03	; 3
  78:	22 32       	cpi	r18, 0x22	; 34
  7a:	36 07       	cpc	r19, r22
  7c:	71 f7       	brne	.-36     	; 0x5a <delayms+0xe>
  7e:	4f 5f       	subi	r20, 0xFF	; 255
  80:	5f 4f       	sbci	r21, 0xFF	; 255
  82:	21 e2       	ldi	r18, 0x21	; 33
  84:	33 e0       	ldi	r19, 0x03	; 3
#define _DELAY_H_
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  86:	84 17       	cp	r24, r20
  88:	95 07       	cpc	r25, r21
  8a:	18 f0       	brcs	.+6      	; 0x92 <delayms+0x46>
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f0 cf       	rjmp	.-32     	; 0x72 <delayms+0x26>
  92:	30 93 61 00 	sts	0x0061, r19
  96:	20 93 60 00 	sts	0x0060, r18
  9a:	50 93 63 00 	sts	0x0063, r21
  9e:	40 93 62 00 	sts	0x0062, r20
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  }
		
	 }
}
  a2:	08 95       	ret

000000a4 <delayus>:

void delayus(unsigned int delaytime)
{
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <delayus+0x1e>
	...

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
}

void delayus(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  c2:	82 17       	cp	r24, r18
  c4:	93 07       	cpc	r25, r19
  c6:	88 f7       	brcc	.-30     	; 0xaa <delayus+0x6>
  c8:	30 93 63 00 	sts	0x0063, r19
  cc:	20 93 62 00 	sts	0x0062, r18
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
	 }
}
  d0:	08 95       	ret

000000d2 <uart_init>:
#ifndef _UART_H_
#define _UART_H_

void uart_init()
{
	UCSRA=0x00;
  d2:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x18;
  d4:	88 e1       	ldi	r24, 0x18	; 24
  d6:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
  d8:	86 e8       	ldi	r24, 0x86	; 134
  da:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
  dc:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x67;
  de:	87 e6       	ldi	r24, 0x67	; 103
  e0:	89 b9       	out	0x09, r24	; 9
}
  e2:	08 95       	ret

000000e4 <uart_read>:
	uart_char(O+48);	
}
 
unsigned char uart_read()
{
	while((UCSRA&0x80)==0x00);
  e4:	5f 9b       	sbis	0x0b, 7	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <uart_read>
	return UDR;
  e8:	8c b1       	in	r24, 0x0c	; 12
}
  ea:	08 95       	ret

000000ec <delayuart>:
 
void delayuart(unsigned int delaytime)
{
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
	...
	unsigned int dc;
	for(dc=0;dc<=delaytime;dc++)
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	82 17       	cp	r24, r18
 10a:	93 07       	cpc	r25, r19
 10c:	88 f7       	brcc	.-30     	; 0xf0 <delayuart+0x4>
	{
		asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
	}
}
 10e:	08 95       	ret

00000110 <uart_string>:
	while((UCSRA&0x40)==0x00);
	delayuart(1000);
}
 
void uart_string(const unsigned char *ustring)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
 116:	07 c0       	rjmp	.+14     	; 0x126 <uart_string+0x16>
	while ( *ustring )
	{
		UDR=*ustring++;
 118:	8c b9       	out	0x0c, r24	; 12
		while((UCSRA&0x40)==0x00);
 11a:	5e 9b       	sbis	0x0b, 6	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <uart_string+0xa>
 
void uart_string(const unsigned char *ustring)
{
	while ( *ustring )
	{
		UDR=*ustring++;
 11e:	21 96       	adiw	r28, 0x01	; 1
		while((UCSRA&0x40)==0x00);
		delayuart(1000);
 120:	88 ee       	ldi	r24, 0xE8	; 232
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	e3 df       	rcall	.-58     	; 0xec <delayuart>
	delayuart(1000);
}
 
void uart_string(const unsigned char *ustring)
{
	while ( *ustring )
 126:	88 81       	ld	r24, Y
 128:	88 23       	and	r24, r24
 12a:	b1 f7       	brne	.-20     	; 0x118 <uart_string+0x8>
	{
		UDR=*ustring++;
		while((UCSRA&0x40)==0x00);
		delayuart(1000);
	}
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <uart_char>:
	UBRRL=0x67;
}

void uart_char(unsigned char uchar)
{
	UDR=uchar;
 132:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&0x40)==0x00);
 134:	5e 9b       	sbis	0x0b, 6	; 11
 136:	fe cf       	rjmp	.-4      	; 0x134 <uart_char+0x2>
	delayuart(1000);
 138:	88 ee       	ldi	r24, 0xE8	; 232
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	d7 df       	rcall	.-82     	; 0xec <delayuart>
}
 13e:	08 95       	ret

00000140 <uart_num>:
		delayuart(1000);
	}
}
 
void uart_num(unsigned char num)
{
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	18 2f       	mov	r17, r24
    unsigned char H=0,T=0,O=0;
	H=num/100;
 14a:	64 e6       	ldi	r22, 0x64	; 100
 14c:	51 d0       	rcall	.+162    	; 0x1f0 <__udivmodqi4>
 14e:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 150:	28 2f       	mov	r18, r24
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	8c e9       	ldi	r24, 0x9C	; 156
 156:	9f ef       	ldi	r25, 0xFF	; 255
 158:	28 9f       	mul	r18, r24
 15a:	70 01       	movw	r14, r0
 15c:	29 9f       	mul	r18, r25
 15e:	f0 0c       	add	r15, r0
 160:	38 9f       	mul	r19, r24
 162:	f0 0c       	add	r15, r0
 164:	11 24       	eor	r1, r1
 166:	c7 01       	movw	r24, r14
 168:	81 0f       	add	r24, r17
 16a:	91 1d       	adc	r25, r1
 16c:	6a e0       	ldi	r22, 0x0A	; 10
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	4b d0       	rcall	.+150    	; 0x208 <__divmodhi4>
 172:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
 174:	84 2f       	mov	r24, r20
 176:	80 5d       	subi	r24, 0xD0	; 208
 178:	dc df       	rcall	.-72     	; 0x132 <uart_char>
	uart_char(T+48);
 17a:	80 2f       	mov	r24, r16
 17c:	80 5d       	subi	r24, 0xD0	; 208
 17e:	d9 df       	rcall	.-78     	; 0x132 <uart_char>
	uart_char(O+48);	
 180:	10 5d       	subi	r17, 0xD0	; 208
 182:	1e 0d       	add	r17, r14
 184:	86 ef       	ldi	r24, 0xF6	; 246
 186:	9f ef       	ldi	r25, 0xFF	; 255
 188:	08 9f       	mul	r16, r24
 18a:	00 2d       	mov	r16, r0
 18c:	11 24       	eor	r1, r1
 18e:	80 2f       	mov	r24, r16
 190:	81 0f       	add	r24, r17
 192:	cf df       	rcall	.-98     	; 0x132 <uart_char>
}
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	08 95       	ret

0000019e <main>:
#include <avr/io.h >
#include "delay.h"
#include "uart.h"
int main()
{
UCSRA=0x00;
 19e:	1b b8       	out	0x0b, r1	; 11
UCSRB=0x10;
 1a0:	80 e1       	ldi	r24, 0x10	; 16
 1a2:	8a b9       	out	0x0a, r24	; 10
UCSRC=0x86;
 1a4:	86 e8       	ldi	r24, 0x86	; 134
 1a6:	80 bd       	out	0x20, r24	; 32
UBRRH=0x00;
 1a8:	10 bc       	out	0x20, r1	; 32
UBRRL=0x67;
 1aa:	87 e6       	ldi	r24, 0x67	; 103
 1ac:	89 b9       	out	0x09, r24	; 9
DDRD=0xF0;		
 1ae:	80 ef       	ldi	r24, 0xF0	; 240
 1b0:	81 bb       	out	0x11, r24	; 17
	break;
   case 'B':
    PORTD=0xA0;
	break;
   case 'L':
    PORTD=0x10;
 1b2:	40 e1       	ldi	r20, 0x10	; 16
	break;	
   case 'R':
    PORTD=0x40;
 1b4:	30 e4       	ldi	r19, 0x40	; 64
  {
   case 'F':
    PORTD=0x50;
	break;
   case 'B':
    PORTD=0xA0;
 1b6:	20 ea       	ldi	r18, 0xA0	; 160
while(1)
 {
 switch(uart_read())
  {
   case 'F':
    PORTD=0x50;
 1b8:	90 e5       	ldi	r25, 0x50	; 80
 
unsigned char uart_read()
{
	while((UCSRA&0x80)==0x00);
 1ba:	5f 9b       	sbis	0x0b, 7	; 11
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <main+0x1c>
	return UDR;
 1be:	8c b1       	in	r24, 0x0c	; 12
UBRRH=0x00;
UBRRL=0x67;
DDRD=0xF0;		
while(1)
 {
 switch(uart_read())
 1c0:	8c 34       	cpi	r24, 0x4C	; 76
 1c2:	81 f0       	breq	.+32     	; 0x1e4 <main+0x46>
 1c4:	8d 34       	cpi	r24, 0x4D	; 77
 1c6:	28 f4       	brcc	.+10     	; 0x1d2 <main+0x34>
 1c8:	82 34       	cpi	r24, 0x42	; 66
 1ca:	51 f0       	breq	.+20     	; 0x1e0 <main+0x42>
 1cc:	86 34       	cpi	r24, 0x46	; 70
 1ce:	a9 f7       	brne	.-22     	; 0x1ba <main+0x1c>
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <main+0x3e>
 1d2:	82 35       	cpi	r24, 0x52	; 82
 1d4:	49 f0       	breq	.+18     	; 0x1e8 <main+0x4a>
 1d6:	83 35       	cpi	r24, 0x53	; 83
 1d8:	81 f7       	brne	.-32     	; 0x1ba <main+0x1c>
 1da:	08 c0       	rjmp	.+16     	; 0x1ec <main+0x4e>
  {
   case 'F':
    PORTD=0x50;
 1dc:	92 bb       	out	0x12, r25	; 18
 1de:	ed cf       	rjmp	.-38     	; 0x1ba <main+0x1c>
	break;
   case 'B':
    PORTD=0xA0;
 1e0:	22 bb       	out	0x12, r18	; 18
 1e2:	eb cf       	rjmp	.-42     	; 0x1ba <main+0x1c>
	break;
   case 'L':
    PORTD=0x10;
 1e4:	42 bb       	out	0x12, r20	; 18
 1e6:	e9 cf       	rjmp	.-46     	; 0x1ba <main+0x1c>
	break;	
   case 'R':
    PORTD=0x40;
 1e8:	32 bb       	out	0x12, r19	; 18
 1ea:	e7 cf       	rjmp	.-50     	; 0x1ba <main+0x1c>
	break;
   case 'S':
    PORTD=0x00;
 1ec:	12 ba       	out	0x12, r1	; 18
 1ee:	e5 cf       	rjmp	.-54     	; 0x1ba <main+0x1c>

000001f0 <__udivmodqi4>:
 1f0:	99 1b       	sub	r25, r25
 1f2:	79 e0       	ldi	r23, 0x09	; 9
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <__udivmodqi4_ep>

000001f6 <__udivmodqi4_loop>:
 1f6:	99 1f       	adc	r25, r25
 1f8:	96 17       	cp	r25, r22
 1fa:	08 f0       	brcs	.+2      	; 0x1fe <__udivmodqi4_ep>
 1fc:	96 1b       	sub	r25, r22

000001fe <__udivmodqi4_ep>:
 1fe:	88 1f       	adc	r24, r24
 200:	7a 95       	dec	r23
 202:	c9 f7       	brne	.-14     	; 0x1f6 <__udivmodqi4_loop>
 204:	80 95       	com	r24
 206:	08 95       	ret

00000208 <__divmodhi4>:
 208:	97 fb       	bst	r25, 7
 20a:	09 2e       	mov	r0, r25
 20c:	07 26       	eor	r0, r23
 20e:	0a d0       	rcall	.+20     	; 0x224 <__divmodhi4_neg1>
 210:	77 fd       	sbrc	r23, 7
 212:	04 d0       	rcall	.+8      	; 0x21c <__divmodhi4_neg2>
 214:	0c d0       	rcall	.+24     	; 0x22e <__udivmodhi4>
 216:	06 d0       	rcall	.+12     	; 0x224 <__divmodhi4_neg1>
 218:	00 20       	and	r0, r0
 21a:	1a f4       	brpl	.+6      	; 0x222 <__divmodhi4_exit>

0000021c <__divmodhi4_neg2>:
 21c:	70 95       	com	r23
 21e:	61 95       	neg	r22
 220:	7f 4f       	sbci	r23, 0xFF	; 255

00000222 <__divmodhi4_exit>:
 222:	08 95       	ret

00000224 <__divmodhi4_neg1>:
 224:	f6 f7       	brtc	.-4      	; 0x222 <__divmodhi4_exit>
 226:	90 95       	com	r25
 228:	81 95       	neg	r24
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	08 95       	ret

0000022e <__udivmodhi4>:
 22e:	aa 1b       	sub	r26, r26
 230:	bb 1b       	sub	r27, r27
 232:	51 e1       	ldi	r21, 0x11	; 17
 234:	07 c0       	rjmp	.+14     	; 0x244 <__udivmodhi4_ep>

00000236 <__udivmodhi4_loop>:
 236:	aa 1f       	adc	r26, r26
 238:	bb 1f       	adc	r27, r27
 23a:	a6 17       	cp	r26, r22
 23c:	b7 07       	cpc	r27, r23
 23e:	10 f0       	brcs	.+4      	; 0x244 <__udivmodhi4_ep>
 240:	a6 1b       	sub	r26, r22
 242:	b7 0b       	sbc	r27, r23

00000244 <__udivmodhi4_ep>:
 244:	88 1f       	adc	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	5a 95       	dec	r21
 24a:	a9 f7       	brne	.-22     	; 0x236 <__udivmodhi4_loop>
 24c:	80 95       	com	r24
 24e:	90 95       	com	r25
 250:	bc 01       	movw	r22, r24
 252:	cd 01       	movw	r24, r26
 254:	08 95       	ret

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>

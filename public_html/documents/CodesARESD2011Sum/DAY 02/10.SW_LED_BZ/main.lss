
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006d8  00000000  00000000  000000e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000655  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e2 e9       	ldi	r30, 0x92	; 146
  3e:	f0 e0       	ldi	r31, 0x00	; 0
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	a0 36       	cpi	r26, 0x60	; 96
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a0 36       	cpi	r26, 0x60	; 96
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	02 d0       	rcall	.+4      	; 0x62 <main>
  5e:	18 c0       	rjmp	.+48     	; 0x90 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <main>:
#include<avr/io.h>		//This is the header for AVR Microcontroller.

int main(void)
 {	
	PORTC=0X00;			//PortC initiallization as all bits low.
  62:	15 ba       	out	0x15, r1	; 21
	DDRC=0XF8;			//PortC data direction declaration as output.
  64:	88 ef       	ldi	r24, 0xF8	; 248
  66:	84 bb       	out	0x14, r24	; 20
	
	PORTA=0XFF;			//PortA initiallization as all bits high (Pull-up Mode).
  68:	8f ef       	ldi	r24, 0xFF	; 255
  6a:	8b bb       	out	0x1b, r24	; 27
	DDRA=0X00;			//PortA data direction declaration as input.
  6c:	1a ba       	out	0x1a, r1	; 26
  6e:	30 e1       	ldi	r19, 0x10	; 16
  70:	20 e2       	ldi	r18, 0x20	; 32
  72:	90 e4       	ldi	r25, 0x40	; 64
  74:	88 e0       	ldi	r24, 0x08	; 8
	
	while(1)			//This is for the the infinity loop.
	{	
		if((PINA & 0x10)==0x00)			//checking for switch press at s1. 
  76:	cc 9b       	sbis	0x19, 4	; 25
		{			
			PORTC=0x10;						//LED1 ON
  78:	35 bb       	out	0x15, r19	; 21
		}
		
		if((PINA & 0x20)==0x00)			//checking for switch press at s2. 
  7a:	cd 9b       	sbis	0x19, 5	; 25
		{
			PORTC=0x20; 					//LED2 ON
  7c:	25 bb       	out	0x15, r18	; 21
		}
		
		if((PINA & 0x40)==0x00)			//checking for switch press at s3. 
  7e:	ce 9b       	sbis	0x19, 6	; 25
		{
			PORTC=0x40; 					//LED3 ON
  80:	95 bb       	out	0x15, r25	; 21
		}
		
		if((PINA & 0x80)==0x00)			//checking for switch press at s4. 
  82:	cf 99       	sbic	0x19, 7	; 25
  84:	f8 cf       	rjmp	.-16     	; 0x76 <main+0x14>
		{
			PORTC=0x08; 					//BZ ON
  86:	85 bb       	out	0x15, r24	; 21
			while((PINA & 0x80)==0x00);	//continuosly checking for s4
  88:	cf 9b       	sbis	0x19, 7	; 25
  8a:	fe cf       	rjmp	.-4      	; 0x88 <main+0x26>
			PORTC=0x00; 					//BZ OFF
  8c:	15 ba       	out	0x15, r1	; 21
  8e:	f3 cf       	rjmp	.-26     	; 0x76 <main+0x14>

00000090 <_exit>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <_exit>

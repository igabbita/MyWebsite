   1               		.file	"main.c"
   2               		.arch atmega8535
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  69               	.global	delayms
  71               	delayms:
  73               	.Ltext1:
   1:delay.h       **** /*	LCD.h
   2:delay.h       **** Technophilia embedded systems
   3:delay.h       **** 
   4:delay.h       **** 	this header file provides time delay in the form of mili second and micro second
   5:delay.h       **** 	without affecting any interrupts.
   6:delay.h       **** 
   7:delay.h       **** 	delayms()  this function provides delay in the form of mili second
   8:delay.h       **** 	delayus()  this function provides delay in the form of micro second
   9:delay.h       **** 	
  10:delay.h       **** */
  11:delay.h       **** #ifndef _DELAY_H_
  12:delay.h       **** #define _DELAY_H_
  13:delay.h       **** unsigned int delaycounter1,delaycounter2;
  14:delay.h       **** void delayms(unsigned int delaytime)
  15:delay.h       **** {
  74               	ue end (size=0) */
  76               	.LM1:
  77               		sts (delaycounter1)+1,__zero_reg__
  16:delay.h       **** 
  17:delay.h       **** 	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  78               	 delaycounter1,__zero_reg__
  79               		ldi r18,lo8(0)
  80 0000 1092 0000 		ldi r19,hi8(0)
  81 0004 1092 0000 	.L2:
  83 000a 30E0      	.LM2:
  84               		ldi r20,lo8(0)
  85               		ldi r21,hi8(0)
  86               	.L3:
  88 000e 50E0      	.LM3:
  89               	/* #APP */
  18:delay.h       **** 	 {
  19:delay.h       **** 		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
  20:delay.h       **** 		  {
  21:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  90               	op
  91               		nop
  92               		nop
  93 0010 0000      		nop
  95 0014 0000      	.LM4:
  96 0016 0000      		nop
  97 0018 0000      		nop
  98 001a 0000      		nop
  22:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  99               	
 100               		nop
 101 001c 0000      	/* #NOAPP */
 102 001e 0000      		subi r20,lo8(-(1))
 103 0020 0000      		sbci r21,hi8(-(1))
 105 0024 0000      	.LM5:
 106 0026 0000      		ldi r22,hi8(801)
 107               		cpi r20,lo8(801)
 108 0028 4F5F      		cpc r21,r22
 109 002a 5F4F      		brne .L3
 110               		subi r18,lo8(-(1))
 111               		sbci r19,hi8(-(1))
 113 002e 4132      	.LM6:
 114 0030 5607      		cp r24,r18
 115 0032 01F4      		cpc r25,r19
 116 0034 2F5F      		brsh .L2
 117 0036 3F4F      		sts (delaycounter1)+1,r19
 118               		sts delaycounter1,r18
 119               		sts (delaycounter2)+1,r21
 120 0038 8217      		sts delaycounter2,r20
 121 003a 9307      	/* epilogue: frame size=0 */
 122 003c 00F4      		ret
 123 003e 3093 0000 	/* epilogue end (size=1) */
 124 0042 2093 0000 	/* function delayms size 52 (51) */
 126 004a 4093 0000 	.Lscope0:
 129               	.global	delayus
 131               	delayus:
 133               	.LM7:
 134               	/* prologue: frame size=0 */
 135               	/* prologue end (size=0) */
 137               	.LM8:
  23:delay.h       **** 		  }
  24:delay.h       **** 		
  25:delay.h       **** 	 }
  26:delay.h       **** }
  27:delay.h       **** 
  28:delay.h       **** void delayus(unsigned int delaytime)
  29:delay.h       **** {
 138               	ts delaycounter1,__zero_reg__
 139               		ldi r18,lo8(0)
 140               		ldi r19,hi8(0)
 141               	.L12:
  30:delay.h       **** 
  31:delay.h       **** 	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 142               	abn	68,0,34,.LM9-delayus
 143               	.LM9:
 144 0050 1092 0000 	/* #APP */
 145 0054 1092 0000 		nop
 146 0058 20E0      		nop
 147 005a 30E0      		nop
 148               		nop
  32:delay.h       **** 	 {
  33:delay.h       **** 		 
  34:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 149               	op
 151               	.LM10:
 152 005c 0000      		nop
 153 005e 0000      		nop
 154 0060 0000      		nop
 155 0062 0000      		nop
 156 0064 0000      	/* #NOAPP */
 157 0066 0000      		subi r18,lo8(-(1))
  35:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");
 158               	,hi8(-(1))
 160 0068 0000      	.LM11:
 161 006a 0000      		cp r24,r18
 162 006c 0000      		cpc r25,r19
 163 006e 0000      		brsh .L12
 164               		sts (delaycounter1)+1,r19
 165 0070 2F5F      		sts delaycounter1,r18
 166 0072 3F4F      	/* epilogue: frame size=0 */
 167               		ret
 168               	/* epilogue end (size=1) */
 169 0074 8217      	/* function delayus size 36 (35) */
 171 0078 00F4      	.Lscope1:
 173 007e 2093 0000 	.global	adc_init
 175 0082 0895      	adc_init:
 177               	.Ltext2:
 179               	.LM12:
 180               	/* prologue: frame size=0 */
 181               	/* prologue end (size=0) */
 183               	.LM13:
 184               		ldi r24,lo8(-122)
 185               		out 38-0x20,r24
   1:adc.h         **** 
   2:adc.h         **** /***********************************************************************
   3:adc.h         **** 
   4:adc.h         **** Headerfile for make ADC convertion
   5:adc.h         **** 
   6:adc.h         **** ***********************************************************************
   7:adc.h         **** 
   8:adc.h         **** *COPYRIGHT(c) Technophilia.
   9:adc.h         **** 
  10:adc.h         **** //*Author:Technophilia
  11:adc.h         **** 
  12:adc.h         **** //*compiler:winavr
  13:adc.h         **** 
  14:adc.h         **** //************************************************************//**//*********//*	adc.h
  15:adc.h         **** //Technophilia embedded systems
  16:adc.h         **** 
  17:adc.h         **** */
  18:adc.h         **** 
  19:adc.h         **** #ifndef _ADC_H_
  20:adc.h         **** #define _ADC_H_						//This is the header for AVR Microcontroller.
  21:adc.h         **** #include<avr/io.h>
  22:adc.h         **** #include<technophilia/delay.h>		//header file for genarating time delay
  23:adc.h         **** #include<technophilia/lcd.h>		//headerfile for interfacing LCD
  24:adc.h         **** #include<avr/interrupt.h>			//header file for using interrupt service routins
  25:adc.h         **** unsigned int adcdata,adcdata1;
  26:adc.h         **** 
  27:adc.h         ****  void adc_init()
  28:adc.h         ****  {
 186               	
 187               		ret
 188               	/* epilogue end (size=1) */
 189               	/* function adc_init size 3 (2) */
  29:adc.h         ****   ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 190               	ize	adc_init, .-adc_init
 191               	.Lscope2:
 194               	.global	getdata
 196               	getdata:
 198               	.LM14:
 199               	/* prologue: frame size=0 */
 200               	/* prologue end (size=0) */
 202               	.LM15:
 203               		ldi r25,lo8(96)
 204               		out 39-0x20,r25
  30:adc.h         ****   		
  31:adc.h         ****  }
  32:adc.h         ****  unsigned char getdata(unsigned char chno)	
  33:adc.h         ****   {
 205               	,.LM16-getdata
 206               	.LM16:
 207               		in r25,39-0x20
 208               		or r25,r24
  34:adc.h         ****     ADMUX=0X60;						//right align the ADC result
 209               	 39-0x20,r25
 211 008a 90E6      	.LM17:
 212 008c 97B9      		sbi 38-0x20,6
  35:adc.h         ****     ADMUX|=chno;					//select the ADC channel
 213               	abn	68,0,37,.LM18-getdata
 214               	.LM18:
 215 008e 97B1      		ldi r24,lo8(1)
 216 0090 982B      		ldi r25,hi8(1)
 217 0092 97B9      		rcall delayms
  36:adc.h         ****     ADCSRA|=0X40;					//start ADC convertion
 218               	bn	68,0,38,.LM19-getdata
 219               	.LM19:
 220 0094 369A      		in r24,37-0x20
  37:adc.h         ****     delayms(1);					//give some time delay to complit the aDC convertion
 221               	tabn	68,0,39,.LM20-getdata
 222               	.LM20:
 223 0096 81E0      		clr r25
 224 0098 90E0      	/* epilogue: frame size=0 */
 225 009a 00D0      		ret
  38:adc.h         **** 	return ADCH;
 226               	ilogue end (size=1) */
 227               	/* function getdata size 12 (11) */
  39:adc.h         ****   }
 229               	cope3:
 232               	.global	dely_ns
 234               	dely_ns:
 236               	.Ltext3:
 238               	.LM21:
 239               	/* prologue: frame size=0 */
 240               	/* prologue end (size=0) */
 242               	.LM22:
 243               		sts j,__zero_reg__
 244               		lds r18,k
   1:lcd.h         **** /*	LCD.h
   2:lcd.h         **** Technophilia embedded systems
   3:lcd.h         **** 
   4:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
   5:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
   6:lcd.h         **** 	calling any other functions to initialize the lcd.
   7:lcd.h         **** 
   8:lcd.h         **** 
   9:lcd.h         **** 	lcd_init() ----- Call the lcd_init() function before calling any other functions
  10:lcd.h         **** 			  to initialize the lcd.
  11:lcd.h         **** 	lcd_cmd() ------ This function is used to give any command instructions to the
  12:lcd.h         **** 			  LCD. For e.g lcd_cmd(0x01) will give the clear command.
  13:lcd.h         **** 	lcd_char() ----- This function will display a single character on the LCD display.
  14:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
  15:lcd.h         **** 			  will display b.
  16:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
  17:lcd.h         **** 			  like lcd_string("This is AVR")
  18:lcd.h         **** 	lcd_showvalue()- This will show a 3-digit decimal value on the LCD. For example if
  19:lcd.h         **** 			  we give lcd_showvalue(0xFF) then 255 will be displayed.
  20:lcd.h         **** 	lcd_gotoxy()--- Will set the cursor at a particular position on of the LCD.
  21:lcd.h         **** 			  So lcd_gotoxy(1,4) will set the cursor at the 2d row 3rd column
  22:lcd.h         **** 			  row and column address are starts from(0,0)
  23:lcd.h         **** 	lcd_clear()---To clear the LCD
  24:lcd.h         **** 	
  25:lcd.h         **** */
  26:lcd.h         **** 
  27:lcd.h         **** #ifndef _LCD_H_
  28:lcd.h         **** #define _LCD_H_
  29:lcd.h         **** 
  30:lcd.h         **** 
  31:lcd.h         **** unsigned char k=0,j=0;
  32:lcd.h         **** unsigned char save=0;
  33:lcd.h         **** 
  34:lcd.h         **** void lcd_init(void);
  35:lcd.h         **** void lcd_cmd(unsigned char cmd);
  36:lcd.h         **** void latch(void);
  37:lcd.h         **** void dely_ns(unsigned char tim);
  38:lcd.h         **** void lcd_char(unsigned char single);
  39:lcd.h         **** void lcd_string(unsigned char str[32]);
  40:lcd.h         **** void lcd_showvalue(unsigned char num);
  41:lcd.h         **** void lcd_gotoxy(unsigned char row,unsigned char column);
  42:lcd.h         **** void delay_ms(unsigned int ms);
  43:lcd.h         **** void lcd_clear();
  44:lcd.h         **** 
  45:lcd.h         **** void lcd_init(void)	//init the lcd
  46:lcd.h         **** {	
  47:lcd.h         **** 	delay_ms(20);
  48:lcd.h         **** 	save=PORTC;
  49:lcd.h         **** 	DDRC=0xFF;
  50:lcd.h         **** 	delay_ms(15);
  51:lcd.h         **** 	PORTC=0x20;			//interface setup		
  52:lcd.h         **** 	lcd_cmd(0x01);
  53:lcd.h         **** 	lcd_cmd(0x02);
  54:lcd.h         **** 	lcd_cmd(0X80);
  55:lcd.h         **** 	delay_ms(20);
  56:lcd.h         **** }
  57:lcd.h         **** 
  58:lcd.h         **** void latch(void)
  59:lcd.h         **** {
  60:lcd.h         **** PORTC&=~0x04;
  61:lcd.h         **** dely_ns(200);  
  62:lcd.h         **** PORTC|=0x04;
  63:lcd.h         **** dely_ns(200);  
  64:lcd.h         **** PORTC&=~0x04;
  65:lcd.h         **** }
  66:lcd.h         **** 
  67:lcd.h         **** void dely_ns(unsigned char tim)
  68:lcd.h         **** {
 245               		rjmp .L22
 246               	.L23:
 248               	.LM23:
  69:lcd.h         **** 0);  
 249               	i r25,lo8(-(1))
 250               		ldi r18,lo8(11)
 251 00a2 1092 0000 	.L22:
 252 00a6 2091 0000 		cp r25,r24
 253 00aa 90E0      		brlo .L23
 254 00ac 00C0      		sts k,r18
 255               		sts j,r25
 256               	/* epilogue: frame size=0 */
 257               		ret
 258 00ae 9F5F      	/* epilogue end (size=1) */
 259 00b0 2BE0      	/* function dely_ns size 15 (14) */
 261 00b2 9817      	.Lscope4:
 263 00b6 2093 0000 	.global	latch
 265               	latch:
 267               	.LM24:
 268               	/* prologue: frame size=0 */
 269               	/* prologue end (size=0) */
 271               	.LM25:
 272               		cbi 53-0x20,2
 274               	.LM26:
 275               		ldi r24,lo8(-56)
 276               		rcall dely_ns
 278               	.LM27:
 279               		sbi 53-0x20,2
 281 00c0 AA98      	.LM28:
 282               		ldi r24,lo8(-56)
 283               		rcall dely_ns
 285 00c4 00D0      	.LM29:
 286               		cbi 53-0x20,2
 287               	/* epilogue: frame size=0 */
 288 00c6 AA9A      		ret
 289               	/* epilogue end (size=1) */
 290               	/* function latch size 8 (7) */
 292 00ca 00D0      	.Lscope5:
 295 00cc AA98      	.global	lcd_cmd
 297 00ce 0895      	lcd_cmd:
 299               	.LM30:
 300               	/* prologue: frame size=0 */
 301               		push r16
 302               		push r17
 303               	/* prologue end (size=2) */
 304               		mov r16,r24
 306               	.LM31:
  70:lcd.h         **** md(0x02);
  71:lcd.h         **** 	lcd_cmd(0X80);
  72:lcd.h         **** 	delay_ms(20);
  73:lcd.h         **** }
  74:lcd.h         **** 
  75:lcd.h         **** void latch(void)
  76:lcd.h         **** {
  77:lcd.h         **** PORTC&=~0x04;
 307               		68,0,79,.LM32-lcd_cmd
 308               	.LM32:
 309               		mov r24,r16
 310 00d0 0F93      		andi r24,lo8(-16)
 311 00d2 1F93      		out 53-0x20,r24
 313 00d4 082F      	.LM33:
  78:lcd.h         **** cmd(0x01);
 314               	latch
 316 00d6 85B3      	.LM34:
 317 00d8 887F      		clr r17
 318 00da 85BB      		andi r16,lo8(15)
  79:lcd.h         **** ay_ms(20);
 319               	 r17,hi8(15)
 320               		ldi r24,4
 321 00dc 802F      	1:	lsl r16
 322 00de 807F      		rol r17
 323 00e0 85BB      		dec r24
  80:lcd.h         **** );
 324               	 1b
 325               		out 53-0x20,r16
  81:lcd.h         **** d char str[32]);
 327               	35:
 328               		rcall latch
 329 00e4 1127      	/* epilogue: frame size=0 */
 330 00e6 0F70      		pop r17
 331 00e8 1070      		pop r16
 332 00ea 84E0      		ret
 333 00ec 000F      	/* epilogue end (size=3) */
 334 00ee 111F      	/* function lcd_cmd size 23 (18) */
 336 00f2 01F4      	.Lscope6:
  82:lcd.h         **** id);
 338               	ngle:P(0,11)",64,0,0,17
 339               	.global	lcd_char
 341               	lcd_char:
 343 00fa 0F91      	.LM36:
 344 00fc 0895      	/* prologue: frame size=0 */
 345               		push r17
 346               	/* prologue end (size=1) */
 347               		mov r17,r24
 349               	.LM37:
 350               		ldi r24,lo8(1)
 351               		out 53-0x20,r24
 353               	.LM38:
  83:lcd.h         **** unsigned char k=0,j=0;
  84:lcd.h         **** unsigned char save=0;
  85:lcd.h         **** 
  86:lcd.h         **** void lcd_init(void);
  87:lcd.h         **** void lcd_cmd(unsigned char cmd);
 354               	ero_reg__
 356               	.LM39:
 357 00fe 1F93      		mov r24,r17
 358               		andi r24,lo8(-16)
 359 0100 182F      		ori r24,lo8(1)
  88:lcd.h         **** 
 360               	3-0x20,r24
 362 0102 81E0      	.LM40:
 363 0104 85BB      		rcall latch
  89:lcd.h         ****  the 2d row 3rd column
 364               	abn	68,0,92,.LM41-lcd_char
 365               	.LM41:
 366 0106 15BA      		swap r17
  90:lcd.h         **** -- Will set the cursor at a particular position on of the LCD.
 367               	di r17,0xf0
 368               		ori r17,lo8(1)
 369 0108 812F      		out 53-0x20,r17
 371 010c 8160      	.LM42:
 372 010e 85BB      		rcall latch
  91:lcd.h         **** we give lcd_showvalue(0xFF) then 255 will be displayed.
 373               	logue: frame size=0 */
 374               		pop r17
 375 0110 00D0      		ret
  92:lcd.h         **** lue()- This will show a 3-digit decimal value on the LCD. For example if
 376               	epilogue end (size=2) */
 377               	/* function lcd_char size 17 (14) */
 379 0114 107F      	.Lscope7:
  93:lcd.h         ****  this would be
 382               	l	lcd_string
 384 011a 00D0      	lcd_string:
 386 011c 1F91      	.LM43:
 387 011e 0895      	/* prologue: frame size=0 */
 388               		push r14
 389               		push r15
 390               		push r16
 391               		push r17
 392               		push r28
 393               		push r29
 394               	/* prologue end (size=6) */
 395               		movw r14,r24
  94:lcd.h         **** l display A. Again lcd_char('b')
  95:lcd.h         **** 			  will display b.
  96:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
  97:lcd.h         **** 			  like lcd_string("This is AVR")
 397               	,lo8(1)
 398               		out 53-0x20,r24
 400 0120 EF92      	.LM45:
 401 0122 FF92      		out 53-0x20,__zero_reg__
 402 0124 0F93      		ldi r16,lo8(0)
 403 0126 1F93      		ldi r17,hi8(0)
 404 0128 CF93      		rjmp .L33
 405 012a DF93      	.L34:
 407 012c 7C01      	.LM46:
  98:lcd.h         ****  will display b.
  99:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
 408               	8(16)
 409               		brne .L35
 411 0130 85BB      	.LM47:
 100:lcd.h         **** l display A. Again lcd_char('b')
 412               	 r24,lo8(-64)
 413               		rcall lcd_cmd
 414 0132 15BA      	.L35:
 416 0136 10E0      	.LM48:
 417 0138 00C0      		ld r24,Y
 418               		andi r24,lo8(-16)
 101:lcd.h         **** ---- This function will display a single character on the LCD display.
 102:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
 103:lcd.h         **** 			  will display b.
 419               	4,lo8(1)
 420               		out 53-0x20,r24
 422 013c 01F4      	.LM49:
 104:lcd.h         **** l display a single character on the LCD display.
 423               	ll latch
 425 013e 80EC      	.LM50:
 426 0140 00D0      		ld r24,Y
 427               		swap r24
 105:lcd.h         **** LCD. For e.g lcd_cmd(0x01) will give the clear command.
 428               	 r24,0xf0
 429               		ori r24,lo8(1)
 430 0142 8881      		out 53-0x20,r24
 432 0146 8160      	.LM51:
 433 0148 85BB      		rcall latch
 106:lcd.h         **** 	lcd_cmd() ------ This function is used to give any command instructions to the
 434               	r16,lo8(-(1))
 435               		sbci r17,hi8(-(1))
 436 014a 00D0      	.L33:
 107:lcd.h         **** efore calling any other functions
 437               	v r25,r16
 439 014c 8881      	.LM52:
 440 014e 8295      		movw r28,r14
 441 0150 807F      		add r28,r16
 442 0152 8160      		adc r29,__zero_reg__
 443 0154 85BB      		ld r24,Y
 108:lcd.h         ****  before
 444               	4
 445               		brne .L34
 446 0156 00D0      	/* epilogue: frame size=0 */
 447 0158 0F5F      		pop r29
 448 015a 1F4F      		pop r28
 449               		pop r17
 450 015c 902F      		pop r16
 451               		pop r15
 452               		pop r14
 453 015e E701      		ret
 454 0160 C00F      	/* epilogue end (size=7) */
 455 0162 D11D      	/* function lcd_string size 44 (31) */
 460 016a DF91      	.Lscope8:
 463 0170 0F91      	.global	lcd_showvalue
 465 0174 EF90      	lcd_showvalue:
 467               	.LM53:
 468               	/* prologue: frame size=0 */
 469               		push r13
 470               		push r14
 471               		push r15
 472               		push r16
 473               		push r17
 474               	/* prologue end (size=5) */
 475               		mov r13,r24
 477               	.LM54:
 478               		ldi r22,lo8(100)
 109:lcd.h         **** header files have implementation of some common finctions of the LCD.
 110:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 111:lcd.h         **** 	calling any other functions to initialize the lcd.
 112:lcd.h         **** 
 113:lcd.h         **** 
 114:lcd.h         **** 	lcd_init() ----- Call the lcd_init() function before calling any other functions
 115:lcd.h         **** 			  to initialize the lcd.
 479               	stabn	68,0,118,.LM55-lcd_showvalue
 480               	.LM55:
 481               		ldi r25,lo8(100)
 482 0178 DF92      		mov r14,r25
 483 017a EF92      		mul r24,r14
 484 017c FF92      		movw r14,r0
 485 017e 0F93      		clr r1
 486 0180 1F93      		mov r24,r13
 487               		clr r25
 488 0182 D82E      		sub r24,r14
 116:lcd.h         **** nctions to initialize the lcd.
 117:lcd.h         **** 
 489               	15
 490               		ldi r22,lo8(10)
 491 0184 64E6      		ldi r23,hi8(10)
 492 0186 00D0      		rcall __divmodhi4
 493 0188 282F      		movw r16,r22
 118:lcd.h         **** ns of the LCD.
 494               	bn	68,0,121,.LM56-lcd_showvalue
 495               	.LM56:
 496 018a 94E6      		mov r24,r18
 497 018c E92E      		subi r24,lo8(-(48))
 498 018e 8E9D      		rcall lcd_char
 500 0192 1124      	.LM57:
 501 0194 8D2D      		mov r24,r16
 502 0196 9927      		subi r24,lo8(-(48))
 503 0198 8E19      		rcall lcd_char
 505 019c 6AE0      	.LM58:
 506 019e 70E0      		sub r13,r14
 507 01a0 00D0      		ldi r24,lo8(10)
 508 01a2 8B01      		mul r16,r24
 119:lcd.h         **** /*	LCD.h
 120:lcd.h         **** Technophilia embedded systems
 121:lcd.h         **** 
 509               	lr r1
 510               		sub r13,r24
 511 01a4 822F      		mov r24,r13
 512 01a6 805D      		subi r24,lo8(-(48))
 513 01a8 00D0      		rcall lcd_char
 122:lcd.h         **** /*	LCD.h
 514               	ilogue: frame size=0 */
 515               		pop r17
 516 01aa 802F      		pop r16
 517 01ac 805D      		pop r15
 518 01ae 00D0      		pop r14
 123:lcd.h         **** /*	LCD.h
 519               	r13
 520               		ret
 521 01b0 DE18      	/* epilogue end (size=6) */
 522 01b2 8AE0      	/* function lcd_showvalue size 43 (32) */
 527 01bc 8D2D      	.Lscope9:
 531 01c2 1F91      	.global	lcd_gotoxy
 533 01c6 FF90      	lcd_gotoxy:
 535 01ca DF90      	.LM59:
 536 01cc 0895      	/* prologue: frame size=0 */
 537               	/* prologue end (size=0) */
 539               	.LM60:
 540               		tst r24
 541               		brne .L42
 543               	.LM61:
 544               		mov r24,r22
 545               		subi r24,lo8(-(-128))
 546               		rcall lcd_cmd
 547               		ret
 548               	.L42:
 124:lcd.h         **** /*	LCD.h
 125:lcd.h         **** Technophilia embedded systems
 126:lcd.h         **** 
 127:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
 550               	46
 552               	.LM63:
 553               		mov r24,r22
 128:lcd.h         **** /*	LCD.h
 554               	i r24,lo8(-(-64))
 555               		rcall lcd_cmd
 556 01ce 8823      	.L46:
 557 01d0 01F4      		ret
 129:lcd.h         **** /*	LCD.h
 130:lcd.h         **** Technophilia embedded systems
 558               	-(-128))
 559               		rcall lcd_cmd
 560 01d2 862F      		ret
 561 01d4 8058      	.L42:
 563 01d8 0895      	.LM62:
 564               		cpi r24,lo8(1)
 131:lcd.h         **** /*	LCD.h
 132:lcd.h         **** Technophilia embedded systems
 565               	L46
 567 01da 8130      	.LM63:
 568 01dc 01F4      		mov r24,r22
 133:lcd.h         **** /*	LCD.h
 134:lcd.h         **** Technophilia embedded systems
 569               	i r24,lo8(-(-64))
 570               		rcall lcd_cmd
 571 01de 862F      	.L46:
 572 01e0 8054      		ret
 573 01e2 00D0      	/* epilogue: frame size=0 */
 574               	/* epilogue: noreturn */
 575 01e4 0895      	/* epilogue end (size=0) */
 576               	/* function lcd_gotoxy size 12 (12) */
 578               	.Lscope10:
 581               	.global	delay_ms
 583               	delay_ms:
 585               	.LM64:
 586               	/* prologue: frame size=0 */
 135:lcd.h         **** /*	LCD.h
 136:lcd.h         **** Technophilia embedded systems
 137:lcd.h         **** 
 138:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
 139:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 140:lcd.h         **** 	calling any other functions to initialize the lcd.
 587               	abs	"delay_ms:F(0,15)",36,0,0,delay_ms
 589               	.global	delay_ms
 591 01e6 00C0      	delay_ms:
 141:lcd.h         **** ions of the LCD.
 142:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 143:lcd.h         **** 	calling any other functions to initialize the lcd.
 593               	d_gotoxy, .-lcd_gotoxy
 594               	.Lscope10:
 597               	.global	delay_ms
 144:lcd.h         **** ions of the LCD.
 145:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 146:lcd.h         **** 	calling any other functions to initialize the lcd.
 147:lcd.h         **** 
 598               	pilogue end (size=0) */
 599               	/* function lcd_gotoxy size 12 (12) */
 601 01ec 0000      	.Lscope10:
 604               	.global	delay_ms
 606 01f0 3F4F      	delay_ms:
 608 01f4 2C3C      	.LM64:
 609 01f6 3407      	/* prologue: frame size=0 */
 610 01f8 01F4      	/* prologue end (size=0) */
 611               		rjmp .L48
 612               	.L49:
 614 01fa 0197      	.LM65:
 615 01fc 2FEF      		ldi r18,lo8(0)
 616 01fe 8F3F      		ldi r19,hi8(0)
 617 0200 9207      	.L50:
 619               	.LM66:
 620 0204 0895      	/* #APP */
 621               		nop
 623               	.LM67:
 624               	/* #NOAPP */
 625               		subi r18,lo8(-(1))
 626               		sbci r19,hi8(-(1))
 627               		ldi r20,hi8(3276)
 628               		cpi r18,lo8(3276)
 629               		cpc r19,r20
 630               		brne .L50
 631               	.L48:
 633               	.LM68:
 634               		sbiw r24,1
 635               		ldi r18,hi8(-1)
 636               		cpi r24,lo8(-1)
 637               		cpc r25,r18
 638 0206 84E1      		brne .L49
 639 0208 90E0      	/* epilogue: frame size=0 */
 640 020a 00D0      		ret
 641               	/* epilogue end (size=1) */
 642               	/* function delay_ms size 17 (16) */
 647 0212 8FEF      	.Lscope11:
 649               	.global	lcd_init
 651 0216 8FE0      	lcd_init:
 653 021a 00D0      	.LM69:
 654               	/* prologue: frame size=0 */
 655               	/* prologue end (size=0) */
 657 021e 85BB      	.LM70:
 658               		ldi r24,lo8(20)
 659               		ldi r25,hi8(20)
 660 0220 81E0      		rcall delay_ms
 662               	.LM71:
 663               		in r24,53-0x20
 664 0224 82E0      		sts save,r24
 666               	.LM72:
 667               		ldi r24,lo8(-1)
 668 0228 80E8      		out 52-0x20,r24
 670               	.LM73:
 671               		ldi r24,lo8(15)
 672 022c 84E1      		ldi r25,hi8(15)
 673 022e 90E0      		rcall delay_ms
 675               	.LM74:
 676 0232 0895      		ldi r24,lo8(32)
 677               		out 53-0x20,r24
 679               	.LM75:
 680               		ldi r24,lo8(1)
 681               		rcall lcd_cmd
 683               	.LM76:
 684               		ldi r24,lo8(2)
 148:lcd.h         **** ns of the LCD.
 149:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 150:lcd.h         **** 	calling any other functions to initialize the lcd.
 151:lcd.h         **** 
 152:lcd.h         **** 
 685               		68,0,52,.LM75-lcd_init
 686               	.LM75:
 687               		ldi r24,lo8(1)
 688               		rcall lcd_cmd
 153:lcd.h         ****  of the LCD.
 689               	lcd_init
 690               	.LM74:
 691 0234 81E0      		ldi r24,lo8(32)
 692 0236 00D0      		out 53-0x20,r24
 694 0238 0895      	.LM75:
 695               		ldi r24,lo8(1)
 696               		rcall lcd_cmd
 698               	.LM76:
 699               		ldi r24,lo8(2)
 700               		rcall lcd_cmd
 702               	.LM77:
 703               		ldi r24,lo8(-128)
 704               		rcall lcd_cmd
   1:main.c        **** /***********************************************************************
   2:main.c        **** 
   3:main.c        **** CODE5.3: Program for ADC using Header
   4:main.c        **** 
   5:main.c        **** ***********************************************************************
   6:main.c        **** COPYRIGHT(C)Technophilia Systems
   7:main.c        **** Date:...............1st May 2011
   8:main.c        **** Author:.............Prasanta Kumar Nayak
   9:main.c        **** Organization:.......Technophilia Syestems
  10:main.c        **** Target system:......AVR devlopment board s/n-107010
  11:main.c        **** Manufacturer:.......Technophilia Syestems
  12:main.c        **** Microcontroller:....ATmega-8535
  13:main.c        **** Clock:..............16mhz
  14:main.c        **** 
  15:main.c        **** ***********************************************************************/
  16:main.c        **** 
  17:main.c        **** #include<avr/io.h>
  18:main.c        **** #include"delay.h"
  19:main.c        **** #include"adc.h"							//header file for ADC
  20:main.c        **** #include"lcd.h"
  21:main.c        **** 
  22:main.c        **** int main(void)
  23:main.c        **** {	
 705               	
 706               	.LM76:
 707               		ldi r24,lo8(2)
 708               		rcall lcd_cmd
 710               	.LM77:
 711               		ldi r24,lo8(-128)
 712               		rcall lcd_cmd
 714               	.LM78:
 715 023a 86E8      		ldi r24,lo8(20)
 716 023c 86B9      		ldi r25,hi8(20)
 717               		rcall delay_ms
 718               	/* epilogue: frame size=0 */
 719               		ret
 720               	/* epilogue end (size=1) */
  24:main.c        ****  adc_init();
  25:main.c        ****  lcd_init();
 721               	lo8(20)
 722               		ldi r25,hi8(20)
 723 023e 00D0      		rcall delay_ms
 724               	/* epilogue: frame size=0 */
  26:main.c        ****  while(1)
  27:main.c        ****   {
  28:main.c        ****    lcd_gotoxy(0,0);						// Place the cursor at Row 0 & Column 0 on LCD
 725               	,55,.LM78-lcd_init
 726               	.LM78:
 727 0240 60E0      		ldi r24,lo8(20)
 728 0242 80E0      		ldi r25,hi8(20)
 729 0244 00D0      		rcall delay_ms
  29:main.c        ****    lcd_showvalue(getdata(0x00));		// Read from channel 0 (PORTA0)
 730               	8)
 731               		rcall lcd_cmd
 733 0248 00D0      	.LM78:
 734 024a 00D0      		ldi r24,lo8(20)
  30:main.c        ****    delayms(100);   
 735               	77-lcd_init
 736               	.LM77:
 737 024c 84E6      		ldi r24,lo8(-128)
 738 024e 90E0      		rcall lcd_cmd
 740 0252 00C0      	.LM78:
 741               		ldi r24,lo8(20)
 742               		ldi r25,hi8(20)
 743               		rcall delay_ms
 744               	/* epilogue: frame size=0 */
 745               		ret
 746               	/* epilogue end (size=1) */
 747               	/* function lcd_init size 23 (22) */
 749               	.Lscope12:
 751               	.global	lcd_clear
 753 0000 00        	lcd_clear:
 755               	.LM79:
 756               	/* prologue: frame size=0 */
 757               	/* prologue end (size=0) */
 759 0001 00        	.LM80:
 760               		ldi r24,lo8(1)
 761               		rcall lcd_cmd
 762               	/* epilogue: frame size=0 */
 763               		ret
 764               	/* epilogue end (size=1) */
 765 0002 00        	/* function lcd_clear size 3 (2) */
 767               	.Lscope13:
 769               	.global	main
 771               	main:
 773               	.Ltext4:
 775               	.LM81:
 776               	/* prologue: frame size=0 */
 777               	/* prologue end (size=0) */
 778               	.LBB4:
 779               	.LBB5:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:3      *ABS*:0000003f __SREG__
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:4      *ABS*:0000003e __SP_H__
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:5      *ABS*:0000003d __SP_L__
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:7      *ABS*:00000001 __zero_reg__
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:71     .text:00000000 delayms
                            *COM*:00000002 delaycounter1
                            *COM*:00000002 delaycounter2
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:137    .text:00000050 delayus
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:183    .text:00000084 adc_init
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:204    .text:0000008a getdata
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:242    .text:000000a2 dely_ns
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:758    .bss:00000001 j
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:752    .bss:00000000 k
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:274    .text:000000c0 latch
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:306    .text:000000d0 lcd_cmd
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:353    .text:000000fe lcd_char
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:396    .text:00000120 lcd_string
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:478    .text:00000178 lcd_showvalue
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:549    .text:000001ce lcd_gotoxy
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:586    .text:000001e6 delay_ms
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:631    .text:00000206 lcd_init
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:764    .bss:00000002 save
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:684    .text:00000234 lcd_clear
C:\Users\User\AppData\Local\Temp/cc4IPUvb.s:702    .text:0000023a main
                            *COM*:00000002 adcdata
                            *COM*:00000002 adcdata1

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__udivmodqi4
__divmodhi4


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000422  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000d  00800060  00800060  00000496  2**0
                  ALLOC
  2 .stab         00000d38  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000095d  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	ad 36       	cpi	r26, 0x6D	; 109
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	a1 d1       	rcall	.+834    	; 0x38a <main>
  48:	ea c1       	rjmp	.+980    	; 0x41e <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <adc_init>:
#include<avr/interrupt.h>			//header file for using interrupt service routins
unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  4c:	86 e8       	ldi	r24, 0x86	; 134
  4e:	86 b9       	out	0x06, r24	; 6
  		
 }
  50:	08 95       	ret

00000052 <dely_ns>:
dely_ns(200);  
PORTC&=~0x04;
}

void dely_ns(unsigned char tim)
{
  52:	20 91 60 00 	lds	r18, 0x0060
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	02 c0       	rjmp	.+4      	; 0x5e <dely_ns+0xc>
	for(j=0;j<tim;j++)
  5a:	9f 5f       	subi	r25, 0xFF	; 255
  5c:	2b e0       	ldi	r18, 0x0B	; 11
  5e:	98 17       	cp	r25, r24
  60:	e0 f3       	brcs	.-8      	; 0x5a <dely_ns+0x8>
  62:	20 93 60 00 	sts	0x0060, r18
  66:	90 93 61 00 	sts	0x0061, r25
	{
		for(k=0;k<11;k++)
		{};
	}
}
  6a:	08 95       	ret

0000006c <latch>:
	delay_ms(20);
}

void latch(void)
{
PORTC&=~0x04;
  6c:	aa 98       	cbi	0x15, 2	; 21
dely_ns(200);  
  6e:	88 ec       	ldi	r24, 0xC8	; 200
  70:	f0 df       	rcall	.-32     	; 0x52 <dely_ns>
PORTC|=0x04;
  72:	aa 9a       	sbi	0x15, 2	; 21
dely_ns(200);  
  74:	88 ec       	ldi	r24, 0xC8	; 200
  76:	ed df       	rcall	.-38     	; 0x52 <dely_ns>
PORTC&=~0x04;
  78:	aa 98       	cbi	0x15, 2	; 21
}
  7a:	08 95       	ret

0000007c <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	08 2f       	mov	r16, r24
	PORTC&=~0x07;
  82:	85 b3       	in	r24, 0x15	; 21
  84:	88 7f       	andi	r24, 0xF8	; 248
  86:	85 bb       	out	0x15, r24	; 21
	PORTC=((cmd&0xF0));			
  88:	80 2f       	mov	r24, r16
  8a:	80 7f       	andi	r24, 0xF0	; 240
  8c:	85 bb       	out	0x15, r24	; 21
	latch();
  8e:	ee df       	rcall	.-36     	; 0x6c <latch>
	PORTC=(((cmd&(0x0F))*16));	
  90:	10 e0       	ldi	r17, 0x00	; 0
  92:	0f 70       	andi	r16, 0x0F	; 15
  94:	10 70       	andi	r17, 0x00	; 0
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	00 0f       	add	r16, r16
  9a:	11 1f       	adc	r17, r17
  9c:	8a 95       	dec	r24
  9e:	e1 f7       	brne	.-8      	; 0x98 <lcd_cmd+0x1c>
  a0:	05 bb       	out	0x15, r16	; 21
	latch();
  a2:	e4 df       	rcall	.-56     	; 0x6c <latch>
}
  a4:	1f 91       	pop	r17
  a6:	0f 91       	pop	r16
  a8:	08 95       	ret

000000aa <lcd_char>:


void lcd_char(unsigned char single)
{
  aa:	1f 93       	push	r17
  ac:	18 2f       	mov	r17, r24
	PORTC=0x01;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	85 bb       	out	0x15, r24	; 21
	PORTC=0x00;
  b2:	15 ba       	out	0x15, r1	; 21
	PORTC=(single&0xF0)|0x01;						
  b4:	81 2f       	mov	r24, r17
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	85 bb       	out	0x15, r24	; 21
	latch();
  bc:	d7 df       	rcall	.-82     	; 0x6c <latch>
	PORTC=((single&(0x0F))*16)|0x01;
  be:	12 95       	swap	r17
  c0:	10 7f       	andi	r17, 0xF0	; 240
  c2:	11 60       	ori	r17, 0x01	; 1
  c4:	15 bb       	out	0x15, r17	; 21
	latch();
  c6:	d2 df       	rcall	.-92     	; 0x6c <latch>
}
  c8:	1f 91       	pop	r17
  ca:	08 95       	ret

000000cc <lcd_string>:

void lcd_string(unsigned char str[32])
{
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTC=0x01;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	85 bb       	out	0x15, r24	; 21
	PORTC=0X00;
  dc:	15 ba       	out	0x15, r1	; 21
  de:	10 e0       	ldi	r17, 0x00	; 0
  e0:	10 c0       	rjmp	.+32     	; 0x102 <lcd_string+0x36>
		while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
  e2:	10 31       	cpi	r17, 0x10	; 16
  e4:	11 f4       	brne	.+4      	; 0xea <lcd_string+0x1e>
				lcd_cmd(0XC0);
  e6:	80 ec       	ldi	r24, 0xC0	; 192
  e8:	c9 df       	rcall	.-110    	; 0x7c <lcd_cmd>
			PORTC=((str[k])&0xF0)|0x01;
  ea:	88 81       	ld	r24, Y
  ec:	80 7f       	andi	r24, 0xF0	; 240
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	85 bb       	out	0x15, r24	; 21
			latch();
  f2:	bc df       	rcall	.-136    	; 0x6c <latch>
			PORTC=((str[k]&(0x0F))*16)|0x01;
  f4:	88 81       	ld	r24, Y
  f6:	82 95       	swap	r24
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	85 bb       	out	0x15, r24	; 21
			latch();
  fe:	b6 df       	rcall	.-148    	; 0x6c <latch>
			k++;
 100:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTC=0x01;
	PORTC=0X00;
		while(str[k]!='\0')	//Till null character is encountered
 102:	e7 01       	movw	r28, r14
 104:	c1 0f       	add	r28, r17
 106:	d1 1d       	adc	r29, r1
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	51 f7       	brne	.-44     	; 0xe2 <lcd_string+0x16>
			latch();
			PORTC=((str[k]&(0x0F))*16)|0x01;
			latch();
			k++;
		}
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	ff 90       	pop	r15
 116:	ef 90       	pop	r14
 118:	08 95       	ret

0000011a <lcd_showvalue>:


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 124:	64 e6       	ldi	r22, 0x64	; 100
 126:	48 d1       	rcall	.+656    	; 0x3b8 <__udivmodqi4>
 128:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 12a:	28 2f       	mov	r18, r24
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	8c e9       	ldi	r24, 0x9C	; 156
 130:	9f ef       	ldi	r25, 0xFF	; 255
 132:	28 9f       	mul	r18, r24
 134:	70 01       	movw	r14, r0
 136:	29 9f       	mul	r18, r25
 138:	f0 0c       	add	r15, r0
 13a:	38 9f       	mul	r19, r24
 13c:	f0 0c       	add	r15, r0
 13e:	11 24       	eor	r1, r1
 140:	c7 01       	movw	r24, r14
 142:	81 0f       	add	r24, r17
 144:	91 1d       	adc	r25, r1
 146:	6a e0       	ldi	r22, 0x0A	; 10
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	42 d1       	rcall	.+644    	; 0x3d0 <__divmodhi4>
 14c:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 14e:	84 2f       	mov	r24, r20
 150:	80 5d       	subi	r24, 0xD0	; 208
 152:	ab df       	rcall	.-170    	; 0xaa <lcd_char>
	lcd_char(T+48);
 154:	80 2f       	mov	r24, r16
 156:	80 5d       	subi	r24, 0xD0	; 208
 158:	a8 df       	rcall	.-176    	; 0xaa <lcd_char>
	lcd_char(O+48);
 15a:	10 5d       	subi	r17, 0xD0	; 208
 15c:	1e 0d       	add	r17, r14
 15e:	86 ef       	ldi	r24, 0xF6	; 246
 160:	9f ef       	ldi	r25, 0xFF	; 255
 162:	08 9f       	mul	r16, r24
 164:	00 2d       	mov	r16, r0
 166:	11 24       	eor	r1, r1
 168:	80 2f       	mov	r24, r16
 16a:	81 0f       	add	r24, r17
 16c:	9e df       	rcall	.-196    	; 0xaa <lcd_char>
}
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
{
   if(row==0)
 178:	88 23       	and	r24, r24
 17a:	21 f4       	brne	.+8      	; 0x184 <lcd_gotoxy+0xc>
    {
	 lcd_cmd(0x80+column);
 17c:	86 2f       	mov	r24, r22
 17e:	80 58       	subi	r24, 0x80	; 128
 180:	7d df       	rcall	.-262    	; 0x7c <lcd_cmd>
 182:	08 95       	ret
	}
   else if(row==1)
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	19 f4       	brne	.+6      	; 0x18e <lcd_gotoxy+0x16>
	{
	 lcd_cmd(0xC0+column);	
 188:	86 2f       	mov	r24, r22
 18a:	80 54       	subi	r24, 0x40	; 64
 18c:	77 df       	rcall	.-274    	; 0x7c <lcd_cmd>
 18e:	08 95       	ret

00000190 <delay_ms>:
	}	
}


void delay_ms(unsigned int ms)
{
 190:	0a c0       	rjmp	.+20     	; 0x1a6 <delay_ms+0x16>
	int i;

	while (ms-- > 0)
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
 196:	00 00       	nop
	int i;

	while (ms-- > 0)
	{
		
		for (i = 0; i < 3276; ++i)
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	4c e0       	ldi	r20, 0x0C	; 12
 19e:	2c 3c       	cpi	r18, 0xCC	; 204
 1a0:	34 07       	cpc	r19, r20
 1a2:	c9 f7       	brne	.-14     	; 0x196 <delay_ms+0x6>
 1a4:	01 97       	sbiw	r24, 0x01	; 1

void delay_ms(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	a1 f7       	brne	.-24     	; 0x192 <delay_ms+0x2>
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 1aa:	08 95       	ret

000001ac <lcd_init>:
void delay_ms(unsigned int ms);
void lcd_clear();

void lcd_init(void)	//init the lcd
{	
	delay_ms(20);
 1ac:	84 e1       	ldi	r24, 0x14	; 20
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	ef df       	rcall	.-34     	; 0x190 <delay_ms>
	save=PORTC;
 1b2:	85 b3       	in	r24, 0x15	; 21
 1b4:	80 93 62 00 	sts	0x0062, r24
	DDRC=0xFF;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	84 bb       	out	0x14, r24	; 20
	delay_ms(15);
 1bc:	8f e0       	ldi	r24, 0x0F	; 15
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	e7 df       	rcall	.-50     	; 0x190 <delay_ms>
	PORTC=0x20;			//interface setup		
 1c2:	80 e2       	ldi	r24, 0x20	; 32
 1c4:	85 bb       	out	0x15, r24	; 21
	lcd_cmd(0x01);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	59 df       	rcall	.-334    	; 0x7c <lcd_cmd>
	lcd_cmd(0x02);
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	57 df       	rcall	.-338    	; 0x7c <lcd_cmd>
	lcd_cmd(0X80);
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	55 df       	rcall	.-342    	; 0x7c <lcd_cmd>
	delay_ms(20);
 1d2:	84 e1       	ldi	r24, 0x14	; 20
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	dc df       	rcall	.-72     	; 0x190 <delay_ms>
}
 1d8:	08 95       	ret

000001da <lcd_clear>:
	}
}

void lcd_clear()
{
 lcd_cmd(0x01);
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	4f df       	rcall	.-354    	; 0x7c <lcd_cmd>
}
 1de:	08 95       	ret

000001e0 <delayms>:
*/
#ifndef _DELAY_H_
#define _DELAY_H_
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{
 1e0:	20 91 67 00 	lds	r18, 0x0067
 1e4:	30 91 68 00 	lds	r19, 0x0068
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	16 c0       	rjmp	.+44     	; 0x21a <delayms+0x3a>
	...
	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
		  {
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 206:	2f 5f       	subi	r18, 0xFF	; 255
 208:	3f 4f       	sbci	r19, 0xFF	; 255
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
 20a:	63 e0       	ldi	r22, 0x03	; 3
 20c:	22 32       	cpi	r18, 0x22	; 34
 20e:	36 07       	cpc	r19, r22
 210:	71 f7       	brne	.-36     	; 0x1ee <delayms+0xe>
 212:	4f 5f       	subi	r20, 0xFF	; 255
 214:	5f 4f       	sbci	r21, 0xFF	; 255
 216:	21 e2       	ldi	r18, 0x21	; 33
 218:	33 e0       	ldi	r19, 0x03	; 3
#define _DELAY_H_
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 21a:	84 17       	cp	r24, r20
 21c:	95 07       	cpc	r25, r21
 21e:	18 f0       	brcs	.+6      	; 0x226 <delayms+0x46>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	f0 cf       	rjmp	.-32     	; 0x206 <delayms+0x26>
 226:	30 93 68 00 	sts	0x0068, r19
 22a:	20 93 67 00 	sts	0x0067, r18
 22e:	50 93 6a 00 	sts	0x006A, r21
 232:	40 93 69 00 	sts	0x0069, r20
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  }
		
	 }
}
 236:	08 95       	ret

00000238 <getdata>:
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 238:	90 e6       	ldi	r25, 0x60	; 96
 23a:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
 23c:	97 b1       	in	r25, 0x07	; 7
 23e:	98 2b       	or	r25, r24
 240:	97 b9       	out	0x07, r25	; 7
    ADCSRA|=0X40;					//start ADC convertion
 242:	36 9a       	sbi	0x06, 6	; 6
    delayms(1);					//give some time delay to complit the aDC convertion
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	cb df       	rcall	.-106    	; 0x1e0 <delayms>
	return ADCH;
 24a:	85 b1       	in	r24, 0x05	; 5
  }
 24c:	08 95       	ret

0000024e <delayus>:

void delayus(unsigned int delaytime)
{
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	0c c0       	rjmp	.+24     	; 0x26c <__stack+0xd>
	...

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
 268:	2f 5f       	subi	r18, 0xFF	; 255
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
}

void delayus(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 26c:	82 17       	cp	r24, r18
 26e:	93 07       	cpc	r25, r19
 270:	88 f7       	brcc	.-30     	; 0x254 <delayus+0x6>
 272:	30 93 6a 00 	sts	0x006A, r19
 276:	20 93 69 00 	sts	0x0069, r18
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
	 }
}
 27a:	08 95       	ret

0000027c <uartinit>:
#ifndef _UART_H_
#define _UART_H_

void uartinit()
{
	UCSRA=0x00;
 27c:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x18;
 27e:	88 e1       	ldi	r24, 0x18	; 24
 280:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
 282:	86 e8       	ldi	r24, 0x86	; 134
 284:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
 286:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x67;
 288:	87 e6       	ldi	r24, 0x67	; 103
 28a:	89 b9       	out	0x09, r24	; 9
	delayms(100);
 28c:	84 e6       	ldi	r24, 0x64	; 100
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	a7 df       	rcall	.-178    	; 0x1e0 <delayms>
}
 292:	08 95       	ret

00000294 <dispdata>:
}
 
 
unsigned char dispdata()
{
  while((UCSRA&0x80)==0x00);
 294:	5f 9b       	sbis	0x0b, 7	; 11
 296:	fe cf       	rjmp	.-4      	; 0x294 <dispdata>
  return UDR;
 298:	8c b1       	in	r24, 0x0c	; 12
}
 29a:	08 95       	ret

0000029c <delayuart>:
 
void delayuart(unsigned int delaytime)
{
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
	...
unsigned int dc;
	 for(dc=0;dc<=delaytime;dc++)
 2b4:	2f 5f       	subi	r18, 0xFF	; 255
 2b6:	3f 4f       	sbci	r19, 0xFF	; 255
 2b8:	82 17       	cp	r24, r18
 2ba:	93 07       	cpc	r25, r19
 2bc:	88 f7       	brcc	.-30     	; 0x2a0 <delayuart+0x4>
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
	 }
}
 2be:	08 95       	ret

000002c0 <printstring>:
  while((UCSRA&0x40)==0x00);
  delayuart(1000);
}
 
void printstring(const unsigned char *ustring)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <printstring+0x16>
   while ( *ustring )
    {
	 UDR=*ustring++;
 2c8:	8c b9       	out	0x0c, r24	; 12
     while((UCSRA&0x40)==0x00);
 2ca:	5e 9b       	sbis	0x0b, 6	; 11
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <printstring+0xa>
 
void printstring(const unsigned char *ustring)
{
   while ( *ustring )
    {
	 UDR=*ustring++;
 2ce:	21 96       	adiw	r28, 0x01	; 1
     while((UCSRA&0x40)==0x00);
    delayuart(1000);
 2d0:	88 ee       	ldi	r24, 0xE8	; 232
 2d2:	93 e0       	ldi	r25, 0x03	; 3
 2d4:	e3 df       	rcall	.-58     	; 0x29c <delayuart>
  delayuart(1000);
}
 
void printstring(const unsigned char *ustring)
{
   while ( *ustring )
 2d6:	88 81       	ld	r24, Y
 2d8:	88 23       	and	r24, r24
 2da:	b1 f7       	brne	.-20     	; 0x2c8 <printstring+0x8>
    {
	 UDR=*ustring++;
     while((UCSRA&0x40)==0x00);
    delayuart(1000);
	
}	}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <printchar>:
	delayms(100);
}

void printchar(unsigned char uchar)
{
  UDR=uchar;
 2e2:	8c b9       	out	0x0c, r24	; 12
  while((UCSRA&0x40)==0x00);
 2e4:	5e 9b       	sbis	0x0b, 6	; 11
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <printchar+0x2>
  delayuart(1000);
 2e8:	88 ee       	ldi	r24, 0xE8	; 232
 2ea:	93 e0       	ldi	r25, 0x03	; 3
 2ec:	d7 df       	rcall	.-82     	; 0x29c <delayuart>
}
 2ee:	08 95       	ret

000002f0 <printnum>:
	
}	}

 
void printnum(unsigned char num)
{
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	18 2f       	mov	r17, r24
    unsigned char H=0,T=0,O=0;
	H=num/100;
 2fa:	64 e6       	ldi	r22, 0x64	; 100
 2fc:	5d d0       	rcall	.+186    	; 0x3b8 <__udivmodqi4>
 2fe:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 300:	28 2f       	mov	r18, r24
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	8c e9       	ldi	r24, 0x9C	; 156
 306:	9f ef       	ldi	r25, 0xFF	; 255
 308:	28 9f       	mul	r18, r24
 30a:	70 01       	movw	r14, r0
 30c:	29 9f       	mul	r18, r25
 30e:	f0 0c       	add	r15, r0
 310:	38 9f       	mul	r19, r24
 312:	f0 0c       	add	r15, r0
 314:	11 24       	eor	r1, r1
 316:	c7 01       	movw	r24, r14
 318:	81 0f       	add	r24, r17
 31a:	91 1d       	adc	r25, r1
 31c:	6a e0       	ldi	r22, 0x0A	; 10
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	57 d0       	rcall	.+174    	; 0x3d0 <__divmodhi4>
 322:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	printchar(H+48);
 324:	84 2f       	mov	r24, r20
 326:	80 5d       	subi	r24, 0xD0	; 208
 328:	dc df       	rcall	.-72     	; 0x2e2 <printchar>
	
	printchar(T+48);
 32a:	80 2f       	mov	r24, r16
 32c:	80 5d       	subi	r24, 0xD0	; 208
 32e:	d9 df       	rcall	.-78     	; 0x2e2 <printchar>
	
	printchar(O+48);
 330:	10 5d       	subi	r17, 0xD0	; 208
 332:	1e 0d       	add	r17, r14
 334:	86 ef       	ldi	r24, 0xF6	; 246
 336:	9f ef       	ldi	r25, 0xFF	; 255
 338:	08 9f       	mul	r16, r24
 33a:	00 2d       	mov	r16, r0
 33c:	11 24       	eor	r1, r1
 33e:	80 2f       	mov	r24, r16
 340:	81 0f       	add	r24, r17
 342:	cf df       	rcall	.-98     	; 0x2e2 <printchar>
	
}
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	08 95       	ret

0000034e <xaxis>:

unsigned char xcod,ycod;

void xaxis()                      	//for reading X cordinate
 {
  DDRA=0x0A;						
 34e:	8a e0       	ldi	r24, 0x0A	; 10
 350:	8a bb       	out	0x1a, r24	; 26
  PORTA=0x08;
 352:	88 e0       	ldi	r24, 0x08	; 8
 354:	8b bb       	out	0x1b, r24	; 27
  delayus(100);
 356:	84 e6       	ldi	r24, 0x64	; 100
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	79 df       	rcall	.-270    	; 0x24e <delayus>
  xcod=getdata(2);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	6c df       	rcall	.-296    	; 0x238 <getdata>
 360:	80 93 66 00 	sts	0x0066, r24
  delayus(100);
 364:	84 e6       	ldi	r24, 0x64	; 100
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	72 df       	rcall	.-284    	; 0x24e <delayus>
 }
 36a:	08 95       	ret

0000036c <yaxis>:
 
void yaxis() 						//for reading Y coordinate
 {
  DDRA=0x05;
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	8a bb       	out	0x1a, r24	; 26
  PORTA=0x01;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	8b bb       	out	0x1b, r24	; 27
  delayus(100);
 374:	84 e6       	ldi	r24, 0x64	; 100
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	6a df       	rcall	.-300    	; 0x24e <delayus>
  ycod=getdata(3);
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	5d df       	rcall	.-326    	; 0x238 <getdata>
 37e:	80 93 63 00 	sts	0x0063, r24
  delayus(100);
 382:	84 e6       	ldi	r24, 0x64	; 100
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	63 df       	rcall	.-314    	; 0x24e <delayus>
 }
 388:	08 95       	ret

0000038a <main>:
 
 
int main(void)
 {
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
#include<avr/interrupt.h>			//header file for using interrupt service routins
unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 38e:	86 e8       	ldi	r24, 0x86	; 134
 390:	86 b9       	out	0x06, r24	; 6
 
  
 adc_init();					//initialization of ADC
 uartinit();
 392:	74 df       	rcall	.-280    	; 0x27c <uartinit>
  while(1)
   {
   DDRA=0x05;					//setup for touch detect
 394:	05 e0       	ldi	r16, 0x05	; 5
   PORTA=0x08;
 396:	18 e0       	ldi	r17, 0x08	; 8
  
 adc_init();					//initialization of ADC
 uartinit();
  while(1)
   {
   DDRA=0x05;					//setup for touch detect
 398:	0a bb       	out	0x1a, r16	; 26
   PORTA=0x08;
 39a:	1b bb       	out	0x1b, r17	; 27
   delayus(100);
 39c:	84 e6       	ldi	r24, 0x64	; 100
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	56 df       	rcall	.-340    	; 0x24e <delayus>
   while((PINA & 0x02)==0x02);//touch detect test
 3a2:	c9 99       	sbic	0x19, 1	; 25
 3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <main+0x18>
   
   xaxis();
 3a6:	d3 df       	rcall	.-90     	; 0x34e <xaxis>
   yaxis();
 3a8:	e1 df       	rcall	.-62     	; 0x36c <yaxis>
   printnum(xcod);
 3aa:	80 91 66 00 	lds	r24, 0x0066
 3ae:	a0 df       	rcall	.-192    	; 0x2f0 <printnum>
   printnum(ycod);
 3b0:	80 91 63 00 	lds	r24, 0x0063
 3b4:	9d df       	rcall	.-198    	; 0x2f0 <printnum>
 3b6:	f0 cf       	rjmp	.-32     	; 0x398 <main+0xe>

000003b8 <__udivmodqi4>:
 3b8:	99 1b       	sub	r25, r25
 3ba:	79 e0       	ldi	r23, 0x09	; 9
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <__udivmodqi4_ep>

000003be <__udivmodqi4_loop>:
 3be:	99 1f       	adc	r25, r25
 3c0:	96 17       	cp	r25, r22
 3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__udivmodqi4_ep>
 3c4:	96 1b       	sub	r25, r22

000003c6 <__udivmodqi4_ep>:
 3c6:	88 1f       	adc	r24, r24
 3c8:	7a 95       	dec	r23
 3ca:	c9 f7       	brne	.-14     	; 0x3be <__udivmodqi4_loop>
 3cc:	80 95       	com	r24
 3ce:	08 95       	ret

000003d0 <__divmodhi4>:
 3d0:	97 fb       	bst	r25, 7
 3d2:	09 2e       	mov	r0, r25
 3d4:	07 26       	eor	r0, r23
 3d6:	0a d0       	rcall	.+20     	; 0x3ec <__divmodhi4_neg1>
 3d8:	77 fd       	sbrc	r23, 7
 3da:	04 d0       	rcall	.+8      	; 0x3e4 <__divmodhi4_neg2>
 3dc:	0c d0       	rcall	.+24     	; 0x3f6 <__udivmodhi4>
 3de:	06 d0       	rcall	.+12     	; 0x3ec <__divmodhi4_neg1>
 3e0:	00 20       	and	r0, r0
 3e2:	1a f4       	brpl	.+6      	; 0x3ea <__divmodhi4_exit>

000003e4 <__divmodhi4_neg2>:
 3e4:	70 95       	com	r23
 3e6:	61 95       	neg	r22
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255

000003ea <__divmodhi4_exit>:
 3ea:	08 95       	ret

000003ec <__divmodhi4_neg1>:
 3ec:	f6 f7       	brtc	.-4      	; 0x3ea <__divmodhi4_exit>
 3ee:	90 95       	com	r25
 3f0:	81 95       	neg	r24
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	08 95       	ret

000003f6 <__udivmodhi4>:
 3f6:	aa 1b       	sub	r26, r26
 3f8:	bb 1b       	sub	r27, r27
 3fa:	51 e1       	ldi	r21, 0x11	; 17
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <__udivmodhi4_ep>

000003fe <__udivmodhi4_loop>:
 3fe:	aa 1f       	adc	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	a6 17       	cp	r26, r22
 404:	b7 07       	cpc	r27, r23
 406:	10 f0       	brcs	.+4      	; 0x40c <__udivmodhi4_ep>
 408:	a6 1b       	sub	r26, r22
 40a:	b7 0b       	sbc	r27, r23

0000040c <__udivmodhi4_ep>:
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	5a 95       	dec	r21
 412:	a9 f7       	brne	.-22     	; 0x3fe <__udivmodhi4_loop>
 414:	80 95       	com	r24
 416:	90 95       	com	r25
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	08 95       	ret

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>

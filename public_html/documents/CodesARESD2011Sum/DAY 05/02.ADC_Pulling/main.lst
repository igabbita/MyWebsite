   1               		.file	"main.c"
   2               		.arch atmega8535
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  69               	.global	dely_ns
  71               	dely_ns:
  73               	.Ltext1:
   1:lcd.h         **** /*	LCD.h
   2:lcd.h         **** Technophilia embedded systems
   3:lcd.h         **** 
   4:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
   5:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
   6:lcd.h         **** 	calling any other functions to initialize the lcd.
   7:lcd.h         **** 
   8:lcd.h         **** 
   9:lcd.h         **** 	lcd_init() ----- Call the lcd_init() function before calling any other functions
  10:lcd.h         **** 			  to initialize the lcd.
  11:lcd.h         **** 	lcd_cmd() ------ This function is used to give any command instructions to the
  12:lcd.h         **** 			  LCD. For e.g lcd_cmd(0x01) will give the clear command.
  13:lcd.h         **** 	lcd_char() ----- This function will display a single character on the LCD display.
  14:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
  15:lcd.h         **** 			  will display b.
  16:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
  17:lcd.h         **** 			  like lcd_string("This is AVR")
  18:lcd.h         **** 	lcd_showvalue()- This will show a 3-digit decimal value on the LCD. For example if
  19:lcd.h         **** 			  we give lcd_showvalue(0xFF) then 255 will be displayed.
  20:lcd.h         **** 	lcd_gotoxy()--- Will set the cursor at a particular position on of the LCD.
  21:lcd.h         **** 			  So lcd_gotoxy(1,4) will set the cursor at the 2d row 3rd column
  22:lcd.h         **** 			  row and column address are starts from(0,0)
  23:lcd.h         **** 	lcd_clear()---To clear the LCD
  24:lcd.h         **** 	
  25:lcd.h         **** */
  26:lcd.h         **** 
  27:lcd.h         **** #ifndef _LCD_H_
  28:lcd.h         **** #define _LCD_H_
  29:lcd.h         **** 
  30:lcd.h         **** 
  31:lcd.h         **** unsigned char k=0,j=0;
  32:lcd.h         **** unsigned char save=0;
  33:lcd.h         **** 
  34:lcd.h         **** void lcd_init(void);
  35:lcd.h         **** void lcd_cmd(unsigned char cmd);
  36:lcd.h         **** void latch(void);
  37:lcd.h         **** void dely_ns(unsigned char tim);
  38:lcd.h         **** void lcd_char(unsigned char single);
  39:lcd.h         **** void lcd_string(unsigned char str[32]);
  40:lcd.h         **** void lcd_showvalue(unsigned char num);
  41:lcd.h         **** void lcd_gotoxy(unsigned char row,unsigned char column);
  42:lcd.h         **** void delay_ms(unsigned int ms);
  43:lcd.h         **** void lcd_clear();
  44:lcd.h         **** 
  45:lcd.h         **** void lcd_init(void)	//init the lcd
  46:lcd.h         **** {	
  47:lcd.h         **** 	delay_ms(20);
  48:lcd.h         **** 	save=PORTC;
  49:lcd.h         **** 	DDRC=0xFF;
  50:lcd.h         **** 	delay_ms(15);
  51:lcd.h         **** 	PORTC=0x20;			//interface setup		
  52:lcd.h         **** 	lcd_cmd(0x01);
  53:lcd.h         **** 	lcd_cmd(0x02);
  54:lcd.h         **** 	lcd_cmd(0X80);
  55:lcd.h         **** 	delay_ms(20);
  56:lcd.h         **** }
  57:lcd.h         **** 
  58:lcd.h         **** void latch(void)
  59:lcd.h         **** {
  60:lcd.h         **** PORTC&=~0x04;
  61:lcd.h         **** dely_ns(200);  
  62:lcd.h         **** PORTC|=0x04;
  63:lcd.h         **** dely_ns(200);  
  64:lcd.h         **** PORTC&=~0x04;
  65:lcd.h         **** }
  66:lcd.h         **** 
  67:lcd.h         **** void dely_ns(unsigned char tim)
  68:lcd.h         **** {
  74               	ue end (size=0) */
  76               	.LM1:
  77               		sts j,__zero_reg__
  69:lcd.h         **** 0);  
  78               	 r18,k
  79               		ldi r25,lo8(0)
  80 0000 1092 0000 		rjmp .L2
  81 0004 2091 0000 	.L3:
  83 000a 00C0      	.LM2:
  84               		subi r25,lo8(-(1))
  85               		ldi r18,lo8(11)
  86               	.L2:
  87 000c 9F5F      		cp r25,r24
  88 000e 2BE0      		brlo .L3
  89               		sts k,r18
  90 0010 9817      		sts j,r25
  91 0012 00F0      	/* epilogue: frame size=0 */
  92 0014 2093 0000 		ret
  93 0018 9093 0000 	/* epilogue end (size=1) */
  94               	/* function dely_ns size 15 (14) */
  96               	.Lscope0:
  98               	.global	latch
 100               	latch:
 102               	.LM3:
 103               	/* prologue: frame size=0 */
 104               	/* prologue end (size=0) */
 106               	.LM4:
 107               		cbi 53-0x20,2
 109               	.LM5:
 110 001e AA98      		ldi r24,lo8(-56)
 111               		rcall dely_ns
 113 0020 88EC      	.LM6:
 114 0022 00D0      		sbi 53-0x20,2
 116               	.LM7:
 117 0024 AA9A      		ldi r24,lo8(-56)
 118               		rcall dely_ns
 120 0026 88EC      	.LM8:
 121 0028 00D0      		cbi 53-0x20,2
 122               	/* epilogue: frame size=0 */
 123               		ret
 124 002a AA98      	/* epilogue end (size=1) */
 125               	/* function latch size 8 (7) */
 127               	.Lscope1:
 130               	.global	lcd_cmd
 132               	lcd_cmd:
 134               	.LM9:
 135               	/* prologue: frame size=0 */
  70:lcd.h         **** md(0x02);
  71:lcd.h         **** 	lcd_cmd(0X80);
  72:lcd.h         **** 	delay_ms(20);
  73:lcd.h         **** }
  74:lcd.h         **** 
  75:lcd.h         **** void latch(void)
  76:lcd.h         **** {
  77:lcd.h         **** PORTC&=~0x04;
 136               	24
 138               	.LM10:
 139 002e 0F93      		in r24,53-0x20
 140 0030 1F93      		andi r24,lo8(-8)
 141               		out 53-0x20,r24
  78:lcd.h         **** cmd(0x01);
 143               		mov r24,r16
 144               		andi r24,lo8(-16)
 145 0034 85B3      		out 53-0x20,r24
 147 0038 85BB      	.LM12:
  79:lcd.h         **** ay_ms(20);
 148               	l latch
 150 003a 802F      	.LM13:
 151 003c 807F      		clr r17
 152 003e 85BB      		andi r16,lo8(15)
  80:lcd.h         **** );
 153               	 r17,hi8(15)
 154               		ldi r24,4
 155 0040 00D0      	1:	lsl r16
  81:lcd.h         **** d char str[32]);
 156               	l r17
 157               		dec r24
 158 0042 1127      		brne 1b
 159 0044 0F70      		out 53-0x20,r16
 161 0048 84E0      	.LM14:
 162 004a 000F      		rcall latch
 163 004c 111F      	/* epilogue: frame size=0 */
 164 004e 8A95      		pop r17
 165 0050 01F4      		pop r16
 166 0052 05BB      		ret
  82:lcd.h         **** id);
 167               	 end (size=3) */
 168               	/* function lcd_cmd size 23 (18) */
 170               	.Lscope2:
 173 005a 0895      	.global	lcd_char
 175               	lcd_char:
 177               	.LM15:
 178               	/* prologue: frame size=0 */
 179               		push r17
 180               	/* prologue end (size=1) */
 181               		mov r17,r24
  83:lcd.h         **** unsigned char k=0,j=0;
  84:lcd.h         **** unsigned char save=0;
  85:lcd.h         **** 
  86:lcd.h         **** void lcd_init(void);
  87:lcd.h         **** void lcd_cmd(unsigned char cmd);
 183               	lo8(1)
 184               		out 53-0x20,r24
 186 005c 1F93      	.LM17:
 187               		out 53-0x20,__zero_reg__
  88:lcd.h         **** 
 189               	
 190               		mov r24,r17
 191 0060 81E0      		andi r24,lo8(-16)
 192 0062 85BB      		ori r24,lo8(1)
  89:lcd.h         ****  the 2d row 3rd column
 193               	t 53-0x20,r24
 195 0064 15BA      	.LM19:
  90:lcd.h         **** -- Will set the cursor at a particular position on of the LCD.
 196               	all latch
 198 0066 812F      	.LM20:
 199 0068 807F      		swap r17
 200 006a 8160      		andi r17,0xf0
 201 006c 85BB      		ori r17,lo8(1)
  91:lcd.h         **** we give lcd_showvalue(0xFF) then 255 will be displayed.
 202               	3-0x20,r17
 204 006e 00D0      	.LM21:
  92:lcd.h         **** lue()- This will show a 3-digit decimal value on the LCD. For example if
 205               	all latch
 206               	/* epilogue: frame size=0 */
 207 0070 1295      		pop r17
 208 0072 107F      		ret
 209 0074 1160      	/* epilogue end (size=2) */
 210 0076 15BB      	/* function lcd_char size 17 (14) */
  93:lcd.h         ****  this would be
 211               		lcd_char, .-lcd_char
 212               	.Lscope3:
 215 007a 1F91      	.global	lcd_string
 217               	lcd_string:
 219               	.LM22:
 220               	/* prologue: frame size=0 */
 221               		push r14
 222               		push r15
 223               		push r16
 224               		push r17
 225               		push r28
  94:lcd.h         **** l display A. Again lcd_char('b')
  95:lcd.h         **** 			  will display b.
  96:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
  97:lcd.h         **** 			  like lcd_string("This is AVR")
 226               	ologue end (size=6) */
 227               		movw r14,r24
 229 007e EF92      	.LM23:
 230 0080 FF92      		ldi r24,lo8(1)
 231 0082 0F93      		out 53-0x20,r24
 233 0086 CF93      	.LM24:
 234 0088 DF93      		out 53-0x20,__zero_reg__
 235               		ldi r16,lo8(0)
 236 008a 7C01      		ldi r17,hi8(0)
  98:lcd.h         ****  will display b.
  99:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
 237               	.L14:
 239 008c 81E0      	.LM25:
 240 008e 85BB      		cpi r25,lo8(16)
 100:lcd.h         **** l display A. Again lcd_char('b')
 241               	e .L15
 243 0090 15BA      	.LM26:
 244 0092 00E0      		ldi r24,lo8(-64)
 245 0094 10E0      		rcall lcd_cmd
 246 0096 00C0      	.L15:
 101:lcd.h         **** ---- This function will display a single character on the LCD display.
 102:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
 103:lcd.h         **** 			  will display b.
 248               		ld r24,Y
 249               		andi r24,lo8(-16)
 250 0098 9031      		ori r24,lo8(1)
 251 009a 01F4      		out 53-0x20,r24
 104:lcd.h         **** l display a single character on the LCD display.
 252               	abn	68,0,106,.LM28-lcd_string
 253               	.LM28:
 254 009c 80EC      		rcall latch
 256               	.LM29:
 105:lcd.h         **** LCD. For e.g lcd_cmd(0x01) will give the clear command.
 257               	24,Y
 258               		swap r24
 259 00a0 8881      		andi r24,0xf0
 260 00a2 807F      		ori r24,lo8(1)
 261 00a4 8160      		out 53-0x20,r24
 106:lcd.h         **** 	lcd_cmd() ------ This function is used to give any command instructions to the
 263               	
 264               		rcall latch
 265 00a8 00D0      		subi r16,lo8(-(1))
 107:lcd.h         **** efore calling any other functions
 266               	bci r17,hi8(-(1))
 267               	.L13:
 268 00aa 8881      		mov r25,r16
 270 00ae 807F      	.LM31:
 271 00b0 8160      		movw r28,r14
 272 00b2 85BB      		add r28,r16
 108:lcd.h         ****  before
 273               	9,__zero_reg__
 274               		ld r24,Y
 275 00b4 00D0      		tst r24
 276 00b6 0F5F      		brne .L14
 277 00b8 1F4F      	/* epilogue: frame size=0 */
 278               		pop r29
 279 00ba 902F      		pop r28
 280               		pop r17
 281               		pop r16
 282 00bc E701      		pop r15
 283 00be C00F      		pop r14
 284 00c0 D11D      		ret
 285 00c2 8881      	/* epilogue end (size=7) */
 286 00c4 8823      	/* function lcd_string size 44 (31) */
 291 00cc 1F91      	.Lscope4:
 294 00d2 EF90      	.global	lcd_showvalue
 296               	lcd_showvalue:
 298               	.LM32:
 299               	/* prologue: frame size=0 */
 300               		push r13
 301               		push r14
 302               		push r15
 303               		push r16
 304               		push r17
 305               	/* prologue end (size=5) */
 306               		mov r13,r24
 109:lcd.h         **** header files have implementation of some common finctions of the LCD.
 110:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 111:lcd.h         **** 	calling any other functions to initialize the lcd.
 112:lcd.h         **** 
 113:lcd.h         **** 
 114:lcd.h         **** 	lcd_init() ----- Call the lcd_init() function before calling any other functions
 115:lcd.h         **** 			  to initialize the lcd.
 308               	divmodqi4
 309               		mov r18,r24
 311 00d6 DF92      	.LM34:
 312 00d8 EF92      		ldi r25,lo8(100)
 313 00da FF92      		mov r14,r25
 314 00dc 0F93      		mul r24,r14
 315 00de 1F93      		movw r14,r0
 316               		clr r1
 317 00e0 D82E      		mov r24,r13
 116:lcd.h         **** nctions to initialize the lcd.
 117:lcd.h         **** 
 318               	sub r24,r14
 319               		sbc r25,r15
 320 00e2 64E6      		ldi r22,lo8(10)
 321 00e4 00D0      		ldi r23,hi8(10)
 322 00e6 282F      		rcall __divmodhi4
 118:lcd.h         **** ns of the LCD.
 323               	 r16,r22
 325 00e8 94E6      	.LM35:
 326 00ea E92E      		mov r24,r18
 327 00ec 8E9D      		subi r24,lo8(-(48))
 328 00ee 7001      		rcall lcd_char
 330 00f2 8D2D      	.LM36:
 331 00f4 9927      		mov r24,r16
 332 00f6 8E19      		subi r24,lo8(-(48))
 333 00f8 9F09      		rcall lcd_char
 335 00fc 70E0      	.LM37:
 336 00fe 00D0      		sub r13,r14
 337 0100 8B01      		ldi r24,lo8(10)
 119:lcd.h         **** /*	LCD.h
 120:lcd.h         **** Technophilia embedded systems
 121:lcd.h         **** 
 338               	ovw r24,r0
 339               		clr r1
 340 0102 822F      		sub r13,r24
 341 0104 805D      		mov r24,r13
 342 0106 00D0      		subi r24,lo8(-(48))
 122:lcd.h         **** /*	LCD.h
 343               	l lcd_char
 344               	/* epilogue: frame size=0 */
 345 0108 802F      		pop r17
 346 010a 805D      		pop r16
 347 010c 00D0      		pop r15
 123:lcd.h         **** /*	LCD.h
 348               	r14
 349               		pop r13
 350 010e DE18      		ret
 351 0110 8AE0      	/* epilogue end (size=6) */
 352 0112 089F      	/* function lcd_showvalue size 43 (32) */
 357 011c 805D      	.Lscope5:
 361 0122 0F91      	.global	lcd_gotoxy
 363 0126 EF90      	lcd_gotoxy:
 365 012a 0895      	.LM38:
 366               	/* prologue: frame size=0 */
 367               	/* prologue end (size=0) */
 369               	.LM39:
 370               		tst r24
 371               		brne .L22
 373               	.LM40:
 374               		mov r24,r22
 375               		subi r24,lo8(-(-128))
 376               		rcall lcd_cmd
 377               		ret
 378               	.L22:
 124:lcd.h         **** /*	LCD.h
 125:lcd.h         **** Technophilia embedded systems
 126:lcd.h         **** 
 127:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
 379               	xy
 380               	.LM41:
 381               		cpi r24,lo8(1)
 382               		brne .L26
 128:lcd.h         **** /*	LCD.h
 383               	oxy
 384               	.LM39:
 385 012c 8823      		tst r24
 386 012e 01F4      		brne .L22
 129:lcd.h         **** /*	LCD.h
 130:lcd.h         **** Technophilia embedded systems
 387               	l	lcd_gotoxy
 389 0130 862F      	lcd_gotoxy:
 391 0134 00D0      	.LM38:
 392 0136 0895      	/* prologue: frame size=0 */
 393               	/* prologue end (size=0) */
 131:lcd.h         **** /*	LCD.h
 132:lcd.h         **** Technophilia embedded systems
 394               		68,0,128,.LM39-lcd_gotoxy
 395               	.LM39:
 396 0138 8130      		tst r24
 397 013a 01F4      		brne .L22
 133:lcd.h         **** /*	LCD.h
 134:lcd.h         **** Technophilia embedded systems
 398               	l	lcd_gotoxy
 400 013c 862F      	lcd_gotoxy:
 402 0140 00D0      	.LM38:
 403               	/* prologue: frame size=0 */
 404 0142 0895      	/* prologue end (size=0) */
 406               	.LM39:
 407               		tst r24
 408               		brne .L22
 410               	.LM40:
 411               		mov r24,r22
 412               		subi r24,lo8(-(-128))
 413               		rcall lcd_cmd
 414               		ret
 415               	.L22:
 135:lcd.h         **** /*	LCD.h
 136:lcd.h         **** Technophilia embedded systems
 137:lcd.h         **** 
 138:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
 139:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 140:lcd.h         **** 	calling any other functions to initialize the lcd.
 416               	LM41-lcd_gotoxy
 417               	.LM41:
 418               		cpi r24,lo8(1)
 419               		brne .L26
 421               	.LM42:
 141:lcd.h         **** ions of the LCD.
 142:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 143:lcd.h         **** 	calling any other functions to initialize the lcd.
 422               	,130,.LM40-lcd_gotoxy
 423               	.LM40:
 424 0146 20E0      		mov r24,r22
 425 0148 30E0      		subi r24,lo8(-(-128))
 426               		rcall lcd_cmd
 144:lcd.h         **** ions of the LCD.
 145:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 146:lcd.h         **** 	calling any other functions to initialize the lcd.
 147:lcd.h         **** 
 427               	 prologue: frame size=0 */
 428               	/* prologue end (size=0) */
 430 014a 0000      	.LM39:
 431               		tst r24
 432               		brne .L22
 434 014c 2F5F      	.LM40:
 435 014e 3F4F      		mov r24,r22
 436 0150 4CE0      		subi r24,lo8(-(-128))
 437 0152 2C3C      		rcall lcd_cmd
 438 0154 3407      		ret
 439 0156 01F4      	.L22:
 441               	.LM41:
 442               		cpi r24,lo8(1)
 443 0158 0197      		brne .L26
 445 015c 8F3F      	.LM42:
 446 015e 9207      		mov r24,r22
 447 0160 01F4      		subi r24,lo8(-(-64))
 448               		rcall lcd_cmd
 449 0162 0895      	.L26:
 450               		ret
 451               	/* epilogue: frame size=0 */
 452               	/* epilogue: noreturn */
 453               	/* epilogue end (size=0) */
 454               	/* function lcd_gotoxy size 12 (12) */
 456               	.Lscope6:
 459               	.global	delay_ms
 461               	delay_ms:
 463               	.LM43:
 464               	/* prologue: frame size=0 */
 465               	/* prologue end (size=0) */
 466               		rjmp .L28
 467 0164 84E1      	.L29:
 469 0168 00D0      	.LM44:
 470               		ldi r18,lo8(0)
 471               		ldi r19,hi8(0)
 472 016a 85B3      	.L30:
 474               	.LM45:
 475               	/* #APP */
 476 0170 8FEF      		nop
 478               	.LM46:
 479               	/* #NOAPP */
 480 0174 8FE0      		subi r18,lo8(-(1))
 481 0176 90E0      		sbci r19,hi8(-(1))
 482 0178 00D0      		ldi r20,hi8(3276)
 483               		cpi r18,lo8(3276)
 484               		cpc r19,r20
 485 017a 80E2      		brne .L30
 486 017c 85BB      	.L28:
 488               	.LM47:
 489 017e 81E0      		sbiw r24,1
 490 0180 00D0      		ldi r18,hi8(-1)
 491               		cpi r24,lo8(-1)
 492               		cpc r25,r18
 493 0182 82E0      		brne .L29
 494 0184 00D0      	/* epilogue: frame size=0 */
 495               		ret
 496               	/* epilogue end (size=1) */
 497 0186 80E8      	/* function delay_ms size 17 (16) */
 502 018c 90E0      	.Lscope7:
 504               	.global	lcd_init
 506               	lcd_init:
 508               	.LM48:
 509               	/* prologue: frame size=0 */
 510               	/* prologue end (size=0) */
 512               	.LM49:
 513               		ldi r24,lo8(20)
 148:lcd.h         **** ns of the LCD.
 149:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 150:lcd.h         **** 	calling any other functions to initialize the lcd.
 151:lcd.h         **** 
 152:lcd.h         **** 
 514               		sts save,r24
 516               	.LM51:
 517               		ldi r24,lo8(-1)
 153:lcd.h         ****  of the LCD.
 519               	.LM50:
 520 0192 81E0      		in r24,53-0x20
 521 0194 00D0      		sts save,r24
 523 0196 0895      	.LM51:
 524               		ldi r24,lo8(-1)
 525               		out 52-0x20,r24
 527               	.LM52:
 528               		ldi r24,lo8(15)
 529               		ldi r25,hi8(15)
 530               		rcall delay_ms
 532               	.LM53:
 533               		ldi r24,lo8(32)
   1:main.c        **** /***********************************************************************
   2:main.c        **** 
   3:main.c        **** CODE5.2: Program for ADC using Pulling method
   4:main.c        **** 
   5:main.c        **** ***********************************************************************
   6:main.c        **** COPYRIGHT(C)Technophilia Systems
   7:main.c        **** Date:...............1st May 2011
   8:main.c        **** Author:.............Prasanta Kumar Nayak
   9:main.c        **** Organization:.......Technophilia Syestems
  10:main.c        **** Target system:......AVR devlopment board s/n-107010
  11:main.c        **** Manufacturer:.......Technophilia Syestems
  12:main.c        **** Microcontroller:....ATmega-8535
  13:main.c        **** Clock:..............16mhz
  14:main.c        **** 
  15:main.c        **** ***********************************************************************/
  16:main.c        **** #include<avr/io.h>
  17:main.c        **** #include"lcd.h"
  18:main.c        **** 
  19:main.c        **** int main(void)
  20:main.c        **** {
 534               	t
 535               	.LM52:
 536               		ldi r24,lo8(15)
 537               		ldi r25,hi8(15)
  21:main.c        ****  ADMUX=0x20;
 538               	init
 539               	.LM51:
 540 0198 80E2      		ldi r24,lo8(-1)
 541 019a 87B9      		out 52-0x20,r24
  22:main.c        ****  ADCSRA=0x87;
 542               	M50-lcd_init
 543               	.LM50:
 544 019c 87E8      		in r24,53-0x20
 545 019e 86B9      		sts save,r24
  23:main.c        ****  lcd_init();
 546               	
 547               	.LM49:
 548 01a0 00D0      		ldi r24,lo8(20)
 549               		ldi r25,hi8(20)
  24:main.c        ****  while(1)
  25:main.c        ****   {
  26:main.c        ****    ADCSRA|=0x40;
 550               	:
 551               	/* prologue: frame size=0 */
 552 01a2 369A      	/* prologue end (size=0) */
  27:main.c        ****    while((ADCSRA&0x40)==0x40);
 554               	d_init:
 556 01a4 3699      	.LM48:
 557 01a6 00C0      	/* prologue: frame size=0 */
  28:main.c        ****    lcd_gotoxy(0,0);
 558               	6,0,0,lcd_init
 559               	.global	lcd_init
 561 01aa 80E0      	lcd_init:
  29:main.c        ****    lcd_showvalue(ADCH);
 563               	.Lscope7:
 565 01ae 85B1      	.global	lcd_init
 567 01b2 00C0      	lcd_init:
 569               	.LM48:
 570               	/* prologue: frame size=0 */
 571               	/* prologue end (size=0) */
 573               	.LM49:
 574               		ldi r24,lo8(20)
 575               		ldi r25,hi8(20)
 576               		rcall delay_ms
 578               	.LM50:
 579               		in r24,53-0x20
 580 0000 00        		sts save,r24
 582               	.LM51:
 583               		ldi r24,lo8(-1)
 584               		out 52-0x20,r24
 586 0001 00        	.LM52:
 587               		ldi r24,lo8(15)
 588               		ldi r25,hi8(15)
 589               		rcall delay_ms
 591               	.LM53:
 592 0002 00        		ldi r24,lo8(32)
 593               		out 53-0x20,r24
 595               	.LM54:
 596               		ldi r24,lo8(1)
 597               		rcall lcd_cmd
 599               	.LM55:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:3      *ABS*:0000003f __SREG__
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:4      *ABS*:0000003e __SP_H__
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:5      *ABS*:0000003d __SP_L__
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:7      *ABS*:00000001 __zero_reg__
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:71     .text:00000000 dely_ns
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:585    .bss:00000001 j
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:579    .bss:00000000 k
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:103    .text:0000001e latch
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:135    .text:0000002e lcd_cmd
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:182    .text:0000005c lcd_char
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:225    .text:0000007e lcd_string
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:307    .text:000000d6 lcd_showvalue
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:378    .text:0000012c lcd_gotoxy
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:415    .text:00000144 delay_ms
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:460    .text:00000164 lcd_init
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:591    .bss:00000002 save
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:513    .text:00000192 lcd_clear
C:\Users\User\AppData\Local\Temp/ccf0FPXY.s:531    .text:00000198 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__udivmodqi4
__divmodhi4

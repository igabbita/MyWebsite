
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000690  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000655  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ec e9       	ldi	r30, 0x9C	; 156
  3e:	f0 e0       	ldi	r31, 0x00	; 0
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	a0 36       	cpi	r26, 0x60	; 96
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a0 36       	cpi	r26, 0x60	; 96
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	02 d0       	rcall	.+4      	; 0x62 <main>
  5e:	1d c0       	rjmp	.+58     	; 0x9a <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__heap_end>

00000062 <main>:
#include<avr/io.h>

int main(void)
{
  DDRA=0X00;					// Initialization of PORTA as input
  62:	1a ba       	out	0x1a, r1	; 26
  PORTA=0XFF;
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	8b bb       	out	0x1b, r24	; 27
  
  DDRD=0XF0;					// Initailization of PORTD as output
  68:	80 ef       	ldi	r24, 0xF0	; 240
  6a:	81 bb       	out	0x11, r24	; 17
  PORTD=0X00;
  6c:	12 ba       	out	0x12, r1	; 18
  6e:	40 e4       	ldi	r20, 0x40	; 64
  70:	30 e1       	ldi	r19, 0x10	; 16
  72:	20 e5       	ldi	r18, 0x50	; 80
  
  while(1)
  {
	switch(PINA&0x03)			// Checking the status of PA0 and PA1 
  74:	89 b3       	in	r24, 0x19	; 25
  76:	99 27       	eor	r25, r25
  78:	83 70       	andi	r24, 0x03	; 3
  7a:	90 70       	andi	r25, 0x00	; 0
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	91 05       	cpc	r25, r1
  80:	31 f0       	breq	.+12     	; 0x8e <main+0x2c>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	91 05       	cpc	r25, r1
  86:	29 f0       	breq	.+10     	; 0x92 <main+0x30>
  88:	89 2b       	or	r24, r25
  8a:	29 f0       	breq	.+10     	; 0x96 <main+0x34>
  8c:	f3 cf       	rjmp	.-26     	; 0x74 <main+0x12>
	{
	 case 0x01:					// Right Sensor sensing the Black line
	 PORTD=0X40;				// Turn right
  8e:	42 bb       	out	0x12, r20	; 18
  90:	f1 cf       	rjmp	.-30     	; 0x74 <main+0x12>
	 break;
	 
	 case 0x02:					// Left Sensor sensing the Black line
	 PORTD=0X10;				// Turn left
  92:	32 bb       	out	0x12, r19	; 18
  94:	ef cf       	rjmp	.-34     	; 0x74 <main+0x12>
	 break;
	 
	 case 0x00:					// Both sensors are sensing white surface
	 PORTD=0X50;				// Move forward
  96:	22 bb       	out	0x12, r18	; 18
  98:	ed cf       	rjmp	.-38     	; 0x74 <main+0x12>

0000009a <_exit>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <_exit>

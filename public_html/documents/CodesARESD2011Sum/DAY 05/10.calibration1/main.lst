   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  69               	.global	adc_init
  71               	adc_init:
  73               	.Ltext1:
   1:adc.h         **** 
   2:adc.h         **** /***********************************************************************
   3:adc.h         **** 
   4:adc.h         **** Headerfile for make ADC convertion
   5:adc.h         **** 
   6:adc.h         **** ***********************************************************************
   7:adc.h         **** 
   8:adc.h         **** *COPYRIGHT(c) Technophilia.
   9:adc.h         **** 
  10:adc.h         **** //*Author:Technophilia
  11:adc.h         **** 
  12:adc.h         **** //*compiler:winavr
  13:adc.h         **** 
  14:adc.h         **** //************************************************************//**//*********//*	adc.h
  15:adc.h         **** //Technophilia embedded systems
  16:adc.h         **** 
  17:adc.h         **** */
  18:adc.h         **** 
  19:adc.h         **** #ifndef _ADC_H_
  20:adc.h         **** #define _ADC_H_						//This is the header for AVR Microcontroller.
  21:adc.h         **** #include<avr/io.h>
  22:adc.h         **** #include<technophilia/delay.h>		//header file for genarating time delay
  23:adc.h         **** #include<technophilia/lcd.h>		//headerfile for interfacing LCD
  24:adc.h         **** #include<avr/interrupt.h>			//header file for using interrupt service routins
  25:adc.h         **** unsigned int adcdata,adcdata1;
  26:adc.h         **** 
  27:adc.h         ****  void adc_init()
  28:adc.h         ****  {
  74               	me size = 0 */
  76               	.LM1:
  77               		ldi r24,lo8(-122)
  78               		out 38-32,r24
  29:adc.h         ****   ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  79               	ilogue start */
  81 0000 86E8      	.LM2:
  82 0002 86B9      		ret
  30:adc.h         ****   		
  31:adc.h         ****  }
  84               	pe1:
  87               	.global	dely_ns
  89               	dely_ns:
  91               	.Ltext2:
  93               	.LM3:
  94               	.LFBB2:
  95               	/* prologue: function */
   1:lcd.h         **** /*	LCD.h
   2:lcd.h         **** Technophilia embedded systems
   3:lcd.h         **** 
   4:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
   5:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
   6:lcd.h         **** 	calling any other functions to initialize the lcd.
   7:lcd.h         **** 
   8:lcd.h         **** 
   9:lcd.h         **** 	lcd_init() ----- Call the lcd_init() function before calling any other functions
  10:lcd.h         **** 			  to initialize the lcd.
  11:lcd.h         **** 	lcd_cmd() ------ This function is used to give any command instructions to the
  12:lcd.h         **** 			  LCD. For e.g lcd_cmd(0x01) will give the clear command.
  13:lcd.h         **** 	lcd_char() ----- This function will display a single character on the LCD display.
  14:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
  15:lcd.h         **** 			  will display b.
  16:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
  17:lcd.h         **** 			  like lcd_string("This is AVR")
  18:lcd.h         **** 	lcd_showvalue()- This will show a 3-digit decimal value on the LCD. For example if
  19:lcd.h         **** 			  we give lcd_showvalue(0xFF) then 255 will be displayed.
  20:lcd.h         **** 	lcd_gotoxy()--- Will set the cursor at a particular position on of the LCD.
  21:lcd.h         **** 			  So lcd_gotoxy(1,4) will set the cursor at the 2d row 3rd column
  22:lcd.h         **** 			  row and column address are starts from(0,0)
  23:lcd.h         **** 	lcd_clear()---To clear the LCD
  24:lcd.h         **** 	
  25:lcd.h         **** */
  26:lcd.h         **** 
  27:lcd.h         **** #ifndef _LCD_H_
  28:lcd.h         **** #define _LCD_H_
  29:lcd.h         **** 
  30:lcd.h         **** 
  31:lcd.h         **** unsigned char k=0,j=0;
  32:lcd.h         **** unsigned char save=0;
  33:lcd.h         **** 
  34:lcd.h         **** void lcd_init(void);
  35:lcd.h         **** void lcd_cmd(unsigned char cmd);
  36:lcd.h         **** void latch(void);
  37:lcd.h         **** void dely_ns(unsigned char tim);
  38:lcd.h         **** void lcd_char(unsigned char single);
  39:lcd.h         **** void lcd_string(unsigned char str[32]);
  40:lcd.h         **** void lcd_showvalue(unsigned char num);
  41:lcd.h         **** void lcd_gotoxy(unsigned char row,unsigned char column);
  42:lcd.h         **** void delay_ms(unsigned int ms);
  43:lcd.h         **** void lcd_clear();
  44:lcd.h         **** 
  45:lcd.h         **** void lcd_init(void)	//init the lcd
  46:lcd.h         **** {	
  47:lcd.h         **** 	delay_ms(20);
  48:lcd.h         **** 	save=PORTC;
  49:lcd.h         **** 	DDRC=0xFF;
  50:lcd.h         **** 	delay_ms(15);
  51:lcd.h         **** 	PORTC=0x20;			//interface setup		
  52:lcd.h         **** 	lcd_cmd(0x01);
  53:lcd.h         **** 	lcd_cmd(0x02);
  54:lcd.h         **** 	lcd_cmd(0X80);
  55:lcd.h         **** 	delay_ms(20);
  56:lcd.h         **** }
  57:lcd.h         **** 
  58:lcd.h         **** void latch(void)
  59:lcd.h         **** {
  60:lcd.h         **** PORTC&=~0x04;
  61:lcd.h         **** dely_ns(200);  
  62:lcd.h         **** PORTC|=0x04;
  63:lcd.h         **** dely_ns(200);  
  64:lcd.h         **** PORTC&=~0x04;
  65:lcd.h         **** }
  66:lcd.h         **** 
  67:lcd.h         **** void dely_ns(unsigned char tim)
  68:lcd.h         **** {
  96               	e = 0 */
  98               	.LM4:
  99               		lds r18,k
 100               		ldi r25,lo8(0)
 101               		rjmp .L4
 102               	.L5:
 104 000a 90E0      	.LM5:
 105 000c 00C0      		subi r25,lo8(-(1))
 106               		ldi r18,lo8(11)
  69:lcd.h         **** 0);  
 107               	5,r24
 108               		brlo .L5
 109 000e 9F5F      		sts k,r18
 110 0010 2BE0      		sts j,r25
 111               	/* epilogue start */
 113 0014 00F0      	.LM6:
 114 0016 2093 0000 		ret
 116               	.Lscope2:
  70:lcd.h         **** md(0x02);
  71:lcd.h         **** 	lcd_cmd(0X80);
  72:lcd.h         **** 	delay_ms(20);
  73:lcd.h         **** }
  74:lcd.h         **** 
 117               	atch:F(0,15)",36,0,0,latch
 118               	.global	latch
 120               	latch:
 122               	.LM7:
 123               	.LFBB3:
 124               	/* prologue: function */
 125               	/* frame size = 0 */
 127               	.LM8:
 128               		cbi 53-32,2
 130               	.LM9:
 131               		ldi r24,lo8(-56)
 132               		rcall dely_ns
 134               	.LM10:
 135               		sbi 53-32,2
 137 0024 00D0      	.LM11:
 138               		ldi r24,lo8(-56)
 139               		rcall dely_ns
 141               	.LM12:
 142               		cbi 53-32,2
 143 0028 88EC      	/* epilogue start */
 145               	.LM13:
 146               		ret
 148               	.Lscope3:
 151 002e 0895      	.global	lcd_cmd
 153               	lcd_cmd:
 155               	.LM14:
 156               	.LFBB4:
 157               		push r16
 158               		push r17
  75:lcd.h         **** TC=0x20;			//interface setup		
  76:lcd.h         **** 	lcd_cmd(0x01);
  77:lcd.h         **** 	lcd_cmd(0x02);
 159               	 */
 160               		mov r16,r24
 162 0030 0F93      	.LM15:
 163 0032 1F93      		in r24,53-32
 164               		andi r24,lo8(-8)
 165               		out 53-32,r24
  78:lcd.h         **** PORTC;
 167               	mov r24,r16
 168               		andi r24,lo8(-16)
 169 0036 85B3      		out 53-32,r24
 171 003a 85BB      	.LM17:
  79:lcd.h         **** ms(unsigned int ms);
 172               	l latch
 174 003c 802F      	.LM18:
 175 003e 807F      		ldi r17,lo8(0)
 176 0040 85BB      		andi r16,lo8(15)
  80:lcd.h         **** ue(unsigned char num);
 177               	 r17,hi8(15)
 178               		ldi r24,4
 179 0042 00D0      	1:	lsl r16
  81:lcd.h         **** id lcd_char(unsigned char single);
 180               	l r17
 181               		dec r24
 182 0044 10E0      		brne 1b
 183 0046 0F70      		out 53-32,r16
 185 004a 84E0      	.LM19:
 186 004c 000F      		rcall latch
 187 004e 111F      	/* epilogue start */
 189 0052 01F4      	.LM20:
 190 0054 05BB      		pop r17
  82:lcd.h         **** lcd_cmd(unsigned char cmd);
 191               	et
 193 0056 00D0      	.Lscope4:
  83:lcd.h         **** 
 195               	abs	"single:P(0,11)",64,0,0,17
 196               	.global	lcd_char
 198 005a 0F91      	lcd_char:
 200               	.LM21:
 201               	.LFBB5:
 202               		push r17
 203               	/* prologue: function */
 204               	/* frame size = 0 */
 205               		mov r17,r24
  84:lcd.h         ****  the 2d row 3rd column
  85:lcd.h         **** 			  row and column address are starts from(0,0)
  86:lcd.h         **** 	lcd_clear()---To clear the LCD
  87:lcd.h         **** 	
 207               	r24,lo8(1)
 208               		out 53-32,r24
 210 005e 1F93      	.LM23:
 211               		out 53-32,__zero_reg__
 213 0060 182F      	.LM24:
  88:lcd.h         ****  will set the cursor at the 2d row 3rd column
 214               	4,r17
 215               		andi r24,lo8(-16)
 216 0062 81E0      		ori r24,lo8(1)
 217 0064 85BB      		out 53-32,r24
  89:lcd.h         **** -- Will set the cursor at a particular position on of the LCD.
 218               	abn	68,0,91,.LM25-.LFBB5
 219               	.LM25:
 220 0066 15BA      		rcall latch
  90:lcd.h         **** we give lcd_showvalue(0xFF) then 255 will be displayed.
 221               	tabn	68,0,92,.LM26-.LFBB5
 222               	.LM26:
 223 0068 812F      		swap r17
 224 006a 807F      		andi r17,lo8(-16)
 225 006c 8160      		ori r17,lo8(1)
 226 006e 85BB      		out 53-32,r17
  91:lcd.h         **** lue()- This will show a 3-digit decimal value on the LCD. For example if
 227               	n	68,0,93,.LM27-.LFBB5
 228               	.LM27:
 229 0070 00D0      		rcall latch
  92:lcd.h         ****  this would be
 230               	epilogue start */
 232 0072 1295      	.LM28:
 233 0074 107F      		pop r17
 234 0076 1160      		ret
  93:lcd.h         **** l display A. Again lcd_char('b')
 236               	e5:
 239               	.global	lcd_string
  94:lcd.h         **** ---- This function will display a single character on the LCD display.
 240               	pe	lcd_string, @function
 241               	lcd_string:
 243 007e 0895      	.LM29:
 244               	.LFBB6:
 245               		push r14
 246               		push r15
 247               		push r17
 248               		push r28
 249               		push r29
 250               	/* prologue: function */
  95:lcd.h         **** LCD. For e.g lcd_cmd(0x01) will give the clear command.
  96:lcd.h         **** 	lcd_char() ----- This function will display a single character on the LCD display.
  97:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
 251               	ze = 0 */
 252               		movw r14,r24
 254 0080 EF92      	.LM30:
 255 0082 FF92      		ldi r24,lo8(1)
 256 0084 1F93      		out 53-32,r24
 258 0088 DF93      	.LM31:
 259               		out 53-32,__zero_reg__
 260               		ldi r17,lo8(0)
 261 008a 7C01      		rjmp .L14
  98:lcd.h         **** ---- This function will display a single character on the LCD display.
  99:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
 262               	bn	68,0,103,.LM32-.LFBB6
 263               	.LM32:
 264 008c 81E0      		cpi r17,lo8(16)
 265 008e 85BB      		brne .L15
 100:lcd.h         **** ---- This function will display a single character on the LCD display.
 266               	abn	68,0,104,.LM33-.LFBB6
 267               	.LM33:
 268 0090 15BA      		ldi r24,lo8(-64)
 269 0092 10E0      		rcall lcd_cmd
 270 0094 00C0      	.L15:
 101:lcd.h         **** LCD. For e.g lcd_cmd(0x01) will give the clear command.
 102:lcd.h         **** 	lcd_char() ----- This function will display a single character on the LCD display.
 103:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
 272               	
 273               		ld r24,Y
 274 0096 1031      		andi r24,lo8(-16)
 275 0098 01F4      		ori r24,lo8(1)
 104:lcd.h         **** ---- This function will display a single character on the LCD display.
 276               	t 53-32,r24
 278 009a 80EC      	.LM35:
 279 009c 00D0      		rcall latch
 105:lcd.h         **** LCD. For e.g lcd_cmd(0x01) will give the clear command.
 281               	:
 282               		ld r24,Y
 283 009e 8881      		swap r24
 284 00a0 807F      		andi r24,lo8(-16)
 285 00a2 8160      		ori r24,lo8(1)
 286 00a4 85BB      		out 53-32,r24
 106:lcd.h         **** 	lcd_cmd() ------ This function is used to give any command instructions to the
 287               	n	68,0,108,.LM37-.LFBB6
 288               	.LM37:
 289 00a6 00D0      		rcall latch
 107:lcd.h         **** efore calling any other functions
 290               	tabn	68,0,109,.LM38-.LFBB6
 291               	.LM38:
 292 00a8 8881      		subi r17,lo8(-(1))
 293 00aa 8295      	.L14:
 295 00ae 8160      	.LM39:
 296 00b0 85BB      		movw r28,r14
 108:lcd.h         ****  before
 297               	8,r17
 298               		adc r29,__zero_reg__
 299 00b2 00D0      		ld r24,Y
 109:lcd.h         **** header files have implementation of some common finctions of the LCD.
 300               	t r24
 301               		brne .L16
 302 00b4 1F5F      	/* epilogue start */
 304               	.LM40:
 305               		pop r29
 306 00b6 E701      		pop r28
 307 00b8 C10F      		pop r17
 308 00ba D11D      		pop r15
 309 00bc 8881      		pop r14
 310 00be 8823      		ret
 110:lcd.h         **** /*	LCD.h
 111:lcd.h         **** Technophilia embedded systems
 313               	,0,.LFBB6-.LFBB6
 315 00c2 DF91      	.Lscope6:
 318 00c8 FF90      	.global	lcd_showvalue
 320 00cc 0895      	lcd_showvalue:
 322               	.LM41:
 323               	.LFBB7:
 324               		push r14
 325               		push r15
 326               		push r16
 327               		push r17
 328               	/* prologue: function */
 329               	/* frame size = 0 */
 330               		mov r17,r24
 112:lcd.h         **** /*	LCD.h
 113:lcd.h         **** Technophilia embedded systems
 114:lcd.h         **** 
 115:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
 331               	LM42-.LFBB7
 332               	.LM42:
 333               		ldi r22,lo8(100)
 334 00ce EF92      		rcall __udivmodqi4
 335 00d0 FF92      		mov r20,r24
 337 00d4 1F93      	.LM43:
 338               		mov r18,r24
 339               		ldi r19,lo8(0)
 340 00d6 182F      		ldi r24,lo8(-100)
 116:lcd.h         **** /*	LCD.h
 117:lcd.h         **** Technophilia embedded systems
 341               	i8(-100)
 342               		mul r18,r24
 343 00d8 64E6      		movw r14,r0
 344 00da 00D0      		mul r18,r25
 345 00dc 482F      		add r15,r0
 118:lcd.h         **** /*	LCD.h
 346               	r19,r24
 347               		add r15,r0
 348 00de 282F      		clr r1
 349 00e0 30E0      		movw r24,r14
 350 00e2 8CE9      		add r24,r17
 351 00e4 9FEF      		adc r25,__zero_reg__
 352 00e6 289F      		ldi r22,lo8(10)
 353 00e8 7001      		ldi r23,hi8(10)
 354 00ea 299F      		rcall __divmodhi4
 355 00ec F00C      		mov r16,r22
 357 00f0 F00C      	.LM44:
 358 00f2 1124      		mov r24,r20
 359 00f4 C701      		subi r24,lo8(-(48))
 360 00f6 810F      		rcall lcd_char
 362 00fa 6AE0      	.LM45:
 363 00fc 70E0      		mov r24,r16
 364 00fe 00D0      		subi r24,lo8(-(48))
 365 0100 062F      		rcall lcd_char
 119:lcd.h         **** /*	LCD.h
 120:lcd.h         **** Technophilia embedded systems
 121:lcd.h         **** 
 366               	46-.LFBB7
 367               	.LM46:
 368 0102 842F      		subi r17,lo8(-(48))
 369 0104 805D      		add r17,r14
 370 0106 00D0      		ldi r24,lo8(-10)
 122:lcd.h         **** /*	LCD.h
 371               	r25,hi8(-10)
 372               		mul r16,r24
 373 0108 802F      		mov r16,r0
 374 010a 805D      		clr r1
 375 010c 00D0      		mov r24,r16
 123:lcd.h         **** /*	LCD.h
 376               	r24,r17
 377               		rcall lcd_char
 378 010e 105D      	/* epilogue start */
 380 0112 86EF      	.LM47:
 381 0114 9FEF      		pop r17
 382 0116 089F      		pop r16
 383 0118 002D      		pop r15
 384 011a 1124      		pop r14
 385 011c 802F      		ret
 387 0120 00D0      	.Lscope7:
 124:lcd.h         **** /*	LCD.h
 389               	P(0,11)",64,0,0,24
 391 0122 1F91      	.global	lcd_gotoxy
 393 0126 FF90      	lcd_gotoxy:
 395 012a 0895      	.LM48:
 396               	.LFBB8:
 397               	/* prologue: function */
 398               	/* frame size = 0 */
 400               	.LM49:
 401               		tst r24
 402               		brne .L21
 125:lcd.h         **** /*	LCD.h
 126:lcd.h         **** Technophilia embedded systems
 127:lcd.h         **** 
 404               	,r22
 405               		subi r24,lo8(-(-128))
 406               		rcall lcd_cmd
 407               		ret
 408               	.L21:
 128:lcd.h         **** /*	LCD.h
 409               	bn	68,0,132,.LM51-.LFBB8
 410               	.LM51:
 411 012c 8823      		cpi r24,lo8(1)
 412 012e 01F4      		brne .L23
 129:lcd.h         **** /*	LCD.h
 130:lcd.h         **** Technophilia embedded systems
 413               	abn	68,0,134,.LM52-.LFBB8
 414               	.LM52:
 415 0130 862F      		mov r24,r22
 416 0132 8058      		subi r24,lo8(-(-64))
 417 0134 00D0      		rcall lcd_cmd
 418 0136 0895      	.L23:
 419               		ret
 131:lcd.h         **** /*	LCD.h
 132:lcd.h         **** Technophilia embedded systems
 420               	lcd_gotoxy, .-lcd_gotoxy
 421               	.Lscope8:
 133:lcd.h         **** /*	LCD.h
 134:lcd.h         **** Technophilia embedded systems
 424               	bal	delay_ms
 426 013c 862F      	delay_ms:
 428 0140 00D0      	.LM53:
 429               	.LFBB9:
 430 0142 0895      	/* prologue: function */
 431               	/* frame size = 0 */
 432               		rjmp .L25
 433               	.L27:
 435               	.LM54:
 436               		ldi r18,lo8(0)
 437               		ldi r19,hi8(0)
 135:lcd.h         **** /*	LCD.h
 136:lcd.h         **** Technophilia embedded systems
 137:lcd.h         **** 
 138:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
 139:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 140:lcd.h         **** 	calling any other functions to initialize the lcd.
 438               	68,0,147,.LM55-.LFBB9
 439               	.LM55:
 440               	/* #APP */
 441               	 ;  147 "lcd.h" 1
 442               		nop
 443 0144 00C0      	 ;  0 "" 2
 141:lcd.h         **** ions of the LCD.
 142:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 143:lcd.h         **** 	calling any other functions to initialize the lcd.
 445               	/* #NOAPP */
 446               		subi r18,lo8(-(1))
 447 0146 20E0      		sbci r19,hi8(-(1))
 448 0148 30E0      		ldi r20,hi8(3276)
 449               		cpi r18,lo8(3276)
 144:lcd.h         **** ions of the LCD.
 145:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 146:lcd.h         **** 	calling any other functions to initialize the lcd.
 147:lcd.h         **** 
 450               	r19,r20
 451               		brne .L26
 452               		sbiw r24,1
 453               	.L25:
 455               	.LM57:
 456               		sbiw r24,0
 457               		brne .L27
 458               	/* epilogue start */
 460 014e 3F4F      	.LM58:
 461 0150 4CE0      		ret
 466               	.Lscope9:
 468               	.global	lcd_init
 470 015c 01F4      	lcd_init:
 148:lcd.h         **** ns of the LCD.
 149:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 472               	logue: function */
 473               	/* frame size = 0 */
 475               	.LM60:
 476               		ldi r24,lo8(20)
 477               		ldi r25,hi8(20)
 478               		rcall delay_ms
 480               	.LM61:
 481               		in r24,53-32
 482               		sts save,r24
 484               	.LM62:
 485               		ldi r24,lo8(-1)
 486               		out 52-32,r24
 488               	.LM63:
 489               		ldi r24,lo8(15)
 490               		ldi r25,hi8(15)
 491 0160 84E1      		rcall delay_ms
 493 0164 00D0      	.LM64:
 494               		ldi r24,lo8(32)
 495               		out 53-32,r24
 497 0168 8093 0000 	.LM65:
 498               		ldi r24,lo8(1)
 499               		rcall lcd_cmd
 501 016e 84BB      	.LM66:
 502               		ldi r24,lo8(2)
 503               		rcall lcd_cmd
 505 0172 90E0      	.LM67:
 506 0174 00D0      		ldi r24,lo8(-128)
 507               		rcall lcd_cmd
 509 0176 80E2      	.LM68:
 510 0178 85BB      		ldi r24,lo8(20)
 511               		ldi r25,hi8(20)
 512               		rcall delay_ms
 513 017a 81E0      	/* epilogue start */
 515               	.LM69:
 516               		ret
 518 0180 00D0      	.Lscope10:
 520               	.global	lcd_clear
 522 0184 00D0      	lcd_clear:
 524               	.LM70:
 525 0186 84E1      	.LFBB11:
 526 0188 90E0      	/* prologue: function */
 527 018a 00D0      	/* frame size = 0 */
 529               	.LM71:
 530               		ldi r24,lo8(1)
 531 018c 0895      		rcall lcd_cmd
 532               	/* epilogue start */
 534               	.LM72:
 535               		ret
 537               	.Lscope11:
 150:lcd.h         **** header files have implementation of some common finctions of the LCD.
 151:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 152:lcd.h         **** 	calling any other functions to initialize the lcd.
 538               	",64,0,0,24
 539               	.global	delayms
 541               	delayms:
 153:lcd.h         **** ions of the LCD.
 543               	t3:
 545 018e 81E0      	.LM73:
 546 0190 00D0      	.LFBB12:
 547               	/* prologue: function */
 154:lcd.h         **** /*	LCD.h
 548               	ame size = 0 */
 550 0192 0895      	.LM74:
 551               		lds r18,delaycounter2
 552               		lds r19,(delaycounter2)+1
 553               		ldi r20,lo8(0)
 554               		ldi r21,hi8(0)
 555               		rjmp .L35
 556               	.L36:
 558               	.LM75:
 559               	/* #APP */
   1:delay.h       **** /*	LCD.h
   2:delay.h       **** Technophilia embedded systems
   3:delay.h       **** 
   4:delay.h       **** 	this header file provides time delay in the form of mili second and micro second
   5:delay.h       **** 	without affecting any interrupts.
   6:delay.h       **** 
   7:delay.h       **** 	delayms()  this function provides delay in the form of mili second
   8:delay.h       **** 	delayus()  this function provides delay in the form of micro second
   9:delay.h       **** 	
  10:delay.h       **** */
  11:delay.h       **** #ifndef _DELAY_H_
  12:delay.h       **** #define _DELAY_H_
  13:delay.h       **** unsigned int delaycounter1,delaycounter2;
  14:delay.h       **** void delayms(unsigned int delaytime)
  15:delay.h       **** {
 560               	y.h" 1
 561               		nop
 562               	 ;  0 "" 2
 563               	 ;  21 "delay.h" 1
 564               		nop
 565               	 ;  0 "" 2
 566               	 ;  21 "delay.h" 1
 567 0194 2091 0000 		nop
 568 0198 3091 0000 	 ;  0 "" 2
 569 019c 40E0      	 ;  21 "delay.h" 1
 570 019e 50E0      		nop
 571 01a0 00C0      	 ;  0 "" 2
 572               	 ;  21 "delay.h" 1
  16:delay.h       **** 
  17:delay.h       **** 	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  18:delay.h       **** 	 {
  19:delay.h       **** 		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
  20:delay.h       **** 		  {
  21:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 573               	 2
 574               	 ;  21 "delay.h" 1
 575               		nop
 576               	 ;  0 "" 2
 578               	.LM76:
 579               	 ;  22 "delay.h" 1
 580 01a4 0000      		nop
 581               	 ;  0 "" 2
 582               	 ;  22 "delay.h" 1
 583 01a6 0000      		nop
 584               	 ;  0 "" 2
 585               	 ;  22 "delay.h" 1
 586 01a8 0000      		nop
 587               	 ;  0 "" 2
 588               	 ;  22 "delay.h" 1
 589 01aa 0000      		nop
 590               	 ;  0 "" 2
 591               	 ;  22 "delay.h" 1
 592 01ac 0000      		nop
 593               	 ;  0 "" 2
  22:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 594               	op
 595               	 ;  0 "" 2
 596               	/* #NOAPP */
 597 01ae 0000      	.L38:
 598               		subi r18,lo8(-(1))
 599               		sbci r19,hi8(-(1))
 601               	.LM77:
 602               		ldi r22,hi8(802)
 603 01b2 0000      		cpi r18,lo8(802)
 604               		cpc r19,r22
 605               		brne .L36
 606 01b4 0000      		subi r20,lo8(-(1))
 607               		sbci r21,hi8(-(1))
 608               		ldi r18,lo8(801)
 609 01b6 0000      		ldi r19,hi8(801)
 610               	.L35:
 612 01b8 0000      	.LM78:
 613               		cp r24,r20
 614               		cpc r25,r21
 615               		brlo .L37
 616 01ba 2F5F      		ldi r18,lo8(0)
 617 01bc 3F4F      		ldi r19,hi8(0)
 618               		rjmp .L38
 619               	.L37:
 620 01be 63E0      		sts (delaycounter2)+1,r19
 621 01c0 2232      		sts delaycounter2,r18
 622 01c2 3607      		sts (delaycounter1)+1,r21
 623 01c4 01F4      		sts delaycounter1,r20
 624 01c6 4F5F      	/* epilogue start */
 626 01ca 21E2      	.LM79:
 627 01cc 33E0      		ret
 629               	.Lscope12:
 632 01d0 9507      	.global	getdata
 634 01d4 20E0      	getdata:
 636 01d8 00C0      	.Ltext4:
 638 01da 3093 0000 	.LM80:
 639 01de 2093 0000 	.LFBB13:
 640 01e2 5093 0000 	/* prologue: function */
 641 01e6 4093 0000 	/* frame size = 0 */
  23:delay.h       **** 		  }
  24:delay.h       **** 		
  25:delay.h       **** 	 }
  26:delay.h       **** }
 643               	,0,35,.LM82-.LFBB13
 644               	.LM82:
 645 01ea 0895      		in r25,39-32
 646               		or r25,r24
 647               		out 39-32,r25
 649               	.LM83:
 650               		sbi 38-32,6
 652               	.LM84:
 653               		ldi r24,lo8(1)
 654               		ldi r25,hi8(1)
  32:adc.h         ****  unsigned char getdata(unsigned char chno)	
  33:adc.h         ****   {
 655               	ms
 657               	.LM85:
 658               		in r24,37-32
 659               	/* epilogue start */
  34:adc.h         ****     ADMUX=0X60;						//right align the ADC result
 660               	bn	68,0,39,.LM86-.LFBB13
 661               	.LM86:
 662 01ec 90E6      		ret
  35:adc.h         ****     ADMUX|=chno;					//select the ADC channel
 664               	ope13:
 667 01f2 982B      	.global	delayus
  36:adc.h         ****     ADCSRA|=0X40;					//start ADC convertion
 669               	us:
 671 01f6 369A      	.Ltext5:
  37:adc.h         ****     delayms(1);					//give some time delay to complit the aDC convertion
 672               	tabn	68,0,29,.LM87-.LFBB14
 673               	.LM87:
 674 01f8 81E0      	.LFBB14:
 675 01fa 90E0      	/* prologue: function */
 676 01fc 00D0      	/* frame size = 0 */
  38:adc.h         **** 	return ADCH;
 677               	bn	68,0,29,.LM88-.LFBB14
 678               	.LM88:
 679 01fe 85B1      		ldi r18,lo8(0)
 680               		ldi r19,hi8(0)
  39:adc.h         ****   }
 681               	p .L43
 682               	.L44:
 684               	.LM89:
 685               	/* #APP */
 686               	 ;  34 "delay.h" 1
 687               		nop
 688               	 ;  0 "" 2
 689               	 ;  34 "delay.h" 1
 690               		nop
 691               	 ;  0 "" 2
 692               	 ;  34 "delay.h" 1
  27:delay.h       **** 
  28:delay.h       **** void delayus(unsigned int delaytime)
  29:delay.h       **** {
 693               	" 2
 694               	 ;  34 "delay.h" 1
 695               		nop
 696               	 ;  0 "" 2
 697               	 ;  34 "delay.h" 1
 698               		nop
 699               	 ;  0 "" 2
 700 0202 20E0      	 ;  34 "delay.h" 1
 701 0204 30E0      		nop
 702 0206 00C0      	 ;  0 "" 2
  30:delay.h       **** 
  31:delay.h       **** 	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  32:delay.h       **** 	 {
  33:delay.h       **** 		 
  34:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 704               	35 "delay.h" 1
 705               		nop
 706               	 ;  0 "" 2
 707               	 ;  35 "delay.h" 1
 708 0208 0000      		nop
 709               	 ;  0 "" 2
 710               	 ;  35 "delay.h" 1
 711 020a 0000      		nop
 712               	 ;  0 "" 2
 713               	 ;  35 "delay.h" 1
 714 020c 0000      		nop
 715               	 ;  0 "" 2
 716               	/* #NOAPP */
 717 020e 0000      		subi r18,lo8(-(1))
 718               		sbci r19,hi8(-(1))
 719               	.L43:
 721               	.LM91:
 722               		cp r24,r18
 723 0212 0000      		cpc r25,r19
 724               		brsh .L44
  35:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");
 725               	1,r19
 726               		sts delaycounter1,r18
 727               	/* epilogue start */
 729               	.LM92:
 730               		ret
 732               	.Lscope14:
 734 0218 0000      	.global	xaxis
 736               	xaxis:
 738               	.Ltext6:
 740 021c 2F5F      	.LM93:
 741 021e 3F4F      	.LFBB15:
 742               	/* prologue: function */
 743               	/* frame size = 0 */
 745 0220 8217      	.LM94:
 746 0222 9307      		ldi r24,lo8(10)
 747 0224 00F4      		out 58-32,r24
 749 022a 2093 0000 	.LM95:
 750               		ldi r24,lo8(8)
  36:delay.h       **** 	 }
  37:delay.h       **** }
 751               	0,37,.LM96-.LFBB15
 752               	.LM96:
 753 022e 0895      		ldi r24,lo8(100)
 754               		ldi r25,hi8(100)
 755               		rcall delayus
 757               	.LM97:
 758               		ldi r24,lo8(2)
 759               		rcall getdata
 760               		sts xcod,r24
   1:main.c        **** //calibration of 4 points for forward, backword, left, right 
   2:main.c        **** 
   3:main.c        **** //interfacing 4 wire resistive touch screen with avr
   4:main.c        **** //controller used atmega 8535
   5:main.c        **** 
   6:main.c        **** 
   7:main.c        **** //connection details
   8:main.c        **** 
   9:main.c        **** //YM-PA0
  10:main.c        **** //XM-PA1
  11:main.c        **** //YP-PA2
  12:main.c        **** //XP-PA3
  13:main.c        **** 
  14:main.c        **** 
  15:main.c        **** // 4  3   2  1    //pin numbar
  16:main.c        **** // X+,Y+, X-,Y-
  17:main.c        **** // 3  2   1  0
  18:main.c        **** 
  19:main.c        **** // 1  ad  0  x		reading x axis 
  20:main.c        **** // ad 0   x  1		reading y axis
  21:main.c        **** 
  22:main.c        **** // 1  0  r  0		touch detect  DDRA=0x05;  PORTA=0x08;
  23:main.c        **** 
  24:main.c        **** 
  25:main.c        **** #include <avr/io.h>
  26:main.c        **** #include "adc.h"
  27:main.c        **** #include "lcd.h"
  28:main.c        **** #include "delay.h"
  29:main.c        **** 
  30:main.c        **** 
  31:main.c        **** unsigned char xcod,ycod,pxcod,pycod,dx,dy,fx,fy,bx,by,lx,ly,rx,ry,sx,sy;
  32:main.c        **** 
  33:main.c        **** void xaxis()                      	//for reading X cordinate
  34:main.c        ****  {
 762               	 r24,lo8(100)
 763               		ldi r25,hi8(100)
 764               		rcall delayus
 765               	/* epilogue start */
  35:main.c        ****   DDRA=0x0A;						
 767               	:
 768               		ret
 770 0232 8ABB      	.Lscope15:
  36:main.c        ****   PORTA=0x08;
 771               	abs	"yaxis:F(0,15)",36,0,0,yaxis
 772               	.global	yaxis
 774 0236 8BBB      	yaxis:
  37:main.c        ****   delayus(100);
 775               	abn	68,0,43,.LM100-.LFBB16
 776               	.LM100:
 777 0238 84E6      	.LFBB16:
 778 023a 90E0      	/* prologue: function */
 779 023c 00D0      	/* frame size = 0 */
  38:main.c        ****   xcod=getdata(2);
 780               	bn	68,0,44,.LM101-.LFBB16
 781               	.LM101:
 782 023e 82E0      		ldi r24,lo8(5)
 783 0240 00D0      		out 58-32,r24
  39:main.c        ****   delayus(100);
 785               	2:
 786               		ldi r24,lo8(1)
 787 0246 84E6      		out 59-32,r24
 789 024a 00D0      	.LM103:
 790               		ldi r24,lo8(100)
  40:main.c        ****  }
 791               	25,hi8(100)
 792               		rcall delayus
 794               	.LM104:
 795               		ldi r24,lo8(3)
 796               		rcall getdata
 797               		sts ycod,r24
 799               	.LM105:
  41:main.c        ****  
  42:main.c        **** void yaxis() 						//for reading Y coordinate
  43:main.c        ****  {
 800               	lo8(100)
 801               		ldi r25,hi8(100)
 802               		rcall delayus
 803               	/* epilogue start */
  44:main.c        ****   DDRA=0x05;
 805               	6:
 806               		ret
 808 0250 8ABB      	.Lscope16:
  45:main.c        ****   PORTA=0x01;
 809               	abs	"touchdetect:F(0,15)",36,0,0,touchdetect
 810               	.global	touchdetect
 812 0254 8BBB      	touchdetect:
  46:main.c        ****   delayus(100);
 813               	abn	68,0,52,.LM107-.LFBB17
 814               	.LM107:
 815 0256 84E6      	.LFBB17:
 816 0258 90E0      	/* prologue: function */
 817 025a 00D0      	/* frame size = 0 */
  47:main.c        ****   ycod=getdata(3);
 818               	bn	68,0,53,.LM108-.LFBB17
 819               	.LM108:
 820 025c 83E0      		ldi r24,lo8(5)
 821 025e 00D0      		out 58-32,r24
  48:main.c        ****   delayus(100);
 823               	9:
 824               		ldi r24,lo8(8)
 825 0264 84E6      		out 59-32,r24
 827 0268 00D0      	.LM110:
 828               		ldi r24,lo8(100)
  49:main.c        ****  }
 829               	25,hi8(100)
 830               		rcall delayus
 831 026a 0895      	.L51:
 833               	.LM111:
 834               		sbic 57-32,1
 835               		rjmp .L51
 836               	/* epilogue start */
  50:main.c        ****  
  51:main.c        **** void touchdetect()
  52:main.c        ****  {
 838               	ret
 840               	.Lscope17:
 842               	.global	touchbreak
  53:main.c        ****    DDRA=0x05;
 843               	e	touchbreak, @function
 844               	touchbreak:
 846 026e 8ABB      	.LM113:
  54:main.c        ****    PORTA=0x08;
 847               	B18:
 848               	/* prologue: function */
 849 0270 88E0      	/* frame size = 0 */
  55:main.c        ****    delayus(100);
 851               	14:
 852               		ldi r24,lo8(9)
 853 0274 84E6      		out 58-32,r24
 855 0278 00D0      	.LM115:
 856               		ldi r24,lo8(8)
  56:main.c        ****    while((PINA & 0x02)==0x02);//touch detect
 857               	9-32,r24
 859 027a C999      	.LM116:
 860 027c 00C0      		ldi r24,lo8(100)
 861               		ldi r25,hi8(100)
  57:main.c        ****  } 
 862               	l delayus
 863               	.L55:
 865               	.LM117:
 866               		ldi r24,lo8(2)
 867               		rcall getdata
 868               		tst r24
 869               		brne .L55
  58:main.c        ****  
  59:main.c        **** void touchbreak()
  60:main.c        ****  {
 871               	ldi r24,lo8(100)
 872               		ldi r25,hi8(100)
 873               		rcall delayus
 874               	/* epilogue start */
  61:main.c        ****    DDRA=0x09;
 876               	9:
 877               		ret
 879 0282 8ABB      	.Lscope18:
  62:main.c        ****    PORTA=0x08;
 880               	abs	"bz:F(0,15)",36,0,0,bz
 881               	.global	bz
 883 0286 8BBB      	bz:
  63:main.c        ****    delayus(100);
 884               	abn	68,0,69,.LM120-.LFBB19
 885               	.LM120:
 886 0288 84E6      	.LFBB19:
 887 028a 90E0      	/* prologue: function */
 888 028c 00D0      	/* frame size = 0 */
  64:main.c        ****    while(getdata(2)!=0);
 890               	:
 891               		sbi 52-32,3
 893 0290 00D0      	.LM122:
 894 0292 8823      		sbi 53-32,3
  65:main.c        ****    delayus(100);
 896               	:
 897               		ldi r24,lo8(50)
 898 0296 84E6      		ldi r25,hi8(50)
 899 0298 90E0      		rcall delayms
 901               	.LM124:
  66:main.c        ****  } 
 902               	3-32,3
 903               	/* epilogue start */
 905               	.LM125:
 906               		ret
 908               	.Lscope19:
 909               		.data
 910               	.LC0:
  67:main.c        ****  
  68:main.c        ****  void bz()
  69:main.c        ****   {
 911               	"calibration"
 912               	.LC1:
 913               		.string	"forward    "
 914               	.LC2:
 915               		.string	"forward  ok"
  70:main.c        ****    DDRC|=0x08;
 916               	
 917               		.string	"backword   "
 918 029e A39A      	.LC4:
  71:main.c        ****    PORTC|=0x08;
 919               	string	"backward ok"
 920               	.LC5:
 921 02a0 AB9A      		.string	"left       "
  72:main.c        ****    delayms(50);
 922               	6:
 923               		.string	"left     ok"
 924 02a2 82E3      	.LC7:
 925 02a4 90E0      		.string	"right      "
 926 02a6 00D0      	.LC8:
  73:main.c        ****    PORTC&=~0x08;
 927               	ing	"right    ok"
 928               	.LC9:
 929 02a8 AB98      		.string	"stop       "
 930               	.LC10:
  74:main.c        ****   }
 931               	ring	"stop     ok"
 932               	.LC11:
 933 02aa 0895      		.string	"cal      ok"
 934               		.text
 936               	.global	calibration
 938 0000 6361 6C69 	calibration:
 938      6272 6174 
 938      696F 6E00 
 940 000c 666F 7277 	.LM126:
 940      6172 6420 
 940      2020 2000 
 941               	.LFBB20:
 942 0018 666F 7277 	/* prologue: function */
 942      6172 6420 
 942      206F 6B00 
 943               	/* frame size = 0 */
 945               	.LM127:
 946 0030 6261 636B 		ldi r24,lo8(0)
 946      7761 7264 
 946      206F 6B00 
 947               		ldi r22,lo8(0)
 948 003c 6C65 6674 		rcall lcd_gotoxy
 948      2020 2020 
 948      2020 2000 
 950 0048 6C65 6674 	.LM128:
 950      2020 2020 
 950      206F 6B00 
 951               		ldi r24,lo8(.LC0)
 952 0054 7269 6768 		ldi r25,hi8(.LC0)
 952      7420 2020 
 952      2020 2000 
 953               		rcall lcd_string
 955               	.LM129:
 956 006c 7374 6F70 		ldi r24,lo8(1000)
 956      2020 2020 
 956      2020 2000 
 957               		ldi r25,hi8(1000)
 958 0078 7374 6F70 		rcall delayms
 958      2020 2020 
 958      206F 6B00 
 960 0084 6361 6C20 	.LM130:
 960      2020 2020 
 960      206F 6B00 
 961               		ldi r24,lo8(0)
 962               		ldi r22,lo8(0)
 963               		rcall lcd_gotoxy
 965               	.LM131:
  75:main.c        ****   
  76:main.c        ****   void calibration()
  77:main.c        ****   {
 966               	1)
 967               		rcall lcd_string
 969               	.LM132:
 970               		rcall touchdetect
  78:main.c        ****    
  79:main.c        ****    lcd_gotoxy(0,0);
 971               	bn	68,0,86,.LM133-.LFBB20
 972               	.LM133:
 973 02ac 80E0      		rcall xaxis
 974 02ae 60E0      		rcall yaxis
  80:main.c        ****    lcd_string("calibration");
 976               	4:
 977               		lds r24,xcod
 978 02b2 80E0      		sts fx,r24
 979 02b4 90E0      		lds r24,ycod
 980 02b6 00D0      		sts fy,r24
  81:main.c        ****    delayms(1000);
 981               	bn	68,0,88,.LM135-.LFBB20
 982               	.LM135:
 983 02b8 88EE      		rcall touchbreak
 985 02bc 00D0      	.LM136:
  82:main.c        ****    
  83:main.c        ****    lcd_gotoxy(0,0);
 986               	r24,lo8(0)
 987               		ldi r22,lo8(0)
 988 02be 80E0      		rcall lcd_gotoxy
 990 02c2 00D0      	.LM137:
  84:main.c        ****    lcd_string("forward    ");
 991               	r24,lo8(.LC2)
 992               		ldi r25,hi8(.LC2)
 993 02c4 80E0      		rcall lcd_string
 995 02c8 00D0      	.LM138:
  85:main.c        ****    touchdetect();
 996               	l bz
 998 02ca 00D0      	.LM139:
  86:main.c        ****    xaxis();yaxis();
 999               	i r24,lo8(1000)
 1000               		ldi r25,hi8(1000)
 1001 02cc 00D0      		rcall delayms
  87:main.c        ****    fx=xcod;fy=ycod;
 1003               	40:
 1004               		ldi r24,lo8(0)
 1005 02d0 8091 0000 		ldi r22,lo8(0)
 1006 02d4 8093 0000 		rcall lcd_gotoxy
 1008 02dc 8093 0000 	.LM141:
  88:main.c        ****    touchbreak();
 1009               	24,lo8(.LC3)
 1010               		ldi r25,hi8(.LC3)
 1011 02e0 00D0      		rcall lcd_string
  89:main.c        ****    lcd_gotoxy(0,0);
 1012               	tabn	68,0,96,.LM142-.LFBB20
 1013               	.LM142:
 1014 02e2 80E0      		rcall touchdetect
 1016 02e6 00D0      	.LM143:
  90:main.c        ****    lcd_string("forward  ok");
 1017               	l xaxis
 1018               		rcall yaxis
 1020 02ea 90E0      	.LM144:
 1021 02ec 00D0      		lds r24,xcod
  91:main.c        ****    bz();
 1022               	bx,r24
 1023               		lds r24,ycod
 1024 02ee 00D0      		sts by,r24
  92:main.c        ****    delayms(1000);
 1025               	tabn	68,0,99,.LM145-.LFBB20
 1026               	.LM145:
 1027 02f0 88EE      		rcall touchbreak
 1029 02f4 00D0      	.LM146:
  93:main.c        ****    
  94:main.c        ****    lcd_gotoxy(0,0);
 1030               	r24,lo8(0)
 1031               		ldi r22,lo8(0)
 1032 02f6 80E0      		rcall lcd_gotoxy
 1034 02fa 00D0      	.LM147:
  95:main.c        ****    lcd_string("backword   ");
 1035               	r24,lo8(.LC4)
 1036               		ldi r25,hi8(.LC4)
 1037 02fc 80E0      		rcall lcd_string
 1039 0300 00D0      	.LM148:
  96:main.c        ****    touchdetect();
 1040               	l bz
 1042 0302 00D0      	.LM149:
  97:main.c        ****    xaxis();yaxis();
 1043               	i r24,lo8(1000)
 1044               		ldi r25,hi8(1000)
 1045 0304 00D0      		rcall delayms
  98:main.c        ****    bx=xcod;by=ycod;
 1047               	50:
 1048               		ldi r24,lo8(0)
 1049 0308 8091 0000 		ldi r22,lo8(0)
 1050 030c 8093 0000 		rcall lcd_gotoxy
 1052 0314 8093 0000 	.LM151:
  99:main.c        ****      touchbreak();
 1053               	24,lo8(.LC5)
 1054               		ldi r25,hi8(.LC5)
 1055 0318 00D0      		rcall lcd_string
 100:main.c        ****    lcd_gotoxy(0,0);
 1056               	tabn	68,0,107,.LM152-.LFBB20
 1057               	.LM152:
 1058 031a 80E0      		rcall touchdetect
 1060 031e 00D0      	.LM153:
 101:main.c        ****    lcd_string("backward ok");
 1061               	l xaxis
 1062               		rcall yaxis
 1064 0322 90E0      	.LM154:
 1065 0324 00D0      		lds r24,xcod
 102:main.c        ****     bz();
 1066               	lx,r24
 1067               		lds r24,ycod
 1068 0326 00D0      		sts ly,r24
 103:main.c        ****    delayms(1000);
 1069               	tabn	68,0,110,.LM155-.LFBB20
 1070               	.LM155:
 1071 0328 88EE      		rcall touchbreak
 1073 032c 00D0      	.LM156:
 104:main.c        ****    
 105:main.c        ****    lcd_gotoxy(0,0);
 1074               	r24,lo8(0)
 1075               		ldi r22,lo8(0)
 1076 032e 80E0      		rcall lcd_gotoxy
 1078 0332 00D0      	.LM157:
 106:main.c        ****    lcd_string("left       ");
 1079               	r24,lo8(.LC6)
 1080               		ldi r25,hi8(.LC6)
 1081 0334 80E0      		rcall lcd_string
 1083 0338 00D0      	.LM158:
 107:main.c        ****   touchdetect();
 1084               	l bz
 1086 033a 00D0      	.LM159:
 108:main.c        ****    xaxis();yaxis();
 1087               	i r24,lo8(1000)
 1088               		ldi r25,hi8(1000)
 1089 033c 00D0      		rcall delayms
 109:main.c        ****    lx=xcod;ly=ycod;
 1091               	60:
 1092               		ldi r24,lo8(0)
 1093 0340 8091 0000 		ldi r22,lo8(0)
 1094 0344 8093 0000 		rcall lcd_gotoxy
 1096 034c 8093 0000 	.LM161:
 110:main.c        ****      touchbreak();
 1097               	24,lo8(.LC7)
 1098               		ldi r25,hi8(.LC7)
 1099 0350 00D0      		rcall lcd_string
 111:main.c        ****    lcd_gotoxy(0,0);
 1100               	tabn	68,0,118,.LM162-.LFBB20
 1101               	.LM162:
 1102 0352 80E0      		rcall touchdetect
 1104 0356 00D0      	.LM163:
 112:main.c        ****    lcd_string("left     ok");
 1105               	l xaxis
 1106               		rcall yaxis
 1108 035a 90E0      	.LM164:
 1109 035c 00D0      		lds r24,xcod
 113:main.c        ****     bz();
 1110               	rx,r24
 1111               		lds r24,ycod
 1112 035e 00D0      		sts ry,r24
 114:main.c        ****    delayms(1000);
 1113               	tabn	68,0,121,.LM165-.LFBB20
 1114               	.LM165:
 1115 0360 88EE      		rcall touchbreak
 1117 0364 00D0      	.LM166:
 115:main.c        ****    
 116:main.c        ****    lcd_gotoxy(0,0);
 1118               	r24,lo8(0)
 1119               		ldi r22,lo8(0)
 1120 0366 80E0      		rcall lcd_gotoxy
 1122 036a 00D0      	.LM167:
 117:main.c        ****    lcd_string("right      ");
 1123               	r24,lo8(.LC8)
 1124               		ldi r25,hi8(.LC8)
 1125 036c 80E0      		rcall lcd_string
 1127 0370 00D0      	.LM168:
 118:main.c        ****    touchdetect();
 1128               	l bz
 1130 0372 00D0      	.LM169:
 119:main.c        ****    xaxis();yaxis();
 1131               	i r24,lo8(1000)
 1132               		ldi r25,hi8(1000)
 1133 0374 00D0      		rcall delayms
 120:main.c        ****    rx=xcod;ry=ycod;
 1135               	70:
 1136               		ldi r24,lo8(0)
 1137 0378 8091 0000 		ldi r22,lo8(0)
 1138 037c 8093 0000 		rcall lcd_gotoxy
 1140 0384 8093 0000 	.LM171:
 121:main.c        ****      touchbreak();
 1141               	24,lo8(.LC9)
 1142               		ldi r25,hi8(.LC9)
 1143 0388 00D0      		rcall lcd_string
 122:main.c        ****    lcd_gotoxy(0,0);
 1144               	tabn	68,0,129,.LM172-.LFBB20
 1145               	.LM172:
 1146 038a 80E0      		rcall touchdetect
 1148 038e 00D0      	.LM173:
 123:main.c        ****    lcd_string("right    ok");
 1149               	l xaxis
 1150               		rcall yaxis
 1152 0392 90E0      	.LM174:
 1153 0394 00D0      		lds r24,xcod
 124:main.c        ****     bz();
 1154               	sx,r24
 1155               		lds r24,ycod
 1156 0396 00D0      		sts sy,r24
 125:main.c        ****    delayms(1000);
 1157               	tabn	68,0,132,.LM175-.LFBB20
 1158               	.LM175:
 1159 0398 88EE      		rcall touchbreak
 1161 039c 00D0      	.LM176:
 126:main.c        ****    
 127:main.c        ****    lcd_gotoxy(0,0);
 1162               	r24,lo8(0)
 1163               		ldi r22,lo8(0)
 1164 039e 80E0      		rcall lcd_gotoxy
 1166 03a2 00D0      	.LM177:
 128:main.c        ****    lcd_string("stop       ");
 1167               	r24,lo8(.LC10)
 1168               		ldi r25,hi8(.LC10)
 1169 03a4 80E0      		rcall lcd_string
 1171 03a8 00D0      	.LM178:
 129:main.c        ****    touchdetect();
 1172               	l bz
 1174 03aa 00D0      	.LM179:
 130:main.c        ****    xaxis();yaxis();
 1175               	i r24,lo8(1000)
 1176               		ldi r25,hi8(1000)
 1177 03ac 00D0      		rcall delayms
 131:main.c        ****    sx=xcod;sy=ycod;
 1179               	80:
 1180               		ldi r24,lo8(0)
 1181 03b0 8091 0000 		ldi r22,lo8(0)
 1182 03b4 8093 0000 		rcall lcd_gotoxy
 1184 03bc 8093 0000 	.LM181:
 132:main.c        ****     touchbreak();
 1185               	24,lo8(.LC11)
 1186               		ldi r25,hi8(.LC11)
 1187 03c0 00D0      		rcall lcd_string
 133:main.c        ****    lcd_gotoxy(0,0);
 1188               	epilogue start */
 1190 03c2 80E0      	.LM182:
 1191 03c4 60E0      		ret
 134:main.c        ****    lcd_string("stop     ok");
 1193               	pe20:
 1194               		.data
 1195 03c8 80E0      	.LC12:
 1196 03ca 90E0      		.string	"forward     "
 1197 03cc 00D0      	.LC13:
 135:main.c        ****     bz();
 1198               	ing	"backward    "
 1199               	.LC14:
 1200 03ce 00D0      		.string	"right     "
 136:main.c        ****    delayms(1000);
 1201               	15:
 1202               		.string	"stop      "
 1203 03d0 88EE      		.text
 1205 03d4 00D0      	.global	main
 137:main.c        ****     
 138:main.c        ****    lcd_gotoxy(0,0);
 1206               	e	main, @function
 1207               	main:
 1209 03d8 60E0      	.LM183:
 1210 03da 00D0      	.LFBB21:
 139:main.c        ****    lcd_string("cal      ok");
 1211               	ologue: function */
 1212               	/* frame size = 0 */
 1213 03dc 80E0      	.LBB4:
 1214 03de 90E0      	.LBB5:
 1216               	.Ltext7:
 140:main.c        ****    
 141:main.c        ****   }
 1217               	n	68,0,29,.LM184-.LFBB21
 1218               	.LM184:
 1219 03e2 0895      		ldi r24,lo8(-122)
 1220               		out 38-32,r24
 1221               	.LBE5:
 1222               	.LBE4:
 1224 0090 666F 7277 	.Ltext8:
 1224      6172 6420 
 1224      2020 2020 
 1224      00
 1226 009d 6261 636B 	.LM185:
 1226      7761 7264 
 1226      2020 2020 
 1226      00
 1227               		rcall lcd_init
 1229               	.LM186:
 1230 00b5 7374 6F70 		ldi r24,lo8(15)
 1230      2020 2020 
 1230      2020 00
 1231               		out 55-32,r24
 1233               	.LM187:
 1234               		rcall calibration
 1235               	.L91:
 142:main.c        ****   
 143:main.c        **** int main(void)
 144:main.c        ****  {
 1236               	M188-.LFBB21
 1237               	.LM188:
 1238               		rcall touchdetect
 1240               	.LM189:
 1241               		rcall xaxis
 1243               	.LM190:
 1244               		rcall yaxis
 1246               	.LM191:
 1247 03e4 86E8      		lds r24,fx
 1248 03e6 86B9      		mov r22,r24
 1249               		ldi r23,lo8(0)
 1250               		lds r24,xcod
 1251               		mov r26,r24
 1252               		ldi r27,lo8(0)
 145:main.c        ****  
 146:main.c        ****   
 147:main.c        ****  adc_init();
 148:main.c        ****  lcd_init();
 1253               	r18,r24
 1254               		ldi r19,lo8(0)
 1255 03e8 00D0      		lds r24,ycod
 149:main.c        ****  DDRB=0x0f;
 1256               	v r20,r24
 1257               		ldi r21,lo8(0)
 1258 03ea 8FE0      		ldi r30,lo8(0)
 1259 03ec 87BB      		ldi r31,hi8(0)
 150:main.c        ****  
 151:main.c        ****  calibration();
 1260               	w r24,r18
 1261               		sbiw r24,9
 1262 03ee 00D0      		cp r20,r24
 1263               		cpc r21,r25
 152:main.c        ****  
 153:main.c        ****   while(1)
 154:main.c        ****    {
 155:main.c        ****    
 156:main.c        ****    touchdetect();
 1264               	t .L64
 1265               		ldi r30,lo8(1)
 1266 03f0 00D0      		ldi r31,hi8(1)
 157:main.c        ****    xaxis();
 1267               	4:
 1268               		ldi r24,lo8(0)
 1269 03f2 00D0      		ldi r25,hi8(0)
 158:main.c        ****    yaxis();
 1270               	bi r18,lo8(-(9))
 1271               		sbci r19,hi8(-(9))
 1272 03f4 00D0      		cp r18,r20
 159:main.c        ****    
 160:main.c        ****    if((xcod<(fx+10))&(xcod>(fx-10))&(ycod<(fy+10))&(ycod>(fy-10)))
 1273               	c r19,r21
 1274               		brlt .L65
 1275 03f6 8091 0000 		ldi r24,lo8(1)
 1276 03fa 682F      		ldi r25,hi8(1)
 1277 03fc 70E0      	.L65:
 1278 03fe 8091 0000 		movw r18,r30
 1279 0402 A82F      		and r18,r24
 1280 0404 B0E0      		and r19,r25
 1281 0406 8091 0000 		ldi r20,lo8(0)
 1282 040a 282F      		movw r24,r22
 1283 040c 30E0      		adiw r24,9
 1284 040e 8091 0000 		cp r24,r26
 1285 0412 482F      		cpc r25,r27
 1286 0414 50E0      		brlt .L66
 1287 0416 E0E0      		ldi r20,lo8(1)
 1288 0418 F0E0      	.L66:
 1289 041a C901      		ldi r24,lo8(0)
 1290 041c 0997      		subi r22,lo8(-(-9))
 1291 041e 4817      		sbci r23,hi8(-(-9))
 1292 0420 5907      		cp r26,r22
 1293 0422 04F0      		cpc r27,r23
 1294 0424 E1E0      		brlt .L67
 1295 0426 F0E0      		ldi r24,lo8(1)
 1296               	.L67:
 1297 0428 80E0      		and r20,r24
 1298 042a 90E0      		mov r24,r20
 1299 042c 275F      		ldi r25,lo8(0)
 1300 042e 3F4F      		and r18,r24
 1301 0430 2417      		and r19,r25
 1302 0432 3507      		or r18,r19
 1303 0434 04F0      		breq .L63
 1305 0438 90E0      	.LM192:
 1306               		rcall touchbreak
 1308 043c 2823      	.LM193:
 1309 043e 3923      		rcall bz
 1311 0442 CB01      	.LM194:
 1312 0444 0996      		ldi r24,lo8(0)
 1313 0446 8A17      		ldi r22,lo8(0)
 1314 0448 9B07      		rcall lcd_gotoxy
 1316 044c 41E0      	.LM195:
 1317               		ldi r24,lo8(.LC12)
 1318 044e 80E0      		ldi r25,hi8(.LC12)
 1319 0450 6950      		rcall lcd_string
 1320 0452 7040      	.L63:
 1322 0456 B707      	.LM196:
 1323 0458 04F0      		lds r24,bx
 1324 045a 81E0      		mov r22,r24
 1325               		ldi r23,lo8(0)
 1326 045c 4823      		lds r24,xcod
 1327 045e 842F      		mov r26,r24
 1328 0460 90E0      		ldi r27,lo8(0)
 1329 0462 2823      		lds r24,by
 1330 0464 3923      		mov r18,r24
 1331 0466 232B      		ldi r19,lo8(0)
 1332 0468 01F0      		lds r24,ycod
 161:main.c        ****    {
 162:main.c        ****    touchbreak();
 1333               	
 1334               		movw r24,r18
 1335 046a 00D0      		sbiw r24,9
 163:main.c        **** 	bz();
 1336               	p r20,r24
 1337               		cpc r21,r25
 1338 046c 00D0      		brlt .L69
 164:main.c        ****     lcd_gotoxy(0,0);
 1339               	i r30,lo8(1)
 1340               		ldi r31,hi8(1)
 1341 046e 80E0      	.L69:
 1342 0470 60E0      		ldi r24,lo8(0)
 1343 0472 00D0      		ldi r25,hi8(0)
 165:main.c        **** 	lcd_string("forward     ");
 1344               	 r18,lo8(-(9))
 1345               		sbci r19,hi8(-(9))
 1346 0474 80E0      		cp r18,r20
 1347 0476 90E0      		cpc r19,r21
 1348 0478 00D0      		brlt .L70
 1349               		ldi r24,lo8(1)
 166:main.c        ****    }
 167:main.c        **** 	
 168:main.c        ****   if((xcod<(bx+10))&(xcod>(bx-10))&(ycod<(by+10))&(ycod>(by-10)))
 1350               	25,hi8(1)
 1351               	.L70:
 1352 047a 8091 0000 		movw r18,r30
 1353 047e 682F      		and r18,r24
 1354 0480 70E0      		and r19,r25
 1355 0482 8091 0000 		ldi r20,lo8(0)
 1356 0486 A82F      		movw r24,r22
 1357 0488 B0E0      		adiw r24,9
 1358 048a 8091 0000 		cp r24,r26
 1359 048e 282F      		cpc r25,r27
 1360 0490 30E0      		brlt .L71
 1361 0492 8091 0000 		ldi r20,lo8(1)
 1362 0496 482F      	.L71:
 1363 0498 50E0      		ldi r24,lo8(0)
 1364 049a E0E0      		subi r22,lo8(-(-9))
 1365 049c F0E0      		sbci r23,hi8(-(-9))
 1366 049e C901      		cp r26,r22
 1367 04a0 0997      		cpc r27,r23
 1368 04a2 4817      		brlt .L72
 1369 04a4 5907      		ldi r24,lo8(1)
 1370 04a6 04F0      	.L72:
 1371 04a8 E1E0      		and r20,r24
 1372 04aa F0E0      		mov r24,r20
 1373               		ldi r25,lo8(0)
 1374 04ac 80E0      		and r18,r24
 1375 04ae 90E0      		and r19,r25
 1376 04b0 275F      		or r18,r19
 1377 04b2 3F4F      		breq .L68
 1379 04b6 3507      	.LM197:
 1380 04b8 04F0      		rcall touchbreak
 1382 04bc 90E0      	.LM198:
 1383               		rcall bz
 1385 04c0 2823      	.LM199:
 1386 04c2 3923      		ldi r24,lo8(0)
 1387 04c4 40E0      		ldi r22,lo8(0)
 1388 04c6 CB01      		rcall lcd_gotoxy
 1390 04ca 8A17      	.LM200:
 1391 04cc 9B07      		ldi r24,lo8(.LC13)
 1392 04ce 04F0      		ldi r25,hi8(.LC13)
 1393 04d0 41E0      		rcall lcd_string
 1394               	.L68:
 1396 04d4 6950      	.LM201:
 1397 04d6 7040      		lds r24,lx
 1398 04d8 A617      		mov r22,r24
 1399 04da B707      		ldi r23,lo8(0)
 1400 04dc 04F0      		lds r24,xcod
 1401 04de 81E0      		mov r26,r24
 1402               		ldi r27,lo8(0)
 1403 04e0 4823      		lds r24,ly
 1404 04e2 842F      		mov r18,r24
 1405 04e4 90E0      		ldi r19,lo8(0)
 1406 04e6 2823      		lds r24,ycod
 1407 04e8 3923      		mov r20,r24
 1408 04ea 232B      		ldi r21,lo8(0)
 1409 04ec 01F0      		ldi r30,lo8(0)
 169:main.c        ****    {
 170:main.c        ****    touchbreak();
 1410               	21,r25
 1411               		brlt .L74
 1412 04ee 00D0      		ldi r30,lo8(1)
 171:main.c        **** 	bz();
 1413               	i r31,hi8(1)
 1414               	.L74:
 1415 04f0 00D0      		ldi r24,lo8(0)
 172:main.c        ****     lcd_gotoxy(0,0);
 1416               	i r25,hi8(0)
 1417               		subi r18,lo8(-(9))
 1418 04f2 80E0      		sbci r19,hi8(-(9))
 1419 04f4 60E0      		cp r18,r20
 1420 04f6 00D0      		cpc r19,r21
 173:main.c        **** 	lcd_string("backward    ");
 1421               	 .L75
 1422               		ldi r24,lo8(1)
 1423 04f8 80E0      		ldi r25,hi8(1)
 1424 04fa 90E0      	.L75:
 1425 04fc 00D0      		movw r18,r30
 1426               		and r18,r24
 174:main.c        ****    } 
 175:main.c        ****    
 176:main.c        ****    if((xcod<(lx+10))&(xcod>(lx-10))&(ycod<(ly+10))&(ycod>(ly-10)))
 1427               	19,r25
 1428               		ldi r20,lo8(0)
 1429 04fe 8091 0000 		movw r24,r22
 1430 0502 682F      		adiw r24,9
 1431 0504 70E0      		cp r24,r26
 1432 0506 8091 0000 		cpc r25,r27
 1433 050a A82F      		brlt .L76
 1434 050c B0E0      		ldi r20,lo8(1)
 1435 050e 8091 0000 	.L76:
 1436 0512 282F      		ldi r24,lo8(0)
 1437 0514 30E0      		subi r22,lo8(-(-9))
 1438 0516 8091 0000 		sbci r23,hi8(-(-9))
 1439 051a 482F      		cp r26,r22
 1440 051c 50E0      		cpc r27,r23
 1441 051e E0E0      		brlt .L77
 1442 0520 F0E0      		ldi r24,lo8(1)
 1443 0522 C901      	.L77:
 1444 0524 0997      		and r20,r24
 1445 0526 4817      		mov r24,r20
 1446 0528 5907      		ldi r25,lo8(0)
 1447 052a 04F0      		and r18,r24
 1448 052c E1E0      		and r19,r25
 1449 052e F0E0      		or r18,r19
 1450               		breq .L73
 1452 0532 90E0      	.LM202:
 1453 0534 275F      		rcall touchbreak
 1455 0538 2417      	.LM203:
 1456 053a 3507      		rcall bz
 1458 053e 81E0      	.LM204:
 1459 0540 90E0      		ldi r24,lo8(0)
 1460               		ldi r22,lo8(0)
 1461 0542 9F01      		rcall lcd_gotoxy
 1463 0546 3923      	.LM205:
 1464 0548 40E0      		ldi r24,lo8(.LC5)
 1465 054a CB01      		ldi r25,hi8(.LC5)
 1466 054c 0996      		rcall lcd_string
 1467 054e 8A17      	.L73:
 1469 0552 04F0      	.LM206:
 1470 0554 41E0      		lds r24,rx
 1471               		mov r22,r24
 1472 0556 80E0      		ldi r23,lo8(0)
 1473 0558 6950      		lds r24,xcod
 1474 055a 7040      		mov r26,r24
 1475 055c A617      		ldi r27,lo8(0)
 1476 055e B707      		lds r24,ry
 1477 0560 04F0      		mov r18,r24
 1478 0562 81E0      		ldi r19,lo8(0)
 1479               		lds r24,ycod
 1480 0564 4823      		mov r20,r24
 1481 0566 842F      		ldi r21,lo8(0)
 1482 0568 90E0      		ldi r30,lo8(0)
 1483 056a 2823      		ldi r31,hi8(0)
 1484 056c 3923      		movw r24,r18
 1485 056e 232B      		sbiw r24,9
 1486 0570 01F0      		cp r20,r24
 177:main.c        ****    {
 178:main.c        ****    touchbreak();
 1487               	:
 1488               		ldi r24,lo8(0)
 1489 0572 00D0      		ldi r25,hi8(0)
 179:main.c        **** 	bz();
 1490               	ycod
 1491               		mov r20,r24
 1492 0574 00D0      		ldi r21,lo8(0)
 180:main.c        ****     lcd_gotoxy(0,0);
 1493               	:
 1495 0576 80E0      	.LM206:
 1496 0578 60E0      		lds r24,rx
 1497 057a 00D0      		mov r22,r24
 181:main.c        **** 	lcd_string("left       ");
 1498               	4:
 1499               		ldi r24,lo8(0)
 1500 057c 80E0      		ldi r22,lo8(0)
 1501 057e 90E0      		rcall lcd_gotoxy
 1503               	.LM205:
 182:main.c        ****    } 
 183:main.c        ****    
 184:main.c        ****    if((xcod<(rx+10))&(xcod>(rx-10))&(ycod<(ry+10))&(ycod>(ry-10)))
 1504               	,0,178,.LM202-.LFBB21
 1505               	.LM202:
 1506 0582 8091 0000 		rcall touchbreak
 1508 0588 70E0      	.LM203:
 1509 058a 8091 0000 		rcall bz
 1511 0590 B0E0      	.LM204:
 1512 0592 8091 0000 		ldi r24,lo8(0)
 1513 0596 282F      		ldi r22,lo8(0)
 1514 0598 30E0      		rcall lcd_gotoxy
 1516 059e 482F      	.LM205:
 1517 05a0 50E0      		ldi r24,lo8(.LC5)
 1518 05a2 E0E0      		ldi r25,hi8(.LC5)
 1519 05a4 F0E0      		rcall lcd_string
 1520 05a6 C901      	.L73:
 1522 05aa 4817      	.LM206:
 1523 05ac 5907      		lds r24,rx
 1524 05ae 04F0      		mov r22,r24
 1525 05b0 E1E0      		ldi r23,lo8(0)
 1526 05b2 F0E0      		lds r24,xcod
 1527               		mov r26,r24
 1528 05b4 80E0      		ldi r27,lo8(0)
 1529 05b6 90E0      		lds r24,ry
 1530 05b8 275F      		mov r18,r24
 1531 05ba 3F4F      		ldi r19,lo8(0)
 1532 05bc 2417      		lds r24,ycod
 1533 05be 3507      		mov r20,r24
 1534 05c0 04F0      		ldi r21,lo8(0)
 1535 05c2 81E0      		ldi r30,lo8(0)
 1536 05c4 90E0      		ldi r31,hi8(0)
 1537               		movw r24,r18
 1538 05c6 9F01      		sbiw r24,9
 1539 05c8 2823      		cp r20,r24
 1540 05ca 3923      		cpc r21,r25
 1541 05cc 40E0      		brlt .L79
 1542 05ce CB01      		ldi r30,lo8(1)
 1543 05d0 0996      		ldi r31,hi8(1)
 1544 05d2 8A17      	.L79:
 1545 05d4 9B07      		ldi r24,lo8(0)
 1546 05d6 04F0      		ldi r25,hi8(0)
 1547 05d8 41E0      		subi r18,lo8(-(9))
 1548               		sbci r19,hi8(-(9))
 1549 05da 80E0      		cp r18,r20
 1550 05dc 6950      		cpc r19,r21
 1551 05de 7040      		brlt .L80
 1552 05e0 A617      		ldi r24,lo8(1)
 1553 05e2 B707      		ldi r25,hi8(1)
 1554 05e4 04F0      	.L80:
 1555 05e6 81E0      		movw r18,r30
 1556               		and r18,r24
 1557 05e8 4823      		and r19,r25
 1558 05ea 842F      		ldi r20,lo8(0)
 1559 05ec 90E0      		movw r24,r22
 1560 05ee 2823      		adiw r24,9
 1561 05f0 3923      		cp r24,r26
 1562 05f2 232B      		cpc r25,r27
 1563 05f4 01F0      		brlt .L81
 185:main.c        ****    {
 186:main.c        ****    touchbreak();
 1564               	
 1565               		cpc r19,r21
 1566 05f6 00D0      		brlt .L80
 187:main.c        **** 	bz();
 1567               	sbiw r24,9
 1568               		cp r20,r24
 1569 05f8 00D0      		cpc r21,r25
 188:main.c        ****     lcd_gotoxy(0,0);
 1570               	24,xcod
 1571               		mov r26,r24
 1572 05fa 80E0      		ldi r27,lo8(0)
 1573 05fc 60E0      		lds r24,ry
 1574 05fe 00D0      		mov r18,r24
 189:main.c        **** 	lcd_string("right     ");
 1575               	5:
 1576               		ldi r24,lo8(.LC5)
 1577 0600 80E0      		ldi r25,hi8(.LC5)
 1578 0602 90E0      		rcall lcd_string
 1579 0604 00D0      	.L73:
 190:main.c        ****    } 
 191:main.c        ****    
 192:main.c        ****    if((xcod<(sx+10))&(xcod>(sx-10))&(ycod<(sy+10))&(ycod>(sy-10)))
 1582               	.LM204:
 1583 0606 8091 0000 		ldi r24,lo8(0)
 1584 060a 682F      		ldi r22,lo8(0)
 1585 060c 70E0      		rcall lcd_gotoxy
 1587 0612 A82F      	.LM205:
 1588 0614 B0E0      		ldi r24,lo8(.LC5)
 1589 0616 8091 0000 		ldi r25,hi8(.LC5)
 1590 061a 282F      		rcall lcd_string
 1591 061c 30E0      	.L73:
 1593 0622 482F      	.LM206:
 1594 0624 50E0      		lds r24,rx
 1595 0626 E0E0      		mov r22,r24
 1596 0628 F0E0      		ldi r23,lo8(0)
 1597 062a C901      		lds r24,xcod
 1598 062c 0997      		mov r26,r24
 1599 062e 4817      		ldi r27,lo8(0)
 1600 0630 5907      		lds r24,ry
 1601 0632 04F0      		mov r18,r24
 1602 0634 E1E0      		ldi r19,lo8(0)
 1603 0636 F0E0      		lds r24,ycod
 1604               		mov r20,r24
 1605 0638 80E0      		ldi r21,lo8(0)
 1606 063a 90E0      		ldi r30,lo8(0)
 1607 063c 275F      		ldi r31,hi8(0)
 1608 063e 3F4F      		movw r24,r18
 1609 0640 2417      		sbiw r24,9
 1610 0642 3507      		cp r20,r24
 1611 0644 04F0      		cpc r21,r25
 1612 0646 81E0      		brlt .L79
 1613 0648 90E0      		ldi r30,lo8(1)
 1614               		ldi r31,hi8(1)
 1615 064a 9F01      	.L79:
 1616 064c 2823      		ldi r24,lo8(0)
 1617 064e 3923      		ldi r25,hi8(0)
 1618 0650 40E0      		subi r18,lo8(-(9))
 1619 0652 CB01      		sbci r19,hi8(-(9))
 1620 0654 0996      		cp r18,r20
 1621 0656 8A17      		cpc r19,r21
 1622 0658 9B07      		brlt .L80
 1623 065a 04F0      		ldi r24,lo8(1)
 1624 065c 41E0      		ldi r25,hi8(1)
 1625               	.L80:
 1626 065e 80E0      		movw r18,r30
 1627 0660 6950      		and r18,r24
 1628 0662 7040      		and r19,r25
 1629 0664 A617      		ldi r20,lo8(0)
 1630 0666 B707      		movw r24,r22
 1631 0668 04F0      		adiw r24,9
 1632 066a 81E0      		cp r24,r26
 1633               		cpc r25,r27
 1634 066c 4823      		brlt .L81
 1635 066e 842F      		ldi r20,lo8(1)
 1636 0670 90E0      	.L81:
 1637 0672 2823      		ldi r24,lo8(0)
 1638 0674 3923      		subi r22,lo8(-(-9))
 1639 0676 232B      		sbci r23,hi8(-(-9))
 1640 0678 01F4      		cp r26,r22
 1641 067a 00C0      		cpc r27,r23
 193:main.c        ****    {
 194:main.c        ****    touchbreak();
 1642               	lo8(0)
 1643               		movw r24,r22
 1644 067c 00D0      		adiw r24,9
 195:main.c        **** 	bz();
 1645               	8(-(9))
 1646               		sbci r19,hi8(-(9))
 1647 067e 00D0      		cp r18,r20
 196:main.c        ****     lcd_gotoxy(0,0);
 1648               	r31,hi8(0)
 1649               		movw r24,r18
 1650 0680 80E0      		sbiw r24,9
 1651 0682 60E0      		cp r20,r24
 1652 0684 00D0      		cpc r21,r25
 197:main.c        **** 	lcd_string("stop      ");
 1653               	24,xcod
 1654               		mov r26,r24
 1655 0686 80E0      		ldi r27,lo8(0)
 1656 0688 90E0      		lds r24,ry
 1657 068a 00D0      		mov r18,r24
 1658 068c 00C0      		ldi r19,lo8(0)
 1659               		lds r24,ycod
 1660               		mov r20,r24
 1661               		ldi r21,lo8(0)
 1662               		ldi r30,lo8(0)
 1663               		ldi r31,hi8(0)
 1664               		movw r24,r18
 1665               		sbiw r24,9
 1666               		cp r20,r24
 1667 0000 00        		cpc r21,r25
 1668               		brlt .L79
 1669               		ldi r30,lo8(1)
 1670               		ldi r31,hi8(1)
 1671               	.L79:
 1672               		ldi r24,lo8(0)
 1673 0001 00        		ldi r25,hi8(0)
 1674               		subi r18,lo8(-(9))
 1675               		sbci r19,hi8(-(9))
 1676               		cp r18,r20
 1677               		cpc r19,r21
 1678               		brlt .L80
 1679 0002 00        		ldi r24,lo8(1)
 1680               		ldi r25,hi8(1)
 1681               	.L80:
 1682               		movw r18,r30
 1683               		and r18,r24
 1684               		and r19,r25
 1685               		ldi r20,lo8(0)
 1686               		movw r24,r22
 1687               		adiw r24,9
 1688               		cp r24,r26
 1689               		cpc r25,r27
 1690               		brlt .L81
 1691               		ldi r20,lo8(1)
 1692               	.L81:
 1693               		ldi r24,lo8(0)
 1694               		subi r22,lo8(-(-9))
 1695               		sbci r23,hi8(-(-9))
 1696               		cp r26,r22
 1697               		cpc r27,r23
 1698               		brlt .L82
 1699               		ldi r24,lo8(1)
 1700               	.L82:
 1701               		and r20,r24
 1702               		mov r24,r20
 1703               		ldi r25,lo8(0)
 1704               		and r18,r24
 1705               		and r19,r25
 1706               		or r18,r19
 1707               		breq .L78
 1709               	.LM207:
 1710               		rcall touchbreak
 1712               	.LM208:
 1713               		rcall bz
 1715               	.LM209:
 1716               		ldi r24,lo8(0)
 1717               		ldi r22,lo8(0)
 1718               		rcall lcd_gotoxy
 1720               	.LM210:
 1721               		ldi r24,lo8(.LC14)
 1722               		ldi r25,hi8(.LC14)
 1723               		rcall lcd_string
 1724               	.L78:
 1726               	.LM211:
 1727               		lds r24,sx
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:2      *ABS*:0000003f __SREG__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:3      *ABS*:0000003e __SP_H__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:4      *ABS*:0000003d __SP_L__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:5      *ABS*:00000034 __CCP__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:71     .text:00000000 adc_init
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:93     .text:00000006 dely_ns
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:1666   .bss:00000000 k
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:1672   .bss:00000001 j
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:125    .text:00000020 latch
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:158    .text:00000030 lcd_cmd
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:206    .text:0000005e lcd_char
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:250    .text:00000080 lcd_string
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:330    .text:000000ce lcd_showvalue
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:403    .text:0000012c lcd_gotoxy
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:437    .text:00000144 delay_ms
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:483    .text:00000160 lcd_init
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:1678   .bss:00000002 save
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:537    .text:0000018e lcd_clear
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:557    .text:00000194 delayms
                            *COM*:00000002 delaycounter2
                            *COM*:00000002 delaycounter1
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:652    .text:000001ec getdata
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:690    .text:00000202 delayus
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:759    .text:00000230 xaxis
                            *COM*:00000001 xcod
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:799    .text:0000024e yaxis
                            *COM*:00000001 ycod
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:837    .text:0000026c touchdetect
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:870    .text:00000280 touchbreak
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:910    .text:0000029e bz
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:965    .text:000002ac calibration
                            *COM*:00000001 fx
                            *COM*:00000001 fy
                            *COM*:00000001 bx
                            *COM*:00000001 by
                            *COM*:00000001 lx
                            *COM*:00000001 ly
                            *COM*:00000001 rx
                            *COM*:00000001 ry
                            *COM*:00000001 sx
                            *COM*:00000001 sy
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccZH6656.s:1235   .text:000003e4 main
                            *COM*:00000002 adcdata
                            *COM*:00000002 adcdata1
                            *COM*:00000001 pxcod
                            *COM*:00000001 pycod
                            *COM*:00000001 dx
                            *COM*:00000001 dy

UNDEFINED SYMBOLS
__udivmodqi4
__divmodhi4
__do_copy_data
__do_clear_bss

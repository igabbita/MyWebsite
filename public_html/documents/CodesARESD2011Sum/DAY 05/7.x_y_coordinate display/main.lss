
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000037e  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800078  00800078  0000042a  2**0
                  ALLOC
  3 .stab         00000b04  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008b9  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ee e7       	ldi	r30, 0x7E	; 126
  3e:	f3 e0       	ldi	r31, 0x03	; 3
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	a8 37       	cpi	r26, 0x78	; 120
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a8 e7       	ldi	r26, 0x78	; 120
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a5 38       	cpi	r26, 0x85	; 133
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	38 d1       	rcall	.+624    	; 0x2ce <main>
  5e:	8d c1       	rjmp	.+794    	; 0x37a <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <adc_init>:
#include<avr/interrupt.h>			//header file for using interrupt service routins
unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  62:	86 e8       	ldi	r24, 0x86	; 134
  64:	86 b9       	out	0x06, r24	; 6
  		
 }
  66:	08 95       	ret

00000068 <dely_ns>:
dely_ns(200);  
PORTC&=~0x04;
}

void dely_ns(unsigned char tim)
{
  68:	20 91 78 00 	lds	r18, 0x0078
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	02 c0       	rjmp	.+4      	; 0x74 <dely_ns+0xc>
	for(j=0;j<tim;j++)
  70:	9f 5f       	subi	r25, 0xFF	; 255
  72:	2b e0       	ldi	r18, 0x0B	; 11
  74:	98 17       	cp	r25, r24
  76:	e0 f3       	brcs	.-8      	; 0x70 <dely_ns+0x8>
  78:	20 93 78 00 	sts	0x0078, r18
  7c:	90 93 79 00 	sts	0x0079, r25
	{
		for(k=0;k<11;k++)
		{};
	}
}
  80:	08 95       	ret

00000082 <latch>:
	delay_ms(20);
}

void latch(void)
{
PORTC&=~0x04;
  82:	aa 98       	cbi	0x15, 2	; 21
dely_ns(200);  
  84:	88 ec       	ldi	r24, 0xC8	; 200
  86:	f0 df       	rcall	.-32     	; 0x68 <dely_ns>
PORTC|=0x04;
  88:	aa 9a       	sbi	0x15, 2	; 21
dely_ns(200);  
  8a:	88 ec       	ldi	r24, 0xC8	; 200
  8c:	ed df       	rcall	.-38     	; 0x68 <dely_ns>
PORTC&=~0x04;
  8e:	aa 98       	cbi	0x15, 2	; 21
}
  90:	08 95       	ret

00000092 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	08 2f       	mov	r16, r24
	PORTC&=~0x07;
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	88 7f       	andi	r24, 0xF8	; 248
  9c:	85 bb       	out	0x15, r24	; 21
	PORTC=((cmd&0xF0));			
  9e:	80 2f       	mov	r24, r16
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	85 bb       	out	0x15, r24	; 21
	latch();
  a4:	ee df       	rcall	.-36     	; 0x82 <latch>
	PORTC=(((cmd&(0x0F))*16));	
  a6:	10 e0       	ldi	r17, 0x00	; 0
  a8:	0f 70       	andi	r16, 0x0F	; 15
  aa:	10 70       	andi	r17, 0x00	; 0
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	00 0f       	add	r16, r16
  b0:	11 1f       	adc	r17, r17
  b2:	8a 95       	dec	r24
  b4:	e1 f7       	brne	.-8      	; 0xae <lcd_cmd+0x1c>
  b6:	05 bb       	out	0x15, r16	; 21
	latch();
  b8:	e4 df       	rcall	.-56     	; 0x82 <latch>
}
  ba:	1f 91       	pop	r17
  bc:	0f 91       	pop	r16
  be:	08 95       	ret

000000c0 <lcd_char>:


void lcd_char(unsigned char single)
{
  c0:	1f 93       	push	r17
  c2:	18 2f       	mov	r17, r24
	PORTC=0x01;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	85 bb       	out	0x15, r24	; 21
	PORTC=0x00;
  c8:	15 ba       	out	0x15, r1	; 21
	PORTC=(single&0xF0)|0x01;						
  ca:	81 2f       	mov	r24, r17
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	85 bb       	out	0x15, r24	; 21
	latch();
  d2:	d7 df       	rcall	.-82     	; 0x82 <latch>
	PORTC=((single&(0x0F))*16)|0x01;
  d4:	12 95       	swap	r17
  d6:	10 7f       	andi	r17, 0xF0	; 240
  d8:	11 60       	ori	r17, 0x01	; 1
  da:	15 bb       	out	0x15, r17	; 21
	latch();
  dc:	d2 df       	rcall	.-92     	; 0x82 <latch>
}
  de:	1f 91       	pop	r17
  e0:	08 95       	ret

000000e2 <lcd_string>:

void lcd_string(unsigned char str[32])
{
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTC=0x01;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	85 bb       	out	0x15, r24	; 21
	PORTC=0X00;
  f2:	15 ba       	out	0x15, r1	; 21
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	10 c0       	rjmp	.+32     	; 0x118 <lcd_string+0x36>
		while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
  f8:	10 31       	cpi	r17, 0x10	; 16
  fa:	11 f4       	brne	.+4      	; 0x100 <lcd_string+0x1e>
				lcd_cmd(0XC0);
  fc:	80 ec       	ldi	r24, 0xC0	; 192
  fe:	c9 df       	rcall	.-110    	; 0x92 <lcd_cmd>
			PORTC=((str[k])&0xF0)|0x01;
 100:	88 81       	ld	r24, Y
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	81 60       	ori	r24, 0x01	; 1
 106:	85 bb       	out	0x15, r24	; 21
			latch();
 108:	bc df       	rcall	.-136    	; 0x82 <latch>
			PORTC=((str[k]&(0x0F))*16)|0x01;
 10a:	88 81       	ld	r24, Y
 10c:	82 95       	swap	r24
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	81 60       	ori	r24, 0x01	; 1
 112:	85 bb       	out	0x15, r24	; 21
			latch();
 114:	b6 df       	rcall	.-148    	; 0x82 <latch>
			k++;
 116:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTC=0x01;
	PORTC=0X00;
		while(str[k]!='\0')	//Till null character is encountered
 118:	e7 01       	movw	r28, r14
 11a:	c1 0f       	add	r28, r17
 11c:	d1 1d       	adc	r29, r1
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	51 f7       	brne	.-44     	; 0xf8 <lcd_string+0x16>
			latch();
			PORTC=((str[k]&(0x0F))*16)|0x01;
			latch();
			k++;
		}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	ff 90       	pop	r15
 12c:	ef 90       	pop	r14
 12e:	08 95       	ret

00000130 <lcd_showvalue>:


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 13a:	64 e6       	ldi	r22, 0x64	; 100
 13c:	eb d0       	rcall	.+470    	; 0x314 <__udivmodqi4>
 13e:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 140:	28 2f       	mov	r18, r24
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	8c e9       	ldi	r24, 0x9C	; 156
 146:	9f ef       	ldi	r25, 0xFF	; 255
 148:	28 9f       	mul	r18, r24
 14a:	70 01       	movw	r14, r0
 14c:	29 9f       	mul	r18, r25
 14e:	f0 0c       	add	r15, r0
 150:	38 9f       	mul	r19, r24
 152:	f0 0c       	add	r15, r0
 154:	11 24       	eor	r1, r1
 156:	c7 01       	movw	r24, r14
 158:	81 0f       	add	r24, r17
 15a:	91 1d       	adc	r25, r1
 15c:	6a e0       	ldi	r22, 0x0A	; 10
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	e5 d0       	rcall	.+458    	; 0x32c <__divmodhi4>
 162:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 164:	84 2f       	mov	r24, r20
 166:	80 5d       	subi	r24, 0xD0	; 208
 168:	ab df       	rcall	.-170    	; 0xc0 <lcd_char>
	lcd_char(T+48);
 16a:	80 2f       	mov	r24, r16
 16c:	80 5d       	subi	r24, 0xD0	; 208
 16e:	a8 df       	rcall	.-176    	; 0xc0 <lcd_char>
	lcd_char(O+48);
 170:	10 5d       	subi	r17, 0xD0	; 208
 172:	1e 0d       	add	r17, r14
 174:	86 ef       	ldi	r24, 0xF6	; 246
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	08 9f       	mul	r16, r24
 17a:	00 2d       	mov	r16, r0
 17c:	11 24       	eor	r1, r1
 17e:	80 2f       	mov	r24, r16
 180:	81 0f       	add	r24, r17
 182:	9e df       	rcall	.-196    	; 0xc0 <lcd_char>
}
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	08 95       	ret

0000018e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
{
   if(row==0)
 18e:	88 23       	and	r24, r24
 190:	21 f4       	brne	.+8      	; 0x19a <lcd_gotoxy+0xc>
    {
	 lcd_cmd(0x80+column);
 192:	86 2f       	mov	r24, r22
 194:	80 58       	subi	r24, 0x80	; 128
 196:	7d df       	rcall	.-262    	; 0x92 <lcd_cmd>
 198:	08 95       	ret
	}
   else if(row==1)
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	19 f4       	brne	.+6      	; 0x1a4 <lcd_gotoxy+0x16>
	{
	 lcd_cmd(0xC0+column);	
 19e:	86 2f       	mov	r24, r22
 1a0:	80 54       	subi	r24, 0x40	; 64
 1a2:	77 df       	rcall	.-274    	; 0x92 <lcd_cmd>
 1a4:	08 95       	ret

000001a6 <delay_ms>:
	}	
}


void delay_ms(unsigned int ms)
{
 1a6:	0a c0       	rjmp	.+20     	; 0x1bc <delay_ms+0x16>
	int i;

	while (ms-- > 0)
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
 1ac:	00 00       	nop
	int i;

	while (ms-- > 0)
	{
		
		for (i = 0; i < 3276; ++i)
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	4c e0       	ldi	r20, 0x0C	; 12
 1b4:	2c 3c       	cpi	r18, 0xCC	; 204
 1b6:	34 07       	cpc	r19, r20
 1b8:	c9 f7       	brne	.-14     	; 0x1ac <delay_ms+0x6>
 1ba:	01 97       	sbiw	r24, 0x01	; 1

void delay_ms(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	a1 f7       	brne	.-24     	; 0x1a8 <delay_ms+0x2>
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 1c0:	08 95       	ret

000001c2 <lcd_init>:
void delay_ms(unsigned int ms);
void lcd_clear();

void lcd_init(void)	//init the lcd
{	
	delay_ms(20);
 1c2:	84 e1       	ldi	r24, 0x14	; 20
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	ef df       	rcall	.-34     	; 0x1a6 <delay_ms>
	save=PORTC;
 1c8:	85 b3       	in	r24, 0x15	; 21
 1ca:	80 93 7a 00 	sts	0x007A, r24
	DDRC=0xFF;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	84 bb       	out	0x14, r24	; 20
	delay_ms(15);
 1d2:	8f e0       	ldi	r24, 0x0F	; 15
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	e7 df       	rcall	.-50     	; 0x1a6 <delay_ms>
	PORTC=0x20;			//interface setup		
 1d8:	80 e2       	ldi	r24, 0x20	; 32
 1da:	85 bb       	out	0x15, r24	; 21
	lcd_cmd(0x01);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	59 df       	rcall	.-334    	; 0x92 <lcd_cmd>
	lcd_cmd(0x02);
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	57 df       	rcall	.-338    	; 0x92 <lcd_cmd>
	lcd_cmd(0X80);
 1e4:	80 e8       	ldi	r24, 0x80	; 128
 1e6:	55 df       	rcall	.-342    	; 0x92 <lcd_cmd>
	delay_ms(20);
 1e8:	84 e1       	ldi	r24, 0x14	; 20
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	dc df       	rcall	.-72     	; 0x1a6 <delay_ms>
}
 1ee:	08 95       	ret

000001f0 <lcd_clear>:
	}
}

void lcd_clear()
{
 lcd_cmd(0x01);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	4f df       	rcall	.-354    	; 0x92 <lcd_cmd>
}
 1f4:	08 95       	ret

000001f6 <delayms>:
*/
#ifndef _DELAY_H_
#define _DELAY_H_
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{
 1f6:	20 91 7f 00 	lds	r18, 0x007F
 1fa:	30 91 80 00 	lds	r19, 0x0080
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	16 c0       	rjmp	.+44     	; 0x230 <delayms+0x3a>
	...
	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
		  {
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
 220:	63 e0       	ldi	r22, 0x03	; 3
 222:	22 32       	cpi	r18, 0x22	; 34
 224:	36 07       	cpc	r19, r22
 226:	71 f7       	brne	.-36     	; 0x204 <delayms+0xe>
 228:	4f 5f       	subi	r20, 0xFF	; 255
 22a:	5f 4f       	sbci	r21, 0xFF	; 255
 22c:	21 e2       	ldi	r18, 0x21	; 33
 22e:	33 e0       	ldi	r19, 0x03	; 3
#define _DELAY_H_
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 230:	84 17       	cp	r24, r20
 232:	95 07       	cpc	r25, r21
 234:	18 f0       	brcs	.+6      	; 0x23c <delayms+0x46>
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	f0 cf       	rjmp	.-32     	; 0x21c <delayms+0x26>
 23c:	30 93 80 00 	sts	0x0080, r19
 240:	20 93 7f 00 	sts	0x007F, r18
 244:	50 93 82 00 	sts	0x0082, r21
 248:	40 93 81 00 	sts	0x0081, r20
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  }
		
	 }
}
 24c:	08 95       	ret

0000024e <getdata>:
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 24e:	90 e6       	ldi	r25, 0x60	; 96
 250:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
 252:	97 b1       	in	r25, 0x07	; 7
 254:	98 2b       	or	r25, r24
 256:	97 b9       	out	0x07, r25	; 7
    ADCSRA|=0X40;					//start ADC convertion
 258:	36 9a       	sbi	0x06, 6	; 6
    delayms(1);					//give some time delay to complit the aDC convertion
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	cb df       	rcall	.-106    	; 0x1f6 <delayms>
	return ADCH;
 260:	85 b1       	in	r24, 0x05	; 5
  }
 262:	08 95       	ret

00000264 <delayus>:

void delayus(unsigned int delaytime)
{
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	0c c0       	rjmp	.+24     	; 0x282 <delayus+0x1e>
	...

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
 27e:	2f 5f       	subi	r18, 0xFF	; 255
 280:	3f 4f       	sbci	r19, 0xFF	; 255
}

void delayus(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 282:	82 17       	cp	r24, r18
 284:	93 07       	cpc	r25, r19
 286:	88 f7       	brcc	.-30     	; 0x26a <delayus+0x6>
 288:	30 93 82 00 	sts	0x0082, r19
 28c:	20 93 81 00 	sts	0x0081, r18
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
	 }
}
 290:	08 95       	ret

00000292 <xaxis>:

unsigned char xcod,ycod;

void xaxis()                      	//for reading X cordinate
 {
  DDRA=0x0A;						
 292:	8a e0       	ldi	r24, 0x0A	; 10
 294:	8a bb       	out	0x1a, r24	; 26
  PORTA=0x08;
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	8b bb       	out	0x1b, r24	; 27
  delayus(100);
 29a:	84 e6       	ldi	r24, 0x64	; 100
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	e2 df       	rcall	.-60     	; 0x264 <delayus>
  xcod=getdata(2);
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	d5 df       	rcall	.-86     	; 0x24e <getdata>
 2a4:	80 93 7e 00 	sts	0x007E, r24
  delayus(100);
 2a8:	84 e6       	ldi	r24, 0x64	; 100
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	db df       	rcall	.-74     	; 0x264 <delayus>
 }
 2ae:	08 95       	ret

000002b0 <yaxis>:
 
void yaxis() 						//for reading Y coordinate
 {
  DDRA=0x05;
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	8a bb       	out	0x1a, r24	; 26
  PORTA=0x01;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	8b bb       	out	0x1b, r24	; 27
  delayus(100);
 2b8:	84 e6       	ldi	r24, 0x64	; 100
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	d3 df       	rcall	.-90     	; 0x264 <delayus>
  ycod=getdata(3);
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	c6 df       	rcall	.-116    	; 0x24e <getdata>
 2c2:	80 93 7b 00 	sts	0x007B, r24
  delayus(100);
 2c6:	84 e6       	ldi	r24, 0x64	; 100
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	cc df       	rcall	.-104    	; 0x264 <delayus>
 }
 2cc:	08 95       	ret

000002ce <main>:
 
 
int main(void)
 {
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
#include<avr/interrupt.h>			//header file for using interrupt service routins
unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 2d2:	86 e8       	ldi	r24, 0x86	; 134
 2d4:	86 b9       	out	0x06, r24	; 6
 
  
 adc_init();					//initialization of ADC
 lcd_init();
 2d6:	75 df       	rcall	.-278    	; 0x1c2 <lcd_init>
 lcd_string("Touch screen");
 2d8:	80 e6       	ldi	r24, 0x60	; 96
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 df       	rcall	.-508    	; 0xe2 <lcd_string>
  while(1)
   {
   DDRA=0x05;					//touch detect setup
 2de:	05 e0       	ldi	r16, 0x05	; 5
   PORTA=0x08;
 2e0:	18 e0       	ldi	r17, 0x08	; 8
 adc_init();					//initialization of ADC
 lcd_init();
 lcd_string("Touch screen");
  while(1)
   {
   DDRA=0x05;					//touch detect setup
 2e2:	0a bb       	out	0x1a, r16	; 26
   PORTA=0x08;
 2e4:	1b bb       	out	0x1b, r17	; 27
   delayus(100);
 2e6:	84 e6       	ldi	r24, 0x64	; 100
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	bc df       	rcall	.-136    	; 0x264 <delayus>
   while((PINA & 0x02)==0x02);//touch detect check
 2ec:	c9 99       	sbic	0x19, 1	; 25
 2ee:	fe cf       	rjmp	.-4      	; 0x2ec <main+0x1e>
   
   xaxis();
 2f0:	d0 df       	rcall	.-96     	; 0x292 <xaxis>
   yaxis();
 2f2:	de df       	rcall	.-68     	; 0x2b0 <yaxis>
   lcd_gotoxy(1,1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	4a df       	rcall	.-364    	; 0x18e <lcd_gotoxy>
   lcd_string("X-");
 2fa:	8d e6       	ldi	r24, 0x6D	; 109
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	f1 de       	rcall	.-542    	; 0xe2 <lcd_string>
   lcd_showvalue(xcod);
 300:	80 91 7e 00 	lds	r24, 0x007E
 304:	15 df       	rcall	.-470    	; 0x130 <lcd_showvalue>
   lcd_string("    Y-");
 306:	80 e7       	ldi	r24, 0x70	; 112
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	eb de       	rcall	.-554    	; 0xe2 <lcd_string>
   lcd_showvalue(ycod);
 30c:	80 91 7b 00 	lds	r24, 0x007B
 310:	0f df       	rcall	.-482    	; 0x130 <lcd_showvalue>
 312:	e7 cf       	rjmp	.-50     	; 0x2e2 <main+0x14>

00000314 <__udivmodqi4>:
 314:	99 1b       	sub	r25, r25
 316:	79 e0       	ldi	r23, 0x09	; 9
 318:	04 c0       	rjmp	.+8      	; 0x322 <__udivmodqi4_ep>

0000031a <__udivmodqi4_loop>:
 31a:	99 1f       	adc	r25, r25
 31c:	96 17       	cp	r25, r22
 31e:	08 f0       	brcs	.+2      	; 0x322 <__udivmodqi4_ep>
 320:	96 1b       	sub	r25, r22

00000322 <__udivmodqi4_ep>:
 322:	88 1f       	adc	r24, r24
 324:	7a 95       	dec	r23
 326:	c9 f7       	brne	.-14     	; 0x31a <__udivmodqi4_loop>
 328:	80 95       	com	r24
 32a:	08 95       	ret

0000032c <__divmodhi4>:
 32c:	97 fb       	bst	r25, 7
 32e:	09 2e       	mov	r0, r25
 330:	07 26       	eor	r0, r23
 332:	0a d0       	rcall	.+20     	; 0x348 <__divmodhi4_neg1>
 334:	77 fd       	sbrc	r23, 7
 336:	04 d0       	rcall	.+8      	; 0x340 <__divmodhi4_neg2>
 338:	0c d0       	rcall	.+24     	; 0x352 <__udivmodhi4>
 33a:	06 d0       	rcall	.+12     	; 0x348 <__divmodhi4_neg1>
 33c:	00 20       	and	r0, r0
 33e:	1a f4       	brpl	.+6      	; 0x346 <__divmodhi4_exit>

00000340 <__divmodhi4_neg2>:
 340:	70 95       	com	r23
 342:	61 95       	neg	r22
 344:	7f 4f       	sbci	r23, 0xFF	; 255

00000346 <__divmodhi4_exit>:
 346:	08 95       	ret

00000348 <__divmodhi4_neg1>:
 348:	f6 f7       	brtc	.-4      	; 0x346 <__divmodhi4_exit>
 34a:	90 95       	com	r25
 34c:	81 95       	neg	r24
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	08 95       	ret

00000352 <__udivmodhi4>:
 352:	aa 1b       	sub	r26, r26
 354:	bb 1b       	sub	r27, r27
 356:	51 e1       	ldi	r21, 0x11	; 17
 358:	07 c0       	rjmp	.+14     	; 0x368 <__udivmodhi4_ep>

0000035a <__udivmodhi4_loop>:
 35a:	aa 1f       	adc	r26, r26
 35c:	bb 1f       	adc	r27, r27
 35e:	a6 17       	cp	r26, r22
 360:	b7 07       	cpc	r27, r23
 362:	10 f0       	brcs	.+4      	; 0x368 <__udivmodhi4_ep>
 364:	a6 1b       	sub	r26, r22
 366:	b7 0b       	sbc	r27, r23

00000368 <__udivmodhi4_ep>:
 368:	88 1f       	adc	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	5a 95       	dec	r21
 36e:	a9 f7       	brne	.-22     	; 0x35a <__udivmodhi4_loop>
 370:	80 95       	com	r24
 372:	90 95       	com	r25
 374:	bc 01       	movw	r22, r24
 376:	cd 01       	movw	r24, r26
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>

   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  69               	.global	adc_init
  71               	adc_init:
  73               	.Ltext1:
   1:adc.h         **** 
   2:adc.h         **** /***********************************************************************
   3:adc.h         **** 
   4:adc.h         **** Headerfile for make ADC convertion
   5:adc.h         **** 
   6:adc.h         **** ***********************************************************************
   7:adc.h         **** 
   8:adc.h         **** *COPYRIGHT(c) Technophilia.
   9:adc.h         **** 
  10:adc.h         **** //*Author:Technophilia
  11:adc.h         **** 
  12:adc.h         **** //*compiler:winavr
  13:adc.h         **** 
  14:adc.h         **** //************************************************************//**//*********//*	adc.h
  15:adc.h         **** //Technophilia embedded systems
  16:adc.h         **** 
  17:adc.h         **** */
  18:adc.h         **** 
  19:adc.h         **** #ifndef _ADC_H_
  20:adc.h         **** #define _ADC_H_						//This is the header for AVR Microcontroller.
  21:adc.h         **** #include<avr/io.h>
  22:adc.h         **** #include<technophilia/delay.h>		//header file for genarating time delay
  23:adc.h         **** #include<technophilia/lcd.h>		//headerfile for interfacing LCD
  24:adc.h         **** #include<avr/interrupt.h>			//header file for using interrupt service routins
  25:adc.h         **** unsigned int adcdata,adcdata1;
  26:adc.h         **** 
  27:adc.h         ****  void adc_init()
  28:adc.h         ****  {
  74               	me size = 0 */
  76               	.LM1:
  77               		ldi r24,lo8(-122)
  78               		out 38-32,r24
  29:adc.h         ****   ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  79               	ilogue start */
  81 0000 86E8      	.LM2:
  82 0002 86B9      		ret
  30:adc.h         ****   		
  31:adc.h         ****  }
  84               	pe1:
  87               	.global	dely_ns
  89               	dely_ns:
  91               	.Ltext2:
  93               	.LM3:
  94               	.LFBB2:
  95               	/* prologue: function */
   1:lcd.h         **** /*	LCD.h
   2:lcd.h         **** Technophilia embedded systems
   3:lcd.h         **** 
   4:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
   5:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
   6:lcd.h         **** 	calling any other functions to initialize the lcd.
   7:lcd.h         **** 
   8:lcd.h         **** 
   9:lcd.h         **** 	lcd_init() ----- Call the lcd_init() function before calling any other functions
  10:lcd.h         **** 			  to initialize the lcd.
  11:lcd.h         **** 	lcd_cmd() ------ This function is used to give any command instructions to the
  12:lcd.h         **** 			  LCD. For e.g lcd_cmd(0x01) will give the clear command.
  13:lcd.h         **** 	lcd_char() ----- This function will display a single character on the LCD display.
  14:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
  15:lcd.h         **** 			  will display b.
  16:lcd.h         **** 	lcd_string()---- This function will display a string. An example of this would be
  17:lcd.h         **** 			  like lcd_string("This is AVR")
  18:lcd.h         **** 	lcd_showvalue()- This will show a 3-digit decimal value on the LCD. For example if
  19:lcd.h         **** 			  we give lcd_showvalue(0xFF) then 255 will be displayed.
  20:lcd.h         **** 	lcd_gotoxy()--- Will set the cursor at a particular position on of the LCD.
  21:lcd.h         **** 			  So lcd_gotoxy(1,4) will set the cursor at the 2d row 3rd column
  22:lcd.h         **** 			  row and column address are starts from(0,0)
  23:lcd.h         **** 	lcd_clear()---To clear the LCD
  24:lcd.h         **** 	
  25:lcd.h         **** */
  26:lcd.h         **** 
  27:lcd.h         **** #ifndef _LCD_H_
  28:lcd.h         **** #define _LCD_H_
  29:lcd.h         **** 
  30:lcd.h         **** 
  31:lcd.h         **** unsigned char k=0,j=0;
  32:lcd.h         **** unsigned char save=0;
  33:lcd.h         **** 
  34:lcd.h         **** void lcd_init(void);
  35:lcd.h         **** void lcd_cmd(unsigned char cmd);
  36:lcd.h         **** void latch(void);
  37:lcd.h         **** void dely_ns(unsigned char tim);
  38:lcd.h         **** void lcd_char(unsigned char single);
  39:lcd.h         **** void lcd_string(unsigned char str[32]);
  40:lcd.h         **** void lcd_showvalue(unsigned char num);
  41:lcd.h         **** void lcd_gotoxy(unsigned char row,unsigned char column);
  42:lcd.h         **** void delay_ms(unsigned int ms);
  43:lcd.h         **** void lcd_clear();
  44:lcd.h         **** 
  45:lcd.h         **** void lcd_init(void)	//init the lcd
  46:lcd.h         **** {	
  47:lcd.h         **** 	delay_ms(20);
  48:lcd.h         **** 	save=PORTC;
  49:lcd.h         **** 	DDRC=0xFF;
  50:lcd.h         **** 	delay_ms(15);
  51:lcd.h         **** 	PORTC=0x20;			//interface setup		
  52:lcd.h         **** 	lcd_cmd(0x01);
  53:lcd.h         **** 	lcd_cmd(0x02);
  54:lcd.h         **** 	lcd_cmd(0X80);
  55:lcd.h         **** 	delay_ms(20);
  56:lcd.h         **** }
  57:lcd.h         **** 
  58:lcd.h         **** void latch(void)
  59:lcd.h         **** {
  60:lcd.h         **** PORTC&=~0x04;
  61:lcd.h         **** dely_ns(200);  
  62:lcd.h         **** PORTC|=0x04;
  63:lcd.h         **** dely_ns(200);  
  64:lcd.h         **** PORTC&=~0x04;
  65:lcd.h         **** }
  66:lcd.h         **** 
  67:lcd.h         **** void dely_ns(unsigned char tim)
  68:lcd.h         **** {
  96               	e = 0 */
  98               	.LM4:
  99               		lds r18,k
 100               		ldi r25,lo8(0)
 101               		rjmp .L4
 102               	.L5:
 104 000a 90E0      	.LM5:
 105 000c 00C0      		subi r25,lo8(-(1))
 106               		ldi r18,lo8(11)
  69:lcd.h         **** 0);  
 107               	5,r24
 108               		brlo .L5
 109 000e 9F5F      		sts k,r18
 110 0010 2BE0      		sts j,r25
 111               	/* epilogue start */
 113 0014 00F0      	.LM6:
 114 0016 2093 0000 		ret
 116               	.Lscope2:
  70:lcd.h         **** md(0x02);
  71:lcd.h         **** 	lcd_cmd(0X80);
  72:lcd.h         **** 	delay_ms(20);
  73:lcd.h         **** }
  74:lcd.h         **** 
 117               	atch:F(0,15)",36,0,0,latch
 118               	.global	latch
 120               	latch:
 122               	.LM7:
 123               	.LFBB3:
 124               	/* prologue: function */
 125               	/* frame size = 0 */
 127               	.LM8:
 128               		cbi 53-32,2
 130               	.LM9:
 131               		ldi r24,lo8(-56)
 132               		rcall dely_ns
 134               	.LM10:
 135               		sbi 53-32,2
 137 0024 00D0      	.LM11:
 138               		ldi r24,lo8(-56)
 139               		rcall dely_ns
 141               	.LM12:
 142               		cbi 53-32,2
 143 0028 88EC      	/* epilogue start */
 145               	.LM13:
 146               		ret
 148               	.Lscope3:
 151 002e 0895      	.global	lcd_cmd
 153               	lcd_cmd:
 155               	.LM14:
 156               	.LFBB4:
 157               		push r16
 158               		push r17
  75:lcd.h         **** TC=0x20;			//interface setup		
  76:lcd.h         **** 	lcd_cmd(0x01);
  77:lcd.h         **** 	lcd_cmd(0x02);
 159               	 */
 160               		mov r16,r24
 162 0030 0F93      	.LM15:
 163 0032 1F93      		in r24,53-32
 164               		andi r24,lo8(-8)
 165               		out 53-32,r24
  78:lcd.h         **** PORTC;
 167               	mov r24,r16
 168               		andi r24,lo8(-16)
 169 0036 85B3      		out 53-32,r24
 171 003a 85BB      	.LM17:
  79:lcd.h         **** ms(unsigned int ms);
 172               	l latch
 174 003c 802F      	.LM18:
 175 003e 807F      		ldi r17,lo8(0)
 176 0040 85BB      		andi r16,lo8(15)
  80:lcd.h         **** ue(unsigned char num);
 177               	 r17,hi8(15)
 178               		ldi r24,4
 179 0042 00D0      	1:	lsl r16
  81:lcd.h         **** id lcd_char(unsigned char single);
 180               	l r17
 181               		dec r24
 182 0044 10E0      		brne 1b
 183 0046 0F70      		out 53-32,r16
 185 004a 84E0      	.LM19:
 186 004c 000F      		rcall latch
 187 004e 111F      	/* epilogue start */
 189 0052 01F4      	.LM20:
 190 0054 05BB      		pop r17
  82:lcd.h         **** lcd_cmd(unsigned char cmd);
 191               	et
 193 0056 00D0      	.Lscope4:
  83:lcd.h         **** 
 195               	abs	"single:P(0,11)",64,0,0,17
 196               	.global	lcd_char
 198 005a 0F91      	lcd_char:
 200               	.LM21:
 201               	.LFBB5:
 202               		push r17
 203               	/* prologue: function */
 204               	/* frame size = 0 */
 205               		mov r17,r24
  84:lcd.h         ****  the 2d row 3rd column
  85:lcd.h         **** 			  row and column address are starts from(0,0)
  86:lcd.h         **** 	lcd_clear()---To clear the LCD
  87:lcd.h         **** 	
 207               	r24,lo8(1)
 208               		out 53-32,r24
 210 005e 1F93      	.LM23:
 211               		out 53-32,__zero_reg__
 213 0060 182F      	.LM24:
  88:lcd.h         ****  will set the cursor at the 2d row 3rd column
 214               	4,r17
 215               		andi r24,lo8(-16)
 216 0062 81E0      		ori r24,lo8(1)
 217 0064 85BB      		out 53-32,r24
  89:lcd.h         **** -- Will set the cursor at a particular position on of the LCD.
 218               	abn	68,0,91,.LM25-.LFBB5
 219               	.LM25:
 220 0066 15BA      		rcall latch
  90:lcd.h         **** we give lcd_showvalue(0xFF) then 255 will be displayed.
 221               	tabn	68,0,92,.LM26-.LFBB5
 222               	.LM26:
 223 0068 812F      		swap r17
 224 006a 807F      		andi r17,lo8(-16)
 225 006c 8160      		ori r17,lo8(1)
 226 006e 85BB      		out 53-32,r17
  91:lcd.h         **** lue()- This will show a 3-digit decimal value on the LCD. For example if
 227               	n	68,0,93,.LM27-.LFBB5
 228               	.LM27:
 229 0070 00D0      		rcall latch
  92:lcd.h         ****  this would be
 230               	epilogue start */
 232 0072 1295      	.LM28:
 233 0074 107F      		pop r17
 234 0076 1160      		ret
  93:lcd.h         **** l display A. Again lcd_char('b')
 236               	e5:
 239               	.global	lcd_string
  94:lcd.h         **** ---- This function will display a single character on the LCD display.
 240               	pe	lcd_string, @function
 241               	lcd_string:
 243 007e 0895      	.LM29:
 244               	.LFBB6:
 245               		push r14
 246               		push r15
 247               		push r17
 248               		push r28
 249               		push r29
 250               	/* prologue: function */
  95:lcd.h         **** LCD. For e.g lcd_cmd(0x01) will give the clear command.
  96:lcd.h         **** 	lcd_char() ----- This function will display a single character on the LCD display.
  97:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
 251               	ze = 0 */
 252               		movw r14,r24
 254 0080 EF92      	.LM30:
 255 0082 FF92      		ldi r24,lo8(1)
 256 0084 1F93      		out 53-32,r24
 258 0088 DF93      	.LM31:
 259               		out 53-32,__zero_reg__
 260               		ldi r17,lo8(0)
 261 008a 7C01      		rjmp .L14
  98:lcd.h         **** ---- This function will display a single character on the LCD display.
  99:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
 262               	bn	68,0,103,.LM32-.LFBB6
 263               	.LM32:
 264 008c 81E0      		cpi r17,lo8(16)
 265 008e 85BB      		brne .L15
 100:lcd.h         **** ---- This function will display a single character on the LCD display.
 266               	abn	68,0,104,.LM33-.LFBB6
 267               	.LM33:
 268 0090 15BA      		ldi r24,lo8(-64)
 269 0092 10E0      		rcall lcd_cmd
 270 0094 00C0      	.L15:
 101:lcd.h         **** LCD. For e.g lcd_cmd(0x01) will give the clear command.
 102:lcd.h         **** 	lcd_char() ----- This function will display a single character on the LCD display.
 103:lcd.h         **** 			  For example lcd_char(0x61) will display A. Again lcd_char('b')
 272               	
 273               		ld r24,Y
 274 0096 1031      		andi r24,lo8(-16)
 275 0098 01F4      		ori r24,lo8(1)
 104:lcd.h         **** ---- This function will display a single character on the LCD display.
 276               	t 53-32,r24
 278 009a 80EC      	.LM35:
 279 009c 00D0      		rcall latch
 105:lcd.h         **** LCD. For e.g lcd_cmd(0x01) will give the clear command.
 281               	:
 282               		ld r24,Y
 283 009e 8881      		swap r24
 284 00a0 807F      		andi r24,lo8(-16)
 285 00a2 8160      		ori r24,lo8(1)
 286 00a4 85BB      		out 53-32,r24
 106:lcd.h         **** 	lcd_cmd() ------ This function is used to give any command instructions to the
 287               	n	68,0,108,.LM37-.LFBB6
 288               	.LM37:
 289 00a6 00D0      		rcall latch
 107:lcd.h         **** efore calling any other functions
 290               	tabn	68,0,109,.LM38-.LFBB6
 291               	.LM38:
 292 00a8 8881      		subi r17,lo8(-(1))
 293 00aa 8295      	.L14:
 295 00ae 8160      	.LM39:
 296 00b0 85BB      		movw r28,r14
 108:lcd.h         ****  before
 297               	8,r17
 298               		adc r29,__zero_reg__
 299 00b2 00D0      		ld r24,Y
 109:lcd.h         **** header files have implementation of some common finctions of the LCD.
 300               	t r24
 301               		brne .L16
 302 00b4 1F5F      	/* epilogue start */
 304               	.LM40:
 305               		pop r29
 306 00b6 E701      		pop r28
 307 00b8 C10F      		pop r17
 308 00ba D11D      		pop r15
 309 00bc 8881      		pop r14
 310 00be 8823      		ret
 110:lcd.h         **** /*	LCD.h
 111:lcd.h         **** Technophilia embedded systems
 313               	,0,.LFBB6-.LFBB6
 315 00c2 DF91      	.Lscope6:
 318 00c8 FF90      	.global	lcd_showvalue
 320 00cc 0895      	lcd_showvalue:
 322               	.LM41:
 323               	.LFBB7:
 324               		push r14
 325               		push r15
 326               		push r16
 327               		push r17
 328               	/* prologue: function */
 329               	/* frame size = 0 */
 330               		mov r17,r24
 112:lcd.h         **** /*	LCD.h
 113:lcd.h         **** Technophilia embedded systems
 114:lcd.h         **** 
 115:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
 331               	LM42-.LFBB7
 332               	.LM42:
 333               		ldi r22,lo8(100)
 334 00ce EF92      		rcall __udivmodqi4
 335 00d0 FF92      		mov r20,r24
 337 00d4 1F93      	.LM43:
 338               		mov r18,r24
 339               		ldi r19,lo8(0)
 340 00d6 182F      		ldi r24,lo8(-100)
 116:lcd.h         **** /*	LCD.h
 117:lcd.h         **** Technophilia embedded systems
 341               	i8(-100)
 342               		mul r18,r24
 343 00d8 64E6      		movw r14,r0
 344 00da 00D0      		mul r18,r25
 345 00dc 482F      		add r15,r0
 118:lcd.h         **** /*	LCD.h
 346               	r19,r24
 347               		add r15,r0
 348 00de 282F      		clr r1
 349 00e0 30E0      		movw r24,r14
 350 00e2 8CE9      		add r24,r17
 351 00e4 9FEF      		adc r25,__zero_reg__
 352 00e6 289F      		ldi r22,lo8(10)
 353 00e8 7001      		ldi r23,hi8(10)
 354 00ea 299F      		rcall __divmodhi4
 355 00ec F00C      		mov r16,r22
 357 00f0 F00C      	.LM44:
 358 00f2 1124      		mov r24,r20
 359 00f4 C701      		subi r24,lo8(-(48))
 360 00f6 810F      		rcall lcd_char
 362 00fa 6AE0      	.LM45:
 363 00fc 70E0      		mov r24,r16
 364 00fe 00D0      		subi r24,lo8(-(48))
 365 0100 062F      		rcall lcd_char
 119:lcd.h         **** /*	LCD.h
 120:lcd.h         **** Technophilia embedded systems
 121:lcd.h         **** 
 366               	46-.LFBB7
 367               	.LM46:
 368 0102 842F      		subi r17,lo8(-(48))
 369 0104 805D      		add r17,r14
 370 0106 00D0      		ldi r24,lo8(-10)
 122:lcd.h         **** /*	LCD.h
 371               	r25,hi8(-10)
 372               		mul r16,r24
 373 0108 802F      		mov r16,r0
 374 010a 805D      		clr r1
 375 010c 00D0      		mov r24,r16
 123:lcd.h         **** /*	LCD.h
 376               	r24,r17
 377               		rcall lcd_char
 378 010e 105D      	/* epilogue start */
 380 0112 86EF      	.LM47:
 381 0114 9FEF      		pop r17
 382 0116 089F      		pop r16
 383 0118 002D      		pop r15
 384 011a 1124      		pop r14
 385 011c 802F      		ret
 387 0120 00D0      	.Lscope7:
 124:lcd.h         **** /*	LCD.h
 389               	P(0,11)",64,0,0,24
 391 0122 1F91      	.global	lcd_gotoxy
 393 0126 FF90      	lcd_gotoxy:
 395 012a 0895      	.LM48:
 396               	.LFBB8:
 397               	/* prologue: function */
 398               	/* frame size = 0 */
 400               	.LM49:
 401               		tst r24
 402               		brne .L21
 125:lcd.h         **** /*	LCD.h
 126:lcd.h         **** Technophilia embedded systems
 127:lcd.h         **** 
 404               	,r22
 405               		subi r24,lo8(-(-128))
 406               		rcall lcd_cmd
 407               		ret
 408               	.L21:
 128:lcd.h         **** /*	LCD.h
 409               	bn	68,0,132,.LM51-.LFBB8
 410               	.LM51:
 411 012c 8823      		cpi r24,lo8(1)
 412 012e 01F4      		brne .L23
 129:lcd.h         **** /*	LCD.h
 130:lcd.h         **** Technophilia embedded systems
 413               	abn	68,0,134,.LM52-.LFBB8
 414               	.LM52:
 415 0130 862F      		mov r24,r22
 416 0132 8058      		subi r24,lo8(-(-64))
 417 0134 00D0      		rcall lcd_cmd
 418 0136 0895      	.L23:
 419               		ret
 131:lcd.h         **** /*	LCD.h
 132:lcd.h         **** Technophilia embedded systems
 420               	lcd_gotoxy, .-lcd_gotoxy
 421               	.Lscope8:
 133:lcd.h         **** /*	LCD.h
 134:lcd.h         **** Technophilia embedded systems
 424               	bal	delay_ms
 426 013c 862F      	delay_ms:
 428 0140 00D0      	.LM53:
 429               	.LFBB9:
 430 0142 0895      	/* prologue: function */
 431               	/* frame size = 0 */
 432               		rjmp .L25
 433               	.L27:
 435               	.LM54:
 436               		ldi r18,lo8(0)
 437               		ldi r19,hi8(0)
 135:lcd.h         **** /*	LCD.h
 136:lcd.h         **** Technophilia embedded systems
 137:lcd.h         **** 
 138:lcd.h         **** 	This header files have implementation of some common finctions of the LCD.
 139:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 140:lcd.h         **** 	calling any other functions to initialize the lcd.
 438               	68,0,147,.LM55-.LFBB9
 439               	.LM55:
 440               	/* #APP */
 441               	 ;  147 "lcd.h" 1
 442               		nop
 443 0144 00C0      	 ;  0 "" 2
 141:lcd.h         **** ions of the LCD.
 142:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 143:lcd.h         **** 	calling any other functions to initialize the lcd.
 445               	/* #NOAPP */
 446               		subi r18,lo8(-(1))
 447 0146 20E0      		sbci r19,hi8(-(1))
 448 0148 30E0      		ldi r20,hi8(3276)
 449               		cpi r18,lo8(3276)
 144:lcd.h         **** ions of the LCD.
 145:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 146:lcd.h         **** 	calling any other functions to initialize the lcd.
 147:lcd.h         **** 
 450               	r19,r20
 451               		brne .L26
 452               		sbiw r24,1
 453               	.L25:
 455               	.LM57:
 456               		sbiw r24,0
 457               		brne .L27
 458               	/* epilogue start */
 460 014e 3F4F      	.LM58:
 461 0150 4CE0      		ret
 466               	.Lscope9:
 468               	.global	lcd_init
 470 015c 01F4      	lcd_init:
 148:lcd.h         **** ns of the LCD.
 149:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 472               	logue: function */
 473               	/* frame size = 0 */
 475               	.LM60:
 476               		ldi r24,lo8(20)
 477               		ldi r25,hi8(20)
 478               		rcall delay_ms
 480               	.LM61:
 481               		in r24,53-32
 482               		sts save,r24
 484               	.LM62:
 485               		ldi r24,lo8(-1)
 486               		out 52-32,r24
 488               	.LM63:
 489               		ldi r24,lo8(15)
 490               		ldi r25,hi8(15)
 491 0160 84E1      		rcall delay_ms
 493 0164 00D0      	.LM64:
 494               		ldi r24,lo8(32)
 495               		out 53-32,r24
 497 0168 8093 0000 	.LM65:
 498               		ldi r24,lo8(1)
 499               		rcall lcd_cmd
 501 016e 84BB      	.LM66:
 502               		ldi r24,lo8(2)
 503               		rcall lcd_cmd
 505 0172 90E0      	.LM67:
 506 0174 00D0      		ldi r24,lo8(-128)
 507               		rcall lcd_cmd
 509 0176 80E2      	.LM68:
 510 0178 85BB      		ldi r24,lo8(20)
 511               		ldi r25,hi8(20)
 512               		rcall delay_ms
 513 017a 81E0      	/* epilogue start */
 515               	.LM69:
 516               		ret
 518 0180 00D0      	.Lscope10:
 520               	.global	lcd_clear
 522 0184 00D0      	lcd_clear:
 524               	.LM70:
 525 0186 84E1      	.LFBB11:
 526 0188 90E0      	/* prologue: function */
 527 018a 00D0      	/* frame size = 0 */
 529               	.LM71:
 530               		ldi r24,lo8(1)
 531 018c 0895      		rcall lcd_cmd
 532               	/* epilogue start */
 534               	.LM72:
 535               		ret
 537               	.Lscope11:
 150:lcd.h         **** header files have implementation of some common finctions of the LCD.
 151:lcd.h         **** 	Include this header file in your C code. Call the lcd_init() function before
 152:lcd.h         **** 	calling any other functions to initialize the lcd.
 538               	",64,0,0,24
 539               	.global	delayms
 541               	delayms:
 153:lcd.h         **** ions of the LCD.
 543               	t3:
 545 018e 81E0      	.LM73:
 546 0190 00D0      	.LFBB12:
 547               	/* prologue: function */
 154:lcd.h         **** /*	LCD.h
 548               	ame size = 0 */
 550 0192 0895      	.LM74:
 551               		lds r18,delaycounter2
 552               		lds r19,(delaycounter2)+1
 553               		ldi r20,lo8(0)
 554               		ldi r21,hi8(0)
 555               		rjmp .L35
 556               	.L36:
 558               	.LM75:
 559               	/* #APP */
   1:delay.h       **** /*	LCD.h
   2:delay.h       **** Technophilia embedded systems
   3:delay.h       **** 
   4:delay.h       **** 	this header file provides time delay in the form of mili second and micro second
   5:delay.h       **** 	without affecting any interrupts.
   6:delay.h       **** 
   7:delay.h       **** 	delayms()  this function provides delay in the form of mili second
   8:delay.h       **** 	delayus()  this function provides delay in the form of micro second
   9:delay.h       **** 	
  10:delay.h       **** */
  11:delay.h       **** #ifndef _DELAY_H_
  12:delay.h       **** #define _DELAY_H_
  13:delay.h       **** unsigned int delaycounter1,delaycounter2;
  14:delay.h       **** void delayms(unsigned int delaytime)
  15:delay.h       **** {
 560               	y.h" 1
 561               		nop
 562               	 ;  0 "" 2
 563               	 ;  21 "delay.h" 1
 564               		nop
 565               	 ;  0 "" 2
 566               	 ;  21 "delay.h" 1
 567 0194 2091 0000 		nop
 568 0198 3091 0000 	 ;  0 "" 2
 569 019c 40E0      	 ;  21 "delay.h" 1
 570 019e 50E0      		nop
 571 01a0 00C0      	 ;  0 "" 2
 572               	 ;  21 "delay.h" 1
  16:delay.h       **** 
  17:delay.h       **** 	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  18:delay.h       **** 	 {
  19:delay.h       **** 		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
  20:delay.h       **** 		  {
  21:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 573               	 2
 574               	 ;  21 "delay.h" 1
 575               		nop
 576               	 ;  0 "" 2
 578               	.LM76:
 579               	 ;  22 "delay.h" 1
 580 01a4 0000      		nop
 581               	 ;  0 "" 2
 582               	 ;  22 "delay.h" 1
 583 01a6 0000      		nop
 584               	 ;  0 "" 2
 585               	 ;  22 "delay.h" 1
 586 01a8 0000      		nop
 587               	 ;  0 "" 2
 588               	 ;  22 "delay.h" 1
 589 01aa 0000      		nop
 590               	 ;  0 "" 2
 591               	 ;  22 "delay.h" 1
 592 01ac 0000      		nop
 593               	 ;  0 "" 2
  22:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 594               	op
 595               	 ;  0 "" 2
 596               	/* #NOAPP */
 597 01ae 0000      	.L38:
 598               		subi r18,lo8(-(1))
 599               		sbci r19,hi8(-(1))
 601               	.LM77:
 602               		ldi r22,hi8(802)
 603 01b2 0000      		cpi r18,lo8(802)
 604               		cpc r19,r22
 605               		brne .L36
 606 01b4 0000      		subi r20,lo8(-(1))
 607               		sbci r21,hi8(-(1))
 608               		ldi r18,lo8(801)
 609 01b6 0000      		ldi r19,hi8(801)
 610               	.L35:
 612 01b8 0000      	.LM78:
 613               		cp r24,r20
 614               		cpc r25,r21
 615               		brlo .L37
 616 01ba 2F5F      		ldi r18,lo8(0)
 617 01bc 3F4F      		ldi r19,hi8(0)
 618               		rjmp .L38
 619               	.L37:
 620 01be 63E0      		sts (delaycounter2)+1,r19
 621 01c0 2232      		sts delaycounter2,r18
 622 01c2 3607      		sts (delaycounter1)+1,r21
 623 01c4 01F4      		sts delaycounter1,r20
 624 01c6 4F5F      	/* epilogue start */
 626 01ca 21E2      	.LM79:
 627 01cc 33E0      		ret
 629               	.Lscope12:
 632 01d0 9507      	.global	getdata
 634 01d4 20E0      	getdata:
 636 01d8 00C0      	.Ltext4:
 638 01da 3093 0000 	.LM80:
 639 01de 2093 0000 	.LFBB13:
 640 01e2 5093 0000 	/* prologue: function */
 641 01e6 4093 0000 	/* frame size = 0 */
  23:delay.h       **** 		  }
  24:delay.h       **** 		
  25:delay.h       **** 	 }
  26:delay.h       **** }
 643               	,0,35,.LM82-.LFBB13
 644               	.LM82:
 645 01ea 0895      		in r25,39-32
 646               		or r25,r24
 647               		out 39-32,r25
 649               	.LM83:
 650               		sbi 38-32,6
 652               	.LM84:
 653               		ldi r24,lo8(1)
 654               		ldi r25,hi8(1)
  32:adc.h         ****  unsigned char getdata(unsigned char chno)	
  33:adc.h         ****   {
 655               	ms
 657               	.LM85:
 658               		in r24,37-32
 659               	/* epilogue start */
  34:adc.h         ****     ADMUX=0X60;						//right align the ADC result
 660               	bn	68,0,39,.LM86-.LFBB13
 661               	.LM86:
 662 01ec 90E6      		ret
  35:adc.h         ****     ADMUX|=chno;					//select the ADC channel
 664               	ope13:
 667 01f2 982B      	.global	delayus
  36:adc.h         ****     ADCSRA|=0X40;					//start ADC convertion
 669               	us:
 671 01f6 369A      	.Ltext5:
  37:adc.h         ****     delayms(1);					//give some time delay to complit the aDC convertion
 672               	tabn	68,0,29,.LM87-.LFBB14
 673               	.LM87:
 674 01f8 81E0      	.LFBB14:
 675 01fa 90E0      	/* prologue: function */
 676 01fc 00D0      	/* frame size = 0 */
  38:adc.h         **** 	return ADCH;
 677               	bn	68,0,29,.LM88-.LFBB14
 678               	.LM88:
 679 01fe 85B1      		ldi r18,lo8(0)
 680               		ldi r19,hi8(0)
  39:adc.h         ****   }
 681               	p .L43
 682               	.L44:
 684               	.LM89:
 685               	/* #APP */
 686               	 ;  34 "delay.h" 1
 687               		nop
 688               	 ;  0 "" 2
 689               	 ;  34 "delay.h" 1
 690               		nop
 691               	 ;  0 "" 2
 692               	 ;  34 "delay.h" 1
  27:delay.h       **** 
  28:delay.h       **** void delayus(unsigned int delaytime)
  29:delay.h       **** {
 693               	" 2
 694               	 ;  34 "delay.h" 1
 695               		nop
 696               	 ;  0 "" 2
 697               	 ;  34 "delay.h" 1
 698               		nop
 699               	 ;  0 "" 2
 700 0202 20E0      	 ;  34 "delay.h" 1
 701 0204 30E0      		nop
 702 0206 00C0      	 ;  0 "" 2
  30:delay.h       **** 
  31:delay.h       **** 	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  32:delay.h       **** 	 {
  33:delay.h       **** 		 
  34:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 704               	35 "delay.h" 1
 705               		nop
 706               	 ;  0 "" 2
 707               	 ;  35 "delay.h" 1
 708 0208 0000      		nop
 709               	 ;  0 "" 2
 710               	 ;  35 "delay.h" 1
 711 020a 0000      		nop
 712               	 ;  0 "" 2
 713               	 ;  35 "delay.h" 1
 714 020c 0000      		nop
 715               	 ;  0 "" 2
 716               	/* #NOAPP */
 717 020e 0000      		subi r18,lo8(-(1))
 718               		sbci r19,hi8(-(1))
 719               	.L43:
 721               	.LM91:
 722               		cp r24,r18
 723 0212 0000      		cpc r25,r19
 724               		brsh .L44
  35:delay.h       **** 		  asm("nop");asm("nop");asm("nop");asm("nop");
 725               	1,r19
 726               		sts delaycounter1,r18
 727               	/* epilogue start */
 729               	.LM92:
 730               		ret
 732               	.Lscope14:
 734 0218 0000      	.global	xaxis
 736               	xaxis:
 738               	.Ltext6:
 740 021c 2F5F      	.LM93:
 741 021e 3F4F      	.LFBB15:
 742               	/* prologue: function */
 743               	/* frame size = 0 */
 745 0220 8217      	.LM94:
 746 0222 9307      		ldi r24,lo8(10)
 747 0224 00F4      		out 58-32,r24
 749 022a 2093 0000 	.LM95:
 750               		ldi r24,lo8(8)
  36:delay.h       **** 	 }
  37:delay.h       **** }
 751               	0,39,.LM96-.LFBB15
 752               	.LM96:
 753 022e 0895      		ldi r24,lo8(100)
 754               		ldi r25,hi8(100)
 755               		rcall delayus
 757               	.LM97:
 758               		ldi r24,lo8(2)
 759               		rcall getdata
 760               		sts xcod,r24
   1:main.c        **** //Moiving motor on finger touch
   2:main.c        **** //not working fine due to absense calibration //uncomplited
   3:main.c        **** 
   4:main.c        **** //interfacing 4 wire resistive touch screen with avr
   5:main.c        **** //controller used atmega 8535
   6:main.c        **** 
   7:main.c        **** 
   8:main.c        **** //connection details
   9:main.c        **** 
  10:main.c        **** //YM-PA0
  11:main.c        **** //XM-PA1
  12:main.c        **** //YP-PA2
  13:main.c        **** //XP-PA3
  14:main.c        **** 
  15:main.c        **** 
  16:main.c        **** // 4  3   2  1    //pin numbar
  17:main.c        **** // X+,Y+, X-,Y-
  18:main.c        **** // 3  2   1  0
  19:main.c        **** 
  20:main.c        **** // 1  ad  0  x		reading x axis 
  21:main.c        **** // ad 0   x  1		reading y axis
  22:main.c        **** 
  23:main.c        **** // 1  0  r  0		touch detect  DDRA=0x05;  PORTA=0x08;
  24:main.c        **** 
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <avr/io.h>
  28:main.c        **** #include "adc.h"
  29:main.c        **** #include "lcd.h"
  30:main.c        **** #include "delay.h"
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        **** unsigned char xcod,ycod,pxcod,pycod,dx,dy;
  34:main.c        **** 
  35:main.c        **** void xaxis()                      	//for reading X cordinate
  36:main.c        ****  {
 762               	 r24,lo8(100)
 763               		ldi r25,hi8(100)
 764               		rcall delayus
 765               	/* epilogue start */
  37:main.c        ****   DDRA=0x0A;						
 767               	:
 768               		ret
 770 0232 8ABB      	.Lscope15:
  38:main.c        ****   PORTA=0x08;
 771               	abs	"yaxis:F(0,15)",36,0,0,yaxis
 772               	.global	yaxis
 774 0236 8BBB      	yaxis:
  39:main.c        ****   delayus(100);
 775               	abn	68,0,45,.LM100-.LFBB16
 776               	.LM100:
 777 0238 84E6      	.LFBB16:
 778 023a 90E0      	/* prologue: function */
 779 023c 00D0      	/* frame size = 0 */
  40:main.c        ****   xcod=getdata(2);
 780               	bn	68,0,46,.LM101-.LFBB16
 781               	.LM101:
 782 023e 82E0      		ldi r24,lo8(5)
 783 0240 00D0      		out 58-32,r24
  41:main.c        ****   delayus(100);
 785               	2:
 786               		ldi r24,lo8(1)
 787 0246 84E6      		out 59-32,r24
 789 024a 00D0      	.LM103:
 790               		ldi r24,lo8(100)
  42:main.c        ****  }
 791               	25,hi8(100)
 792               		rcall delayus
 794               	.LM104:
 795               		ldi r24,lo8(3)
 796               		rcall getdata
 797               		sts ycod,r24
 799               	.LM105:
  43:main.c        ****  
  44:main.c        **** void yaxis() 						//for reading Y coordinate
  45:main.c        ****  {
 800               	lo8(100)
 801               		ldi r25,hi8(100)
 802               		rcall delayus
 803               	/* epilogue start */
  46:main.c        ****   DDRA=0x05;
 805               	6:
 806               		ret
 808 0250 8ABB      	.Lscope16:
  47:main.c        ****   PORTA=0x01;
 809               	abs	"main:F(0,1)",36,0,0,main
 810               	.global	main
 812 0254 8BBB      	main:
  48:main.c        ****   delayus(100);
 813               	abn	68,0,55,.LM107-.LFBB17
 814               	.LM107:
 815 0256 84E6      	.LFBB17:
 816 0258 90E0      		push r12
 817 025a 00D0      		push r13
  49:main.c        ****   ycod=getdata(3);
 818               	us
 819               	/* epilogue start */
 821 025e 00D0      	.LM106:
 822 0260 8093 0000 		ret
  50:main.c        ****   delayus(100);
 823               	e	yaxis, .-yaxis
 824               	.Lscope16:
 826 0266 90E0      	.global	main
 828               	main:
  51:main.c        ****  }
 829               	n	68,0,55,.LM107-.LFBB17
 830               	.LM107:
 831 026a 0895      	.LFBB17:
 832               		push r12
 833               		push r13
 834               		push r14
 835               		push r15
 836               		push r16
 837               		push r17
  52:main.c        ****  
  53:main.c        ****    
  54:main.c        **** int main(void)
  55:main.c        ****  {
 838               	06-.LFBB16
 839               	.LM106:
 840               		ret
 842 026e DF92      	.Lscope16:
 844 0272 FF92      	.global	main
 846 0276 1F93      	main:
 848               	.LM107:
 849               	.LFBB17:
 850               		push r12
 851               		push r13
 852               		push r14
 853               		push r15
 854               		push r16
 855 0278 86E8      		push r17
 856 027a 86B9      	/* prologue: function */
 857               	/* frame size = 0 */
 858               	.LBB4:
 859               	.LBB5:
  56:main.c        ****  
  57:main.c        ****   
  58:main.c        ****  adc_init();
  59:main.c        ****  lcd_init();   
 861               	9,.LM108-.LFBB17
 862               	.LM108:
 863 027c 00D0      		ldi r24,lo8(-122)
  60:main.c        ****  DDRD=0xF0;									//set the direction for motor pins
 864               	07:
 865               	.LFBB17:
 866 027e 80EF      		push r12
 867 0280 81BB      		push r13
  61:main.c        ****  
  62:main.c        ****   while(1)
  63:main.c        ****    {
  64:main.c        ****    
  65:main.c        ****     DDRA=0x05;
 868               	us
 869               	/* epilogue start */
 871 0284 C42E      	.LM106:
  66:main.c        ****     PORTA=0x08;
 872               	
 874 0286 38E0      	.Lscope16:
  67:main.c        ****     delayus(100);
  68:main.c        ****     while((PINA & 0x02)==0x02){PORTD=0x00;};//touch detect
  69:main.c        **** 	
  70:main.c        ****     xaxis();
  71:main.c        **** 	yaxis();
  72:main.c        **** 	
  73:main.c        **** 	lcd_gotoxy(0,0);
  74:main.c        **** 	lcd_showvalue(xcod);
  75:main.c        **** 	lcd_gotoxy(1,0);
  76:main.c        **** 	lcd_showvalue(ycod);
  77:main.c        **** 	
  78:main.c        **** 	if((xcod<60)&(ycod>80)&(ycod<150))
  79:main.c        **** 	 {PORTD=0x50;}							//forward
 876               	obal	main
 878 028a 20E5      	main:
  80:main.c        **** 	 
  81:main.c        **** 	if((xcod>80)&(ycod>80)&(ycod<150)) 
  82:main.c        **** 	 {PORTD=0xA0;}							//backword
 880               	4,lo8(100)
 881               		ldi r25,hi8(100)
 882 028e 90EA      		rcall delayus
 883 0290 F92E      	/* epilogue start */
  83:main.c        **** 	 
  84:main.c        **** 	if((ycod<60)&(xcod>50)&(xcod<180))
  85:main.c        **** 	 {PORTD=0x10;}							//left turn
 884               	abn	68,0,51,.LM106-.LFBB16
 885               	.LM106:
 886 0292 00E1      		ret
  86:main.c        **** 	 
  87:main.c        **** 	if((ycod>180)&(xcod>50)&(xcod<180))
  88:main.c        **** 	 {PORTD=0x40;}							//right turn
 887               	ize	yaxis, .-yaxis
 888               	.Lscope16:
 890               	.global	main
 892               	main:
 894               	.LM107:
 895               	.LFBB17:
 896 0298 DBBA      		push r12
 897               		push r13
 898               		push r14
 899 029a 84E6      		push r15
 900 029c 90E0      		push r16
 901 029e 00D0      		push r17
 902 02a0 00C0      	/* prologue: function */
 903               	/* frame size = 0 */
 904               	.LBB4:
 905               	.LBB5:
 907               	.Ltext7:
 909 02a6 00C0      	.LM108:
 910               		ldi r24,lo8(-122)
 911               		out 38-32,r24
 912 02a8 00D0      	.LBE5:
 913               	.LBE4:
 915 02aa 00D0      	.Ltext8:
 917               	.LM109:
 918 02ac 80E0      		rcall lcd_init
 920 02b0 00D0      	.LM110:
 921               		ldi r24,lo8(-16)
 922               		out 49-32,r24
 924 02b6 00D0      	.LM111:
 925               		ldi r20,lo8(5)
 926               		mov r12,r20
 928 02ba 60E0      	.LM112:
 929 02bc 00D0      		ldi r19,lo8(8)
 930               		mov r13,r19
 932 02be 8091 0000 	.LM113:
 933 02c2 00D0      		ldi r18,lo8(80)
 934               		mov r14,r18
 936 02c4 5091 0000 	.LM114:
 937 02c8 6091 0000 		ldi r25,lo8(-96)
 938 02cc 40E0      		mov r15,r25
 940 02d0 00F0      	.LM115:
 941 02d2 41E0      		ldi r16,lo8(16)
 943 02d4 20E0      	.LM116:
 944 02d6 30E0      		ldi r17,lo8(64)
 945 02d8 6639      	.L71:
 947 02dc 21E0      	.LM117:
 948 02de 30E0      		out 58-32,r12
 950 02e0 80E0      	.LM118:
 951 02e2 5C33      		out 59-32,r13
 953 02e6 81E0      	.LM119:
 954               		ldi r24,lo8(100)
 955 02e8 8423      		ldi r25,hi8(100)
 956 02ea 90E0      		rcall delayus
 957 02ec 8223      		rjmp .L51
 958 02ee 9323      	.L52:
 960 02f2 01F0      	.LM120:
 961               		out 50-32,__zero_reg__
 962               	.L51:
 963 02f4 E2BA      		sbic 57-32,1
 964               		rjmp .L52
 966               	.LM121:
 967 02f6 80E0      		rcall xaxis
 969 02fa 00F0      	.LM122:
 970 02fc 81E0      		rcall yaxis
 972 02fe 8423      	.LM123:
 973 0300 90E0      		ldi r24,lo8(0)
 974 0302 8223      		ldi r22,lo8(0)
 975 0304 9323      		rcall lcd_gotoxy
 977 0308 01F0      	.LM124:
 978               		lds r24,xcod
 979               		rcall lcd_showvalue
 981               	.LM125:
 982               		ldi r24,lo8(1)
 983               		ldi r22,lo8(0)
 984 030c 40E0      		rcall lcd_gotoxy
 986 0310 00F0      	.LM126:
 987 0312 41E0      		lds r24,ycod
 988               		rcall lcd_showvalue
 990 0316 30E0      	.LM127:
 991 0318 543B      		lds r21,xcod
 992 031a 00F4      		lds r22,ycod
 993 031c 21E0      		ldi r20,lo8(0)
 994 031e 30E0      		cpi r22,lo8(81)
 995               		brlo .L53
 996 0320 80E0      		ldi r20,lo8(1)
 997 0322 6C33      	.L53:
 998 0324 00F4      		ldi r18,lo8(0)
 999 0326 81E0      		ldi r19,hi8(0)
 1000               		cpi r22,lo8(-106)
 1001 0328 8423      		brsh .L54
 1002 032a 90E0      		ldi r18,lo8(1)
 1003 032c 8223      		ldi r19,hi8(1)
 1004 032e 9323      	.L54:
 1005 0330 892B      		ldi r24,lo8(0)
 1006 0332 01F0      		cpi r21,lo8(60)
 1007               		brsh .L56
 1008               		ldi r24,lo8(1)
 1009 0334 02BB      	.L56:
 1010               		and r24,r20
 1011               		ldi r25,lo8(0)
 1012               		and r24,r18
 1013 0336 80E0      		and r25,r19
 1014 0338 653B      		or r24,r25
 1015 033a 00F0      		breq .L55
 1017               	.LM128:
 1018 033e 8423      		out 50-32,r14
 1019 0340 90E0      	.L55:
 1021 0344 9323      	.LM129:
 1022 0346 892B      		ldi r24,lo8(0)
 1023 0348 01F0      		cpi r21,lo8(81)
 1024               		brlo .L58
 1025               		ldi r24,lo8(1)
 1026 034a 12BB      	.L58:
 1027               		and r24,r20
  89:main.c        **** 	 
  90:main.c        **** 	if((xcod==0)|(ycod==0))
 1028               	.LM131-.LFBB17
 1029               	.LM131:
 1030 034c 5523      		ldi r20,lo8(0)
 1031 034e 01F0      		cpi r21,lo8(51)
 1032 0350 6623      		brlo .L59
 1033 0352 01F0      		ldi r20,lo8(1)
 1034 0354 00C0      	.L59:
 1035               		ldi r18,lo8(0)
  91:main.c        **** 	 {PORTD=0x00;}							//stop
 1036               	.LFBB17
 1037               	.LM131:
 1038 0356 12BA      		ldi r20,lo8(0)
 1039 0358 00C0      		cpi r21,lo8(51)
 1040               		brlo .L59
 1041               		ldi r20,lo8(1)
 1042               	.L59:
 1043               		ldi r18,lo8(0)
 1044               		ldi r19,hi8(0)
 1045               		cpi r21,lo8(-76)
 1046               		brsh .L60
 1047               		ldi r18,lo8(1)
 1048 0000 00        		ldi r19,hi8(1)
 1049               	.L60:
 1050               		ldi r24,lo8(0)
 1051               		cpi r22,lo8(60)
 1052               		brsh .L62
 1053               		ldi r24,lo8(1)
 1054 0001 00        	.L62:
 1055               		and r24,r20
 1056               		ldi r25,lo8(0)
 1057               		and r24,r18
 1058               		and r25,r19
 1059               		or r24,r25
 1060 0002 00        		breq .L61
 1062               	.LM132:
 1063               		out 50-32,r16
 1064               	.L61:
 1066               	.LM133:
 1067               		ldi r24,lo8(0)
 1068               		cpi r22,lo8(-75)
 1069               		brlo .L64
 1070               		ldi r24,lo8(1)
 1071               	.L64:
 1072               		and r24,r20
 1073               		ldi r25,lo8(0)
 1074               		and r24,r18
 1075               		and r25,r19
 1076               		or r24,r25
 1077               		breq .L63
 1079               	.LM134:
 1080               		out 50-32,r17
 1081               	.L63:
 1083               	.LM135:
 1084               		tst r21
 1085               		breq .L68
 1086               		tst r22
 1087               		breq .+2
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:2      *ABS*:0000003f __SREG__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:3      *ABS*:0000003e __SP_H__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:4      *ABS*:0000003d __SP_L__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:5      *ABS*:00000034 __CCP__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:71     .text:00000000 adc_init
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:93     .text:00000006 dely_ns
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:1047   .bss:00000000 k
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:1053   .bss:00000001 j
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:125    .text:00000020 latch
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:158    .text:00000030 lcd_cmd
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:206    .text:0000005e lcd_char
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:250    .text:00000080 lcd_string
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:330    .text:000000ce lcd_showvalue
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:403    .text:0000012c lcd_gotoxy
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:437    .text:00000144 delay_ms
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:483    .text:00000160 lcd_init
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:1059   .bss:00000002 save
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:537    .text:0000018e lcd_clear
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:557    .text:00000194 delayms
                            *COM*:00000002 delaycounter2
                            *COM*:00000002 delaycounter1
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:652    .text:000001ec getdata
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:690    .text:00000202 delayus
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:759    .text:00000230 xaxis
                            *COM*:00000001 xcod
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:799    .text:0000024e yaxis
                            *COM*:00000001 ycod
C:\DOCUME~1\Prasanta\LOCALS~1\Temp/ccTImH94.s:837    .text:0000026c main
                            *COM*:00000002 adcdata
                            *COM*:00000002 adcdata1
                            *COM*:00000001 pxcod
                            *COM*:00000001 pycod
                            *COM*:00000001 dx
                            *COM*:00000001 dy

UNDEFINED SYMBOLS
__udivmodqi4
__divmodhi4
__do_clear_bss


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000d  00800060  00800060  000004be  2**0
                  ALLOC
  2 .stab         00000f9c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000091d  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	98 c1       	rjmp	.+816    	; 0x356 <__vector_18>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	ad 36       	cpi	r26, 0x6D	; 109
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	f4 d1       	rcall	.+1000   	; 0x430 <main>
  48:	fe c1       	rjmp	.+1020   	; 0x446 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <spi_master_init>:
	retval=retval1=retval2=retval3=flag=cc_data=cc_data1=cc_data2=cc_data3=0;
}

void spi_master_init(void) //*****************************************************************2
{
	DDRB|=0x02;			//spi slave select pin configure as output
  4c:	b9 9a       	sbi	0x17, 1	; 23
	DDRB|=0xB0;			//spi pins (mosi, sck, ss) configure as output important ss must shod be configured  even if it is not in use
  4e:	87 b3       	in	r24, 0x17	; 23
  50:	80 6b       	ori	r24, 0xB0	; 176
  52:	87 bb       	out	0x17, r24	; 23
	SPCR =0x50;			//spe=1(spi enable),DDRD=1(MSB first),mstr=1(master)
  54:	80 e5       	ldi	r24, 0x50	; 80
  56:	8d b9       	out	0x0d, r24	; 13
}
  58:	08 95       	ret

0000005a <cc_strobe>:
	cc_writereg(0x05,0x34);
}

cc_strobe(char data) //***********************************************************************5
{
	csn0;						//pull the ss line to down to activate slave 
  5a:	c4 98       	cbi	0x18, 4	; 24
	while(miso);
  5c:	b6 99       	sbic	0x16, 6	; 22
  5e:	fe cf       	rjmp	.-4      	; 0x5c <cc_strobe+0x2>
	SPDR=data;					//place data on spi resistor
  60:	8f b9       	out	0x0f, r24	; 15
	while((SPSR&0x80)==0);		//wait foe the spi transmittion complit
  62:	77 9b       	sbis	0x0e, 7	; 14
  64:	fe cf       	rjmp	.-4      	; 0x62 <cc_strobe+0x8>
	csn1;						//pull the ss line to up to deactivate the slave
  66:	c4 9a       	sbi	0x18, 4	; 24
	retval = SPDR;
  68:	8f b1       	in	r24, 0x0f	; 15
  6a:	80 93 69 00 	sts	0x0069, r24
}
  6e:	08 95       	ret

00000070 <Wait>:
	...
        asm("nop");
        asm("nop");
		asm("nop");
        asm("nop");
	} 
	while (--timeout);
  84:	81 50       	subi	r24, 0x01	; 1
  86:	a1 f7       	brne	.-24     	; 0x70 <Wait>
}
  88:	08 95       	ret

0000008a <cc_reset>:
	SPCR =0x50;			//spe=1(spi enable),DDRD=1(MSB first),mstr=1(master)
}

void cc_reset(void) //************************************************************************3
{
	csn1; 
  8a:	c4 9a       	sbi	0x18, 4	; 24
    Wait(1); 
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	f0 df       	rcall	.-32     	; 0x70 <Wait>
    csn0; 
  90:	c4 98       	cbi	0x18, 4	; 24
    Wait(1); 
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	ed df       	rcall	.-38     	; 0x70 <Wait>
    csn1; 
  96:	c4 9a       	sbi	0x18, 4	; 24
    Wait(41);
  98:	89 e2       	ldi	r24, 0x29	; 41
  9a:	ea df       	rcall	.-44     	; 0x70 <Wait>
	csn0;
  9c:	c4 98       	cbi	0x18, 4	; 24
    while (miso);//((PINB&0x08)); 
  9e:	b6 99       	sbic	0x16, 6	; 22
  a0:	fe cf       	rjmp	.-4      	; 0x9e <cc_reset+0x14>
    SPDR = 0x30; 
  a2:	80 e3       	ldi	r24, 0x30	; 48
  a4:	8f b9       	out	0x0f, r24	; 15
    while((SPSR&0x80)==0);			 //SPI_WAIT(); 
  a6:	77 9b       	sbis	0x0e, 7	; 14
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <cc_reset+0x1c>
	while (miso);//((PINB&0x08)); 
  aa:	b6 99       	sbic	0x16, 6	; 22
  ac:	fe cf       	rjmp	.-4      	; 0xaa <cc_reset+0x20>
    csn1; 
  ae:	c4 9a       	sbi	0x18, 4	; 24
}
  b0:	08 95       	ret

000000b2 <cc_writereg>:
/*********************************SINGLE MODE COMMUNICATION***********************************/
/********Check that in ISR rf_recieve(); is uncommented & rf_receive_B(); is commented********/

void cc_writereg(char add,char data)//********************************************************7
{
	csn0;
  b2:	c4 98       	cbi	0x18, 4	; 24
	while(miso);
  b4:	b6 99       	sbic	0x16, 6	; 22
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <cc_writereg+0x2>
	SPDR=add;
  b8:	8f b9       	out	0x0f, r24	; 15
	while((SPSR&0x80)==0);		//pull the ss line to down to activate slave 
  ba:	77 9b       	sbis	0x0e, 7	; 14
  bc:	fe cf       	rjmp	.-4      	; 0xba <cc_writereg+0x8>
	SPDR=data;					//place data on spi resistor
  be:	6f b9       	out	0x0f, r22	; 15
	while((SPSR&0x80)==0);		//wait foe the spi transmittion complit
  c0:	77 9b       	sbis	0x0e, 7	; 14
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <cc_writereg+0xe>
	csn1;
  c4:	c4 9a       	sbi	0x18, 4	; 24
	Wait(1);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	d3 df       	rcall	.-90     	; 0x70 <Wait>
}
  ca:	08 95       	ret

000000cc <cc_config>:
    csn1; 
}

void cc_config(void) //***********************************************************************4
{
	cc_writereg(0X0B,0x07);
  cc:	8b e0       	ldi	r24, 0x0B	; 11
  ce:	67 e0       	ldi	r22, 0x07	; 7
  d0:	f0 df       	rcall	.-32     	; 0xb2 <cc_writereg>
	cc_writereg(0x0c,0x00);
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	ed df       	rcall	.-38     	; 0xb2 <cc_writereg>
	cc_writereg(0x0D,0x5D);
  d8:	8d e0       	ldi	r24, 0x0D	; 13
  da:	6d e5       	ldi	r22, 0x5D	; 93
  dc:	ea df       	rcall	.-44     	; 0xb2 <cc_writereg>
	cc_writereg(0x0E,0x93);
  de:	8e e0       	ldi	r24, 0x0E	; 14
  e0:	63 e9       	ldi	r22, 0x93	; 147
  e2:	e7 df       	rcall	.-50     	; 0xb2 <cc_writereg>
	cc_writereg(0x0F,0xB1);		//93
  e4:	8f e0       	ldi	r24, 0x0F	; 15
  e6:	61 eb       	ldi	r22, 0xB1	; 177
  e8:	e4 df       	rcall	.-56     	; 0xb2 <cc_writereg>
 
	cc_writereg(0x10,0x2D);
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	6d e2       	ldi	r22, 0x2D	; 45
  ee:	e1 df       	rcall	.-62     	; 0xb2 <cc_writereg>
	cc_writereg(0x11,0x3B);
  f0:	81 e1       	ldi	r24, 0x11	; 17
  f2:	6b e3       	ldi	r22, 0x3B	; 59
  f4:	de df       	rcall	.-68     	; 0xb2 <cc_writereg>
	cc_writereg(0x12,0x73);
  f6:	82 e1       	ldi	r24, 0x12	; 18
  f8:	63 e7       	ldi	r22, 0x73	; 115
  fa:	db df       	rcall	.-74     	; 0xb2 <cc_writereg>
	cc_writereg(0x13,0x22);
  fc:	83 e1       	ldi	r24, 0x13	; 19
  fe:	62 e2       	ldi	r22, 0x22	; 34
 100:	d8 df       	rcall	.-80     	; 0xb2 <cc_writereg>
	cc_writereg(0x14,0xF8);
 102:	84 e1       	ldi	r24, 0x14	; 20
 104:	68 ef       	ldi	r22, 0xF8	; 248
 106:	d5 df       	rcall	.-86     	; 0xb2 <cc_writereg>
 
	cc_writereg(0x0A,0x00);
 108:	8a e0       	ldi	r24, 0x0A	; 10
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	d2 df       	rcall	.-92     	; 0xb2 <cc_writereg>
 
	cc_writereg(0x15,0x00);		//
 10e:	85 e1       	ldi	r24, 0x15	; 21
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	cf df       	rcall	.-98     	; 0xb2 <cc_writereg>
 
	cc_writereg(0x21,0xB6);
 114:	81 e2       	ldi	r24, 0x21	; 33
 116:	66 eb       	ldi	r22, 0xB6	; 182
 118:	cc df       	rcall	.-104    	; 0xb2 <cc_writereg>
	cc_writereg(0x22,0x10);
 11a:	82 e2       	ldi	r24, 0x22	; 34
 11c:	60 e1       	ldi	r22, 0x10	; 16
 11e:	c9 df       	rcall	.-110    	; 0xb2 <cc_writereg>
 
	cc_writereg(0x18,0x18);
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	68 e1       	ldi	r22, 0x18	; 24
 124:	c6 df       	rcall	.-116    	; 0xb2 <cc_writereg>
	cc_writereg(0x19,0x1D);
 126:	89 e1       	ldi	r24, 0x19	; 25
 128:	6d e1       	ldi	r22, 0x1D	; 29
 12a:	c3 df       	rcall	.-122    	; 0xb2 <cc_writereg>
 
	cc_writereg(0x1A,0x1C);
 12c:	8a e1       	ldi	r24, 0x1A	; 26
 12e:	6c e1       	ldi	r22, 0x1C	; 28
 130:	c0 df       	rcall	.-128    	; 0xb2 <cc_writereg>
	cc_writereg(0x1B,0xC7);
 132:	8b e1       	ldi	r24, 0x1B	; 27
 134:	67 ec       	ldi	r22, 0xC7	; 199
 136:	bd df       	rcall	.-134    	; 0xb2 <cc_writereg>
	cc_writereg(0x1C,0x00);
 138:	8c e1       	ldi	r24, 0x1C	; 28
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	ba df       	rcall	.-140    	; 0xb2 <cc_writereg>
	cc_writereg(0x1D,0xB2);		//f8
 13e:	8d e1       	ldi	r24, 0x1D	; 29
 140:	62 eb       	ldi	r22, 0xB2	; 178
 142:	b7 df       	rcall	.-146    	; 0xb2 <cc_writereg>
 
	cc_writereg(0x23,0xEA);
 144:	83 e2       	ldi	r24, 0x23	; 35
 146:	6a ee       	ldi	r22, 0xEA	; 234
 148:	b4 df       	rcall	.-152    	; 0xb2 <cc_writereg>
	cc_writereg(0x24,0x0A);
 14a:	84 e2       	ldi	r24, 0x24	; 36
 14c:	6a e0       	ldi	r22, 0x0A	; 10
 14e:	b1 df       	rcall	.-158    	; 0xb2 <cc_writereg>
	cc_writereg(0x25,0x00);
 150:	85 e2       	ldi	r24, 0x25	; 37
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	ae df       	rcall	.-164    	; 0xb2 <cc_writereg>
	cc_writereg(0x26,0x11);
 156:	86 e2       	ldi	r24, 0x26	; 38
 158:	61 e1       	ldi	r22, 0x11	; 17
 15a:	ab df       	rcall	.-170    	; 0xb2 <cc_writereg>
	cc_writereg(0x29,0x59);
 15c:	89 e2       	ldi	r24, 0x29	; 41
 15e:	69 e5       	ldi	r22, 0x59	; 89
 160:	a8 df       	rcall	.-176    	; 0xb2 <cc_writereg>
 
	cc_writereg(0x2C,0x88);
 162:	8c e2       	ldi	r24, 0x2C	; 44
 164:	68 e8       	ldi	r22, 0x88	; 136
 166:	a5 df       	rcall	.-182    	; 0xb2 <cc_writereg>
	cc_writereg(0x2D,0x31);
 168:	8d e2       	ldi	r24, 0x2D	; 45
 16a:	61 e3       	ldi	r22, 0x31	; 49
 16c:	a2 df       	rcall	.-188    	; 0xb2 <cc_writereg>
	cc_writereg(0x2E,0x0B);
 16e:	8e e2       	ldi	r24, 0x2E	; 46
 170:	6b e0       	ldi	r22, 0x0B	; 11
 172:	9f df       	rcall	.-194    	; 0xb2 <cc_writereg>
 
	cc_writereg(0x00,0x06);  	//iocfg2
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	66 e0       	ldi	r22, 0x06	; 6
 178:	9c df       	rcall	.-200    	; 0xb2 <cc_writereg>
 
	cc_writereg(0x02,0x06); 	//iocfg0
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	66 e0       	ldi	r22, 0x06	; 6
 17e:	99 df       	rcall	.-206    	; 0xb2 <cc_writereg>
 
	cc_writereg(0x07,0x04);
 180:	87 e0       	ldi	r24, 0x07	; 7
 182:	64 e0       	ldi	r22, 0x04	; 4
 184:	96 df       	rcall	.-212    	; 0xb2 <cc_writereg>
	cc_writereg(0x08,0x05);  	//pktctrl 0 
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	65 e0       	ldi	r22, 0x05	; 5
 18a:	93 df       	rcall	.-218    	; 0xb2 <cc_writereg>
	cc_writereg(0x09,0x00);		//device address
 18c:	89 e0       	ldi	r24, 0x09	; 9
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	90 df       	rcall	.-224    	; 0xb2 <cc_writereg>
	cc_writereg(0x06,0xFF);
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	6f ef       	ldi	r22, 0xFF	; 255
 196:	8d df       	rcall	.-230    	; 0xb2 <cc_writereg>
 
	//sync bits
	cc_writereg(0x04,0x12);
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	62 e1       	ldi	r22, 0x12	; 18
 19c:	8a df       	rcall	.-236    	; 0xb2 <cc_writereg>
	cc_writereg(0x05,0x34);
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	64 e3       	ldi	r22, 0x34	; 52
 1a2:	87 df       	rcall	.-242    	; 0xb2 <cc_writereg>
}
 1a4:	08 95       	ret

000001a6 <rf_init>:
	retval=retval1=retval2=retval3=flag=cc_data=cc_data1=cc_data2=cc_data3=0;
}

void spi_master_init(void) //*****************************************************************2
{
	DDRB|=0x02;			//spi slave select pin configure as output
 1a6:	b9 9a       	sbi	0x17, 1	; 23
	DDRB|=0xB0;			//spi pins (mosi, sck, ss) configure as output important ss must shod be configured  even if it is not in use
 1a8:	87 b3       	in	r24, 0x17	; 23
 1aa:	80 6b       	ori	r24, 0xB0	; 176
 1ac:	87 bb       	out	0x17, r24	; 23
	SPCR =0x50;			//spe=1(spi enable),DDRD=1(MSB first),mstr=1(master)
 1ae:	80 e5       	ldi	r24, 0x50	; 80
 1b0:	8d b9       	out	0x0d, r24	; 13
}

void rf_init() //*****************************************************************************1
{
	spi_master_init();
	cc_reset();
 1b2:	6b df       	rcall	.-298    	; 0x8a <cc_reset>
	cc_config();
 1b4:	8b df       	rcall	.-234    	; 0xcc <cc_config>
	Wait(100);   
 1b6:	84 e6       	ldi	r24, 0x64	; 100
 1b8:	5b df       	rcall	.-330    	; 0x70 <Wait>
	cc_strobe(0x34); 		//receive mode
 1ba:	84 e3       	ldi	r24, 0x34	; 52
 1bc:	4e df       	rcall	.-356    	; 0x5a <cc_strobe>
	//MCUCR=0x02;			//for interrupt 0
	//GICR=0x40;	
 
	MCUCSR=0x00;			//Falling Edge
 1be:	14 be       	out	0x34, r1	; 52
	GICR=0x20;				//interrupt 2 enabled
 1c0:	80 e2       	ldi	r24, 0x20	; 32
 1c2:	8b bf       	out	0x3b, r24	; 59
 
	sei();	 
 1c4:	78 94       	sei
	Wait(100);
 1c6:	84 e6       	ldi	r24, 0x64	; 100
 1c8:	53 df       	rcall	.-346    	; 0x70 <Wait>
	Wait(100);
 1ca:	84 e6       	ldi	r24, 0x64	; 100
 1cc:	51 df       	rcall	.-350    	; 0x70 <Wait>
	Wait(100);
 1ce:	84 e6       	ldi	r24, 0x64	; 100
 1d0:	4f df       	rcall	.-354    	; 0x70 <Wait>
	Wait(100);
 1d2:	84 e6       	ldi	r24, 0x64	; 100
 1d4:	4d df       	rcall	.-358    	; 0x70 <Wait>
	retval=retval1=retval2=retval3=flag=cc_data=cc_data1=cc_data2=cc_data3=0;
 1d6:	10 92 68 00 	sts	0x0068, r1
 1da:	10 92 62 00 	sts	0x0062, r1
 1de:	10 92 66 00 	sts	0x0066, r1
 1e2:	10 92 61 00 	sts	0x0061, r1
 1e6:	10 92 63 00 	sts	0x0063, r1
 1ea:	10 92 60 00 	sts	0x0060, r1
 1ee:	10 92 67 00 	sts	0x0067, r1
 1f2:	10 92 6a 00 	sts	0x006A, r1
 1f6:	10 92 69 00 	sts	0x0069, r1
}
 1fa:	08 95       	ret

000001fc <rf_transmit>:
	csn1;
	Wait(1);
}

void rf_transmit(unsigned char CCdata)//*******************************************************8
{
 1fc:	68 2f       	mov	r22, r24
	cli();
 1fe:	f8 94       	cli
	flag=1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 63 00 	sts	0x0063, r24
	cc_writereg(0x3f,CCdata);
 206:	8f e3       	ldi	r24, 0x3F	; 63
 208:	54 df       	rcall	.-344    	; 0xb2 <cc_writereg>
	cc_strobe(0x35);
 20a:	85 e3       	ldi	r24, 0x35	; 53
 20c:	26 df       	rcall	.-436    	; 0x5a <cc_strobe>
	while(!gd0);
 20e:	b2 9b       	sbis	0x16, 2	; 22
 210:	fe cf       	rjmp	.-4      	; 0x20e <rf_transmit+0x12>
	//lcd_string("2");
	while(gd0);
 212:	b2 99       	sbic	0x16, 2	; 22
 214:	fe cf       	rjmp	.-4      	; 0x212 <rf_transmit+0x16>
	cc_strobe(0x3A);  			//flux rxfifo
 216:	8a e3       	ldi	r24, 0x3A	; 58
 218:	20 df       	rcall	.-448    	; 0x5a <cc_strobe>
	cc_strobe(0x3B); 			//flux txfifo
 21a:	8b e3       	ldi	r24, 0x3B	; 59
 21c:	1e df       	rcall	.-452    	; 0x5a <cc_strobe>
	Wait(1);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	27 df       	rcall	.-434    	; 0x70 <Wait>
	cc_strobe(0x36); 			//ideale mode 
 222:	86 e3       	ldi	r24, 0x36	; 54
 224:	1a df       	rcall	.-460    	; 0x5a <cc_strobe>
	cc_strobe(0x34); 			//receiver mode
 226:	84 e3       	ldi	r24, 0x34	; 52
 228:	18 df       	rcall	.-464    	; 0x5a <cc_strobe>
	Wait(1); 
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	21 df       	rcall	.-446    	; 0x70 <Wait>
	sei();
 22e:	78 94       	sei
}
 230:	08 95       	ret

00000232 <cc_readreg>:

void cc_readreg(char add)//*******************************************************************9
{
	csn0;
 232:	c4 98       	cbi	0x18, 4	; 24
	while(miso);
 234:	b6 99       	sbic	0x16, 6	; 22
 236:	fe cf       	rjmp	.-4      	; 0x234 <cc_readreg+0x2>
	SPDR=(add|0x80);
 238:	80 68       	ori	r24, 0x80	; 128
 23a:	8f b9       	out	0x0f, r24	; 15
	Wait(1);	
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	18 df       	rcall	.-464    	; 0x70 <Wait>
	while((SPSR&0x80)==0);		//pull the ss line to down to activate slave 
 240:	77 9b       	sbis	0x0e, 7	; 14
 242:	fe cf       	rjmp	.-4      	; 0x240 <cc_readreg+0xe>
	SPDR=0;						//place data on spi resistor
 244:	1f b8       	out	0x0f, r1	; 15
	while((SPSR&0x80)==0);		//wait foe the spi transmittion complit
 246:	77 9b       	sbis	0x0e, 7	; 14
 248:	fe cf       	rjmp	.-4      	; 0x246 <cc_readreg+0x14>
	csn1;						//pull the ss line to up to deactivate the slave
 24a:	c4 9a       	sbi	0x18, 4	; 24
	retval = SPDR;
 24c:	8f b1       	in	r24, 0x0f	; 15
 24e:	80 93 69 00 	sts	0x0069, r24
}
 252:	08 95       	ret

00000254 <rf_receive>:

void rf_receive() //**************************************************************************10
{
	cc_readreg(0x3F);
 254:	8f e3       	ldi	r24, 0x3F	; 63
 256:	ed df       	rcall	.-38     	; 0x232 <cc_readreg>
	cc_data=retval;
 258:	80 91 69 00 	lds	r24, 0x0069
 25c:	80 93 61 00 	sts	0x0061, r24
	Wait(5);
 260:	85 e0       	ldi	r24, 0x05	; 5
 262:	06 df       	rcall	.-500    	; 0x70 <Wait>
	cc_strobe(0x3A);  			//flux rxfifo
 264:	8a e3       	ldi	r24, 0x3A	; 58
 266:	f9 de       	rcall	.-526    	; 0x5a <cc_strobe>
	Wait(1);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	02 df       	rcall	.-508    	; 0x70 <Wait>
	cc_strobe(0x36); 			//ideale mode 
 26c:	86 e3       	ldi	r24, 0x36	; 54
 26e:	f5 de       	rcall	.-534    	; 0x5a <cc_strobe>
	Wait(1);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	fe de       	rcall	.-516    	; 0x70 <Wait>
	cc_strobe(0x34);			//receive mode
 274:	84 e3       	ldi	r24, 0x34	; 52
 276:	f1 de       	rcall	.-542    	; 0x5a <cc_strobe>
	Wait(1);	
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	fa de       	rcall	.-524    	; 0x70 <Wait>
}
 27c:	08 95       	ret

0000027e <cc_writereg_B>:
/*******************************BURST (MULTI) MODE COMMUNICATION********************************/
/********Check that in ISR rf_recieve_B(); is uncommented & rf_receive(); is commented**********/

void cc_writereg_B(char add,char data1,char data2,char data3)//********************************11
{
	csn0;
 27e:	c4 98       	cbi	0x18, 4	; 24
	while(miso);
 280:	b6 99       	sbic	0x16, 6	; 22
 282:	fe cf       	rjmp	.-4      	; 0x280 <cc_writereg_B+0x2>
	SPDR=add;
 284:	8f b9       	out	0x0f, r24	; 15
	while((SPSR&0x80)==0);		//pull the ss line to down to activate slave 
 286:	77 9b       	sbis	0x0e, 7	; 14
 288:	fe cf       	rjmp	.-4      	; 0x286 <cc_writereg_B+0x8>
	SPDR=data1;					//place data on spi resistor
 28a:	6f b9       	out	0x0f, r22	; 15
	while((SPSR&0x80)==0);		//pull the ss line to down to activate slave 
 28c:	77 9b       	sbis	0x0e, 7	; 14
 28e:	fe cf       	rjmp	.-4      	; 0x28c <cc_writereg_B+0xe>
	SPDR=data2;					//place data on spi resistor
 290:	4f b9       	out	0x0f, r20	; 15
	while((SPSR&0x80)==0);		//pull the ss line to down to activate slave 
 292:	77 9b       	sbis	0x0e, 7	; 14
 294:	fe cf       	rjmp	.-4      	; 0x292 <cc_writereg_B+0x14>
	SPDR=data3;					//place data on spi resistor
 296:	2f b9       	out	0x0f, r18	; 15
	while((SPSR&0x80)==0);		//wait foe the spi transmittion complit
 298:	77 9b       	sbis	0x0e, 7	; 14
 29a:	fe cf       	rjmp	.-4      	; 0x298 <cc_writereg_B+0x1a>
	csn1;
 29c:	c4 9a       	sbi	0x18, 4	; 24
	Wait(1);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	e7 de       	rcall	.-562    	; 0x70 <Wait>
}
 2a2:	08 95       	ret

000002a4 <rf_transmit_B>:

void rf_transmit_B(unsigned char CCdata1, unsigned char CCdata2, unsigned char CCdata3)//*******12
{
 2a4:	98 2f       	mov	r25, r24
 2a6:	36 2f       	mov	r19, r22
 2a8:	24 2f       	mov	r18, r20
	cli();
 2aa:	f8 94       	cli
	flag=1;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 63 00 	sts	0x0063, r24
	cc_writereg_B(0x7f,CCdata1,CCdata2,CCdata3);
 2b2:	8f e7       	ldi	r24, 0x7F	; 127
 2b4:	69 2f       	mov	r22, r25
 2b6:	43 2f       	mov	r20, r19
 2b8:	e2 df       	rcall	.-60     	; 0x27e <cc_writereg_B>
	cc_strobe(0x35);			//transmitter mode
 2ba:	85 e3       	ldi	r24, 0x35	; 53
 2bc:	ce de       	rcall	.-612    	; 0x5a <cc_strobe>
	while(!gd0);
 2be:	b2 9b       	sbis	0x16, 2	; 22
 2c0:	fe cf       	rjmp	.-4      	; 0x2be <rf_transmit_B+0x1a>
	while(gd0);
 2c2:	b2 99       	sbic	0x16, 2	; 22
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <rf_transmit_B+0x1e>
	cc_strobe(0x3A);    		//flux rxfifo
 2c6:	8a e3       	ldi	r24, 0x3A	; 58
 2c8:	c8 de       	rcall	.-624    	; 0x5a <cc_strobe>
	cc_strobe(0x3B);  			//flux txfifo
 2ca:	8b e3       	ldi	r24, 0x3B	; 59
 2cc:	c6 de       	rcall	.-628    	; 0x5a <cc_strobe>
	Wait(1);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	cf de       	rcall	.-610    	; 0x70 <Wait>
	cc_strobe(0x36);   			//ideale mode 
 2d2:	86 e3       	ldi	r24, 0x36	; 54
 2d4:	c2 de       	rcall	.-636    	; 0x5a <cc_strobe>
	cc_strobe(0x34);    		//receiver mode
 2d6:	84 e3       	ldi	r24, 0x34	; 52
 2d8:	c0 de       	rcall	.-640    	; 0x5a <cc_strobe>
	Wait(1); 
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	c9 de       	rcall	.-622    	; 0x70 <Wait>
	sei();
 2de:	78 94       	sei
}
 2e0:	08 95       	ret

000002e2 <cc_readreg_B>:

void cc_readreg_B(char add)//********************************************************************13
{
	csn0;
 2e2:	c4 98       	cbi	0x18, 4	; 24
	while(miso);
 2e4:	b6 99       	sbic	0x16, 6	; 22
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <cc_readreg_B+0x2>
	SPDR=(add|0x80);
 2e8:	80 68       	ori	r24, 0x80	; 128
 2ea:	8f b9       	out	0x0f, r24	; 15
	Wait(1);	
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	c0 de       	rcall	.-640    	; 0x70 <Wait>
	while((SPSR&0x80)==0);		//pull the ss line to down to activate slave 
 2f0:	77 9b       	sbis	0x0e, 7	; 14
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <cc_readreg_B+0xe>
  
	SPDR=0;						//place data on spi resistor
 2f4:	1f b8       	out	0x0f, r1	; 15
	while((SPSR&0x80)==0);		//pull the ss line to down to activate slave 
 2f6:	77 9b       	sbis	0x0e, 7	; 14
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <cc_readreg_B+0x14>
	retval1 = SPDR;
 2fa:	8f b1       	in	r24, 0x0f	; 15
 2fc:	80 93 6a 00 	sts	0x006A, r24
  
	SPDR=0;						//place data on spi resistor
 300:	1f b8       	out	0x0f, r1	; 15
	while((SPSR&0x80)==0);		//pull the ss line to down to activate slave 
 302:	77 9b       	sbis	0x0e, 7	; 14
 304:	fe cf       	rjmp	.-4      	; 0x302 <cc_readreg_B+0x20>
	retval2 = SPDR;
 306:	8f b1       	in	r24, 0x0f	; 15
 308:	80 93 67 00 	sts	0x0067, r24
  
	SPDR=0;						//place data on spi resistor
 30c:	1f b8       	out	0x0f, r1	; 15
	while((SPSR&0x80)==0);		//wait foe the spi transmittion complit
 30e:	77 9b       	sbis	0x0e, 7	; 14
 310:	fe cf       	rjmp	.-4      	; 0x30e <cc_readreg_B+0x2c>
	retval3 = SPDR;
 312:	8f b1       	in	r24, 0x0f	; 15
 314:	80 93 60 00 	sts	0x0060, r24
  
	csn1;						//pull the ss line to up to deactivate the slave
 318:	c4 9a       	sbi	0x18, 4	; 24
}
 31a:	08 95       	ret

0000031c <rf_receive_B>:

void rf_receive_B() //***************************************************************************14
{
	cc_readreg_B(0x7F);
 31c:	8f e7       	ldi	r24, 0x7F	; 127
 31e:	e1 df       	rcall	.-62     	; 0x2e2 <cc_readreg_B>
	cc_data1=retval1;
 320:	80 91 6a 00 	lds	r24, 0x006A
 324:	80 93 66 00 	sts	0x0066, r24
	cc_data2=retval2;
 328:	80 91 67 00 	lds	r24, 0x0067
 32c:	80 93 62 00 	sts	0x0062, r24
	cc_data3=retval3;
 330:	80 91 60 00 	lds	r24, 0x0060
 334:	80 93 68 00 	sts	0x0068, r24
	//LCD_showvalue(retval1);
	//LCD_gotoXY(29,5);
	//LCD_showvalue(retval2);
	//LCD_gotoXY(57,5);
	//LCD_showvalue(retval3);
	Wait(5);
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	9a de       	rcall	.-716    	; 0x70 <Wait>
	cc_strobe(0x3A);  			//flux rxfifo
 33c:	8a e3       	ldi	r24, 0x3A	; 58
 33e:	8d de       	rcall	.-742    	; 0x5a <cc_strobe>
	Wait(1);
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	96 de       	rcall	.-724    	; 0x70 <Wait>
	cc_strobe(0x36);  			//ideale mode 
 344:	86 e3       	ldi	r24, 0x36	; 54
 346:	89 de       	rcall	.-750    	; 0x5a <cc_strobe>
	Wait(1);
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	92 de       	rcall	.-732    	; 0x70 <Wait>
	cc_strobe(0x34);			//receive mode
 34c:	84 e3       	ldi	r24, 0x34	; 52
 34e:	85 de       	rcall	.-758    	; 0x5a <cc_strobe>
	Wait(1);	
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	8e de       	rcall	.-740    	; 0x70 <Wait>
}
 354:	08 95       	ret

00000356 <__vector_18>:

/**************************************************************************************************************************************************/
unsigned char retval,retval1,retval2,retval3,flag,cc_data,cc_data1,cc_data2,cc_data3;

ISR (INT2_vect) //****************************************************************************0
{ 
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	2f 93       	push	r18
 362:	3f 93       	push	r19
 364:	4f 93       	push	r20
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
	if(flag==0)
 378:	80 91 63 00 	lds	r24, 0x0063
 37c:	88 23       	and	r24, r24
 37e:	11 f4       	brne	.+4      	; 0x384 <__vector_18+0x2e>
	{
		//rf_receive();  	//Comment or Uncomment for normal mode communication
		rf_receive_B();   	//Comment or Uncomment for burst mode communication
 380:	cd df       	rcall	.-102    	; 0x31c <rf_receive_B>
 382:	02 c0       	rjmp	.+4      	; 0x388 <__vector_18+0x32>
    }
	else
	{
		flag=0;
 384:	10 92 63 00 	sts	0x0063, r1
	}
}
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	7f 91       	pop	r23
 396:	6f 91       	pop	r22
 398:	5f 91       	pop	r21
 39a:	4f 91       	pop	r20
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <delayms>:
*/
#ifndef _DELAY_H_
#define _DELAY_H_
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{
 3aa:	20 91 64 00 	lds	r18, 0x0064
 3ae:	30 91 65 00 	lds	r19, 0x0065
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	16 c0       	rjmp	.+44     	; 0x3e4 <delayms+0x3a>
	...
	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
		  {
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 3d0:	2f 5f       	subi	r18, 0xFF	; 255
 3d2:	3f 4f       	sbci	r19, 0xFF	; 255
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
 3d4:	63 e0       	ldi	r22, 0x03	; 3
 3d6:	22 32       	cpi	r18, 0x22	; 34
 3d8:	36 07       	cpc	r19, r22
 3da:	71 f7       	brne	.-36     	; 0x3b8 <delayms+0xe>
 3dc:	4f 5f       	subi	r20, 0xFF	; 255
 3de:	5f 4f       	sbci	r21, 0xFF	; 255
 3e0:	21 e2       	ldi	r18, 0x21	; 33
 3e2:	33 e0       	ldi	r19, 0x03	; 3
#define _DELAY_H_
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 3e4:	84 17       	cp	r24, r20
 3e6:	95 07       	cpc	r25, r21
 3e8:	18 f0       	brcs	.+6      	; 0x3f0 <delayms+0x46>
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	f0 cf       	rjmp	.-32     	; 0x3d0 <delayms+0x26>
 3f0:	30 93 65 00 	sts	0x0065, r19
 3f4:	20 93 64 00 	sts	0x0064, r18
 3f8:	50 93 6c 00 	sts	0x006C, r21
 3fc:	40 93 6b 00 	sts	0x006B, r20
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  }
		
	 }
}
 400:	08 95       	ret

00000402 <delayus>:

void delayus(unsigned int delaytime)
{
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	0c c0       	rjmp	.+24     	; 0x420 <delayus+0x1e>
	...

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
 41c:	2f 5f       	subi	r18, 0xFF	; 255
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
}

void delayus(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 420:	82 17       	cp	r24, r18
 422:	93 07       	cpc	r25, r19
 424:	88 f7       	brcc	.-30     	; 0x408 <delayus+0x6>
 426:	30 93 6c 00 	sts	0x006C, r19
 42a:	20 93 6b 00 	sts	0x006B, r18
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
	 }
}
 42e:	08 95       	ret

00000430 <main>:
#include <avr/io.h >
#include "cc2500b.h"
#include "delay.h"
int main()
{
rf_init();
 430:	ba de       	rcall	.-652    	; 0x1a6 <rf_init>
DDRD=0xF0;
 432:	80 ef       	ldi	r24, 0xF0	; 240
 434:	81 bb       	out	0x11, r24	; 17
PORTD=0X00;
 436:	12 ba       	out	0x12, r1	; 18
while(1)
 {
 PORTD=cc_data3;
 438:	80 91 68 00 	lds	r24, 0x0068
 43c:	82 bb       	out	0x12, r24	; 18
 delayms(10);
 43e:	8a e0       	ldi	r24, 0x0A	; 10
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	b3 df       	rcall	.-154    	; 0x3aa <delayms>
 444:	f9 cf       	rjmp	.-14     	; 0x438 <main+0x8>

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>

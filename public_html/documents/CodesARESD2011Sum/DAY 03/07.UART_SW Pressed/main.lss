
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000008f4  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000072a  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ee ea       	ldi	r30, 0xAE	; 174
  3e:	f1 e0       	ldi	r31, 0x01	; 1
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	a0 36       	cpi	r26, 0x60	; 96
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a0 36       	cpi	r26, 0x60	; 96
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	65 d0       	rcall	.+202    	; 0x128 <main>
  5e:	a6 c0       	rjmp	.+332    	; 0x1ac <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <uart_init>:
#define _UART_H_

void uart_init()
{
	UCSRA=0x00;
  62:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x18;
  64:	88 e1       	ldi	r24, 0x18	; 24
  66:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
  68:	86 e8       	ldi	r24, 0x86	; 134
  6a:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x67;
  6e:	87 e6       	ldi	r24, 0x67	; 103
  70:	89 b9       	out	0x09, r24	; 9
  72:	08 95       	ret

00000074 <uart_read>:
}

void uart_char(unsigned char uchar)
{
	UDR=uchar;
	while((UCSRA&0x40)==0x00);
	delayuart(1000);
}
 
void uart_string(const unsigned char *ustring)
{
	while ( *ustring )
	{
		UDR=*ustring++;
		while((UCSRA&0x40)==0x00);
		delayuart(1000);
	}
}
 
void uart_num(unsigned char num)
{
    unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);	
}
 
unsigned char uart_read()
{
	while((UCSRA&0x80)==0x00);
  74:	5f 9b       	sbis	0x0b, 7	; 11
  76:	fe cf       	rjmp	.-4      	; 0x74 <uart_read>
	return UDR;
  78:	8c b1       	in	r24, 0x0c	; 12
}
  7a:	99 27       	eor	r25, r25
  7c:	08 95       	ret

0000007e <delayuart>:
 
void delayuart(unsigned int delaytime)
{
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	30 e0       	ldi	r19, 0x00	; 0
	...
	unsigned int dc;
	for(dc=0;dc<=delaytime;dc++)
  96:	2f 5f       	subi	r18, 0xFF	; 255
  98:	3f 4f       	sbci	r19, 0xFF	; 255
  9a:	82 17       	cp	r24, r18
  9c:	93 07       	cpc	r25, r19
  9e:	88 f7       	brcc	.-30     	; 0x82 <delayuart+0x4>
  a0:	08 95       	ret

000000a2 <uart_string>:
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	ec 01       	movw	r28, r24
  a8:	07 c0       	rjmp	.+14     	; 0xb8 <uart_string+0x16>
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	5e 9b       	sbis	0x0b, 6	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <uart_string+0xa>
  b0:	21 96       	adiw	r28, 0x01	; 1
  b2:	88 ee       	ldi	r24, 0xE8	; 232
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	e3 df       	rcall	.-58     	; 0x7e <delayuart>
  b8:	88 81       	ld	r24, Y
  ba:	88 23       	and	r24, r24
  bc:	b1 f7       	brne	.-20     	; 0xaa <uart_string+0x8>
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <uart_char>:
  c4:	8c b9       	out	0x0c, r24	; 12
  c6:	5e 9b       	sbis	0x0b, 6	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <uart_char+0x2>
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	d7 df       	rcall	.-82     	; 0x7e <delayuart>
  d0:	08 95       	ret

000000d2 <uart_num>:
  d2:	df 92       	push	r13
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	d8 2e       	mov	r13, r24
  de:	64 e6       	ldi	r22, 0x64	; 100
  e0:	32 d0       	rcall	.+100    	; 0x146 <__udivmodqi4>
  e2:	28 2f       	mov	r18, r24
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	e8 2e       	mov	r14, r24
  e8:	2e 9d       	mul	r18, r14
  ea:	70 01       	movw	r14, r0
  ec:	11 24       	eor	r1, r1
  ee:	8d 2d       	mov	r24, r13
  f0:	99 27       	eor	r25, r25
  f2:	8e 19       	sub	r24, r14
  f4:	9f 09       	sbc	r25, r15
  f6:	6a e0       	ldi	r22, 0x0A	; 10
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	31 d0       	rcall	.+98     	; 0x15e <__divmodhi4>
  fc:	8b 01       	movw	r16, r22
  fe:	82 2f       	mov	r24, r18
 100:	80 5d       	subi	r24, 0xD0	; 208
 102:	e0 df       	rcall	.-64     	; 0xc4 <uart_char>
 104:	80 2f       	mov	r24, r16
 106:	80 5d       	subi	r24, 0xD0	; 208
 108:	dd df       	rcall	.-70     	; 0xc4 <uart_char>
 10a:	de 18       	sub	r13, r14
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	08 9f       	mul	r16, r24
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	d8 1a       	sub	r13, r24
 116:	8d 2d       	mov	r24, r13
 118:	80 5d       	subi	r24, 0xD0	; 208
 11a:	d4 df       	rcall	.-88     	; 0xc4 <uart_char>
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	ef 90       	pop	r14
 124:	df 90       	pop	r13
 126:	08 95       	ret

00000128 <main>:
#include<avr/io.h>		//This is the header file for AVR microcontroller
#include"uart.h"		//This is the header file for UART Communication

int main(void)
{
 128:	1f 93       	push	r17
	unsigned char x;
	uart_init();
 12a:	9b df       	rcall	.-202    	; 0x62 <uart_init>
	DDRA=0x00;
 12c:	1a ba       	out	0x1a, r1	; 26
	PORTA=0x10;
 12e:	80 e1       	ldi	r24, 0x10	; 16
 130:	8b bb       	out	0x1b, r24	; 27
	
	while(1)
	{
		if((PINA & 0x10)==0x00)
 132:	cc 99       	sbic	0x19, 4	; 25
 134:	fe cf       	rjmp	.-4      	; 0x132 <main+0xa>
		{
			while((PINA & 0x10)==0x00);
 136:	cc 9b       	sbis	0x19, 4	; 25
 138:	fe cf       	rjmp	.-4      	; 0x136 <main+0xe>
			x++;
 13a:	1f 5f       	subi	r17, 0xFF	; 255
			uart_num(x);
 13c:	81 2f       	mov	r24, r17
 13e:	c9 df       	rcall	.-110    	; 0xd2 <uart_num>
			uart_char(13);
 140:	8d e0       	ldi	r24, 0x0D	; 13
 142:	c0 df       	rcall	.-128    	; 0xc4 <uart_char>
 144:	f6 cf       	rjmp	.-20     	; 0x132 <main+0xa>

00000146 <__udivmodqi4>:
 146:	99 1b       	sub	r25, r25
 148:	79 e0       	ldi	r23, 0x09	; 9
 14a:	04 c0       	rjmp	.+8      	; 0x154 <__udivmodqi4_ep>

0000014c <__udivmodqi4_loop>:
 14c:	99 1f       	adc	r25, r25
 14e:	96 17       	cp	r25, r22
 150:	08 f0       	brcs	.+2      	; 0x154 <__udivmodqi4_ep>
 152:	96 1b       	sub	r25, r22

00000154 <__udivmodqi4_ep>:
 154:	88 1f       	adc	r24, r24
 156:	7a 95       	dec	r23
 158:	c9 f7       	brne	.-14     	; 0x14c <__udivmodqi4_loop>
 15a:	80 95       	com	r24
 15c:	08 95       	ret

0000015e <__divmodhi4>:
 15e:	97 fb       	bst	r25, 7
 160:	09 2e       	mov	r0, r25
 162:	07 26       	eor	r0, r23
 164:	0a d0       	rcall	.+20     	; 0x17a <__divmodhi4_neg1>
 166:	77 fd       	sbrc	r23, 7
 168:	04 d0       	rcall	.+8      	; 0x172 <__divmodhi4_neg2>
 16a:	0c d0       	rcall	.+24     	; 0x184 <__udivmodhi4>
 16c:	06 d0       	rcall	.+12     	; 0x17a <__divmodhi4_neg1>
 16e:	00 20       	and	r0, r0
 170:	1a f4       	brpl	.+6      	; 0x178 <__divmodhi4_exit>

00000172 <__divmodhi4_neg2>:
 172:	70 95       	com	r23
 174:	61 95       	neg	r22
 176:	7f 4f       	sbci	r23, 0xFF	; 255

00000178 <__divmodhi4_exit>:
 178:	08 95       	ret

0000017a <__divmodhi4_neg1>:
 17a:	f6 f7       	brtc	.-4      	; 0x178 <__divmodhi4_exit>
 17c:	90 95       	com	r25
 17e:	81 95       	neg	r24
 180:	9f 4f       	sbci	r25, 0xFF	; 255
 182:	08 95       	ret

00000184 <__udivmodhi4>:
 184:	aa 1b       	sub	r26, r26
 186:	bb 1b       	sub	r27, r27
 188:	51 e1       	ldi	r21, 0x11	; 17
 18a:	07 c0       	rjmp	.+14     	; 0x19a <__udivmodhi4_ep>

0000018c <__udivmodhi4_loop>:
 18c:	aa 1f       	adc	r26, r26
 18e:	bb 1f       	adc	r27, r27
 190:	a6 17       	cp	r26, r22
 192:	b7 07       	cpc	r27, r23
 194:	10 f0       	brcs	.+4      	; 0x19a <__udivmodhi4_ep>
 196:	a6 1b       	sub	r26, r22
 198:	b7 0b       	sbc	r27, r23

0000019a <__udivmodhi4_ep>:
 19a:	88 1f       	adc	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	5a 95       	dec	r21
 1a0:	a9 f7       	brne	.-22     	; 0x18c <__udivmodhi4_loop>
 1a2:	80 95       	com	r24
 1a4:	90 95       	com	r25
 1a6:	bc 01       	movw	r22, r24
 1a8:	cd 01       	movw	r24, r26
 1aa:	08 95       	ret

000001ac <_exit>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <_exit>

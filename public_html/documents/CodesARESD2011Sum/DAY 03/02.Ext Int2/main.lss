
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000002be  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  00000360  2**0
                  ALLOC
  3 .stab         00000ae0  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007c9  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	ea c0       	rjmp	.+468    	; 0x1fa <__vector_18>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ee eb       	ldi	r30, 0xBE	; 190
  3e:	f2 e0       	ldi	r31, 0x02	; 2
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	ae 36       	cpi	r26, 0x6E	; 110
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	ae e6       	ldi	r26, 0x6E	; 110
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a1 37       	cpi	r26, 0x71	; 113
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	f3 d0       	rcall	.+486    	; 0x244 <main>
  5e:	2e c1       	rjmp	.+604    	; 0x2bc <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <delay_ns>:
}

void delay_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
  62:	10 92 6f 00 	sts	0x006F, r1
  66:	20 91 6e 00 	lds	r18, 0x006E
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	02 c0       	rjmp	.+4      	; 0x72 <delay_ns+0x10>
  6e:	9f 5f       	subi	r25, 0xFF	; 255
  70:	2b e0       	ldi	r18, 0x0B	; 11
  72:	98 17       	cp	r25, r24
  74:	e0 f3       	brcs	.-8      	; 0x6e <delay_ns+0xc>
  76:	20 93 6e 00 	sts	0x006E, r18
  7a:	90 93 6f 00 	sts	0x006F, r25
  7e:	08 95       	ret

00000080 <latch>:
  80:	aa 98       	cbi	0x15, 2	; 21
  82:	88 ec       	ldi	r24, 0xC8	; 200
  84:	ee df       	rcall	.-36     	; 0x62 <delay_ns>
  86:	aa 9a       	sbi	0x15, 2	; 21
  88:	88 ec       	ldi	r24, 0xC8	; 200
  8a:	eb df       	rcall	.-42     	; 0x62 <delay_ns>
  8c:	aa 98       	cbi	0x15, 2	; 21
  8e:	08 95       	ret

00000090 <lcd_cmd>:
	{
		for(k=0;k<11;k++)
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	08 2f       	mov	r16, r24
	PORTC&=~0x07;
  96:	85 b3       	in	r24, 0x15	; 21
  98:	88 7f       	andi	r24, 0xF8	; 248
  9a:	85 bb       	out	0x15, r24	; 21
	PORTC=((cmd&0xF0));			
  9c:	80 2f       	mov	r24, r16
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	85 bb       	out	0x15, r24	; 21
	latch();
  a2:	ee df       	rcall	.-36     	; 0x80 <latch>
	PORTC=(((cmd&(0x0F))*16));	
  a4:	11 27       	eor	r17, r17
  a6:	0f 70       	andi	r16, 0x0F	; 15
  a8:	10 70       	andi	r17, 0x00	; 0
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	00 0f       	add	r16, r16
  ae:	11 1f       	adc	r17, r17
  b0:	8a 95       	dec	r24
  b2:	e1 f7       	brne	.-8      	; 0xac <lcd_cmd+0x1c>
  b4:	05 bb       	out	0x15, r16	; 21
	latch();
  b6:	e4 df       	rcall	.-56     	; 0x80 <latch>
  b8:	1f 91       	pop	r17
  ba:	0f 91       	pop	r16
  bc:	08 95       	ret

000000be <lcd_char>:
}

void lcd_char(unsigned char single)
{
  be:	1f 93       	push	r17
  c0:	18 2f       	mov	r17, r24
	PORTC=0x01;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	85 bb       	out	0x15, r24	; 21
	PORTC=0x00;
  c6:	15 ba       	out	0x15, r1	; 21
	PORTC=(single&0xF0)|0x01;						
  c8:	81 2f       	mov	r24, r17
  ca:	80 7f       	andi	r24, 0xF0	; 240
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	85 bb       	out	0x15, r24	; 21
	latch();
  d0:	d7 df       	rcall	.-82     	; 0x80 <latch>
	PORTC=((single&(0x0F))*16)|0x01;
  d2:	12 95       	swap	r17
  d4:	10 7f       	andi	r17, 0xF0	; 240
  d6:	11 60       	ori	r17, 0x01	; 1
  d8:	15 bb       	out	0x15, r17	; 21
	latch();
  da:	d2 df       	rcall	.-92     	; 0x80 <latch>
  dc:	1f 91       	pop	r17
  de:	08 95       	ret

000000e0 <lcd_string>:
}

void lcd_string(unsigned char str[32])
{
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTC=0x01;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	85 bb       	out	0x15, r24	; 21
	PORTC=0X00;
  f2:	15 ba       	out	0x15, r1	; 21
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	11 c0       	rjmp	.+34     	; 0x11c <lcd_string+0x3c>

	while(str[k]!='\0')	//Till null character is encountered
	{
		if(k==16)
  fa:	90 31       	cpi	r25, 0x10	; 16
  fc:	11 f4       	brne	.+4      	; 0x102 <lcd_string+0x22>
		lcd_cmd(0XC0);
  fe:	80 ec       	ldi	r24, 0xC0	; 192
 100:	c7 df       	rcall	.-114    	; 0x90 <lcd_cmd>
		PORTC=((str[k])&0xF0)|0x01;
 102:	88 81       	ld	r24, Y
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	81 60       	ori	r24, 0x01	; 1
 108:	85 bb       	out	0x15, r24	; 21
		latch();
 10a:	ba df       	rcall	.-140    	; 0x80 <latch>
		PORTC=((str[k]&(0x0F))*16)|0x01;
 10c:	88 81       	ld	r24, Y
 10e:	82 95       	swap	r24
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	81 60       	ori	r24, 0x01	; 1
 114:	85 bb       	out	0x15, r24	; 21
		latch();
 116:	b4 df       	rcall	.-152    	; 0x80 <latch>
 118:	0f 5f       	subi	r16, 0xFF	; 255
 11a:	1f 4f       	sbci	r17, 0xFF	; 255
 11c:	90 2f       	mov	r25, r16
 11e:	e7 01       	movw	r28, r14
 120:	c0 0f       	add	r28, r16
 122:	d1 1d       	adc	r29, r1
 124:	88 81       	ld	r24, Y
 126:	88 23       	and	r24, r24
 128:	41 f7       	brne	.-48     	; 0xfa <lcd_string+0x1a>
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	ff 90       	pop	r15
 134:	ef 90       	pop	r14
 136:	08 95       	ret

00000138 <lcd_showvalue>:
		k++;
	}
}

void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	d8 2e       	mov	r13, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 144:	64 e6       	ldi	r22, 0x64	; 100
 146:	87 d0       	rcall	.+270    	; 0x256 <__udivmodqi4>
 148:	28 2f       	mov	r18, r24
	T=(num - (H*100))/10;
 14a:	94 e6       	ldi	r25, 0x64	; 100
 14c:	e9 2e       	mov	r14, r25
 14e:	8e 9d       	mul	r24, r14
 150:	70 01       	movw	r14, r0
 152:	11 24       	eor	r1, r1
 154:	8d 2d       	mov	r24, r13
 156:	99 27       	eor	r25, r25
 158:	8e 19       	sub	r24, r14
 15a:	9f 09       	sbc	r25, r15
 15c:	6a e0       	ldi	r22, 0x0A	; 10
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	86 d0       	rcall	.+268    	; 0x26e <__divmodhi4>
 162:	8b 01       	movw	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 164:	82 2f       	mov	r24, r18
 166:	80 5d       	subi	r24, 0xD0	; 208
 168:	aa df       	rcall	.-172    	; 0xbe <lcd_char>
	lcd_char(T+48);
 16a:	80 2f       	mov	r24, r16
 16c:	80 5d       	subi	r24, 0xD0	; 208
 16e:	a7 df       	rcall	.-178    	; 0xbe <lcd_char>
	lcd_char(O+48);
 170:	de 18       	sub	r13, r14
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	08 9f       	mul	r16, r24
 176:	c0 01       	movw	r24, r0
 178:	11 24       	eor	r1, r1
 17a:	d8 1a       	sub	r13, r24
 17c:	8d 2d       	mov	r24, r13
 17e:	80 5d       	subi	r24, 0xD0	; 208
 180:	9e df       	rcall	.-196    	; 0xbe <lcd_char>
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	df 90       	pop	r13
 18c:	08 95       	ret

0000018e <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
{
	if(row==0)
 18e:	88 23       	and	r24, r24
 190:	21 f4       	brne	.+8      	; 0x19a <lcd_gotoxy+0xc>
	{
		lcd_cmd(0x80+column);
 192:	86 2f       	mov	r24, r22
 194:	80 58       	subi	r24, 0x80	; 128
 196:	7c df       	rcall	.-264    	; 0x90 <lcd_cmd>
 198:	08 95       	ret
	}
	else if(row==1)
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	19 f4       	brne	.+6      	; 0x1a4 <lcd_gotoxy+0x16>
	{
		lcd_cmd(0xC0+column);	
 19e:	86 2f       	mov	r24, r22
 1a0:	80 54       	subi	r24, 0x40	; 64
 1a2:	76 df       	rcall	.-276    	; 0x90 <lcd_cmd>
 1a4:	08 95       	ret

000001a6 <delay_ms>:
	}	
}

void delay_ms(unsigned int ms)
{
 1a6:	09 c0       	rjmp	.+18     	; 0x1ba <delay_ms+0x14>
	int i;

	while (ms-- > 0)
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i = 0; i < 3276; ++i)
		asm("nop");
 1ac:	00 00       	nop
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	4c e0       	ldi	r20, 0x0C	; 12
 1b4:	2c 3c       	cpi	r18, 0xCC	; 204
 1b6:	34 07       	cpc	r19, r20
 1b8:	c9 f7       	brne	.-14     	; 0x1ac <delay_ms+0x6>
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	8f 3f       	cpi	r24, 0xFF	; 255
 1c0:	92 07       	cpc	r25, r18
 1c2:	91 f7       	brne	.-28     	; 0x1a8 <delay_ms+0x2>
 1c4:	08 95       	ret

000001c6 <lcd_init>:
 1c6:	84 e1       	ldi	r24, 0x14	; 20
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	ed df       	rcall	.-38     	; 0x1a6 <delay_ms>
 1cc:	85 b3       	in	r24, 0x15	; 21
 1ce:	80 93 70 00 	sts	0x0070, r24
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	84 bb       	out	0x14, r24	; 20
 1d6:	8f e0       	ldi	r24, 0x0F	; 15
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	e5 df       	rcall	.-54     	; 0x1a6 <delay_ms>
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	85 bb       	out	0x15, r24	; 21
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	56 df       	rcall	.-340    	; 0x90 <lcd_cmd>
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	54 df       	rcall	.-344    	; 0x90 <lcd_cmd>
 1e8:	80 e8       	ldi	r24, 0x80	; 128
 1ea:	52 df       	rcall	.-348    	; 0x90 <lcd_cmd>
 1ec:	84 e1       	ldi	r24, 0x14	; 20
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	da df       	rcall	.-76     	; 0x1a6 <delay_ms>
 1f2:	08 95       	ret

000001f4 <lcd_clear>:
	}
}

void lcd_clear()
{
	lcd_cmd(0x01);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	4c df       	rcall	.-360    	; 0x90 <lcd_cmd>
 1f8:	08 95       	ret

000001fa <__vector_18>:
#include<avr/interrupt.h> 	//Header file for AVR microcontroller Interrupt
#include"lcd.h"

ISR (INT2_vect)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	lcd_string(" ok");
 21c:	80 e6       	ldi	r24, 0x60	; 96
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	5f df       	rcall	.-322    	; 0xe0 <lcd_string>
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <main>:
}

int main(void)
{
	MCUCR=0x00;				//falling edge
 244:	15 be       	out	0x35, r1	; 53
	GICR=0x20;				//interrupt 2 enabled
 246:	80 e2       	ldi	r24, 0x20	; 32
 248:	8b bf       	out	0x3b, r24	; 59
	lcd_init();
 24a:	bd df       	rcall	.-134    	; 0x1c6 <lcd_init>
	lcd_string("Ext INT2");
 24c:	84 e6       	ldi	r24, 0x64	; 100
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	47 df       	rcall	.-370    	; 0xe0 <lcd_string>
	sei();					//Global Interrupt Enable
 252:	78 94       	sei
 254:	ff cf       	rjmp	.-2      	; 0x254 <main+0x10>

00000256 <__udivmodqi4>:
 256:	99 1b       	sub	r25, r25
 258:	79 e0       	ldi	r23, 0x09	; 9
 25a:	04 c0       	rjmp	.+8      	; 0x264 <__udivmodqi4_ep>

0000025c <__udivmodqi4_loop>:
 25c:	99 1f       	adc	r25, r25
 25e:	96 17       	cp	r25, r22
 260:	08 f0       	brcs	.+2      	; 0x264 <__udivmodqi4_ep>
 262:	96 1b       	sub	r25, r22

00000264 <__udivmodqi4_ep>:
 264:	88 1f       	adc	r24, r24
 266:	7a 95       	dec	r23
 268:	c9 f7       	brne	.-14     	; 0x25c <__udivmodqi4_loop>
 26a:	80 95       	com	r24
 26c:	08 95       	ret

0000026e <__divmodhi4>:
 26e:	97 fb       	bst	r25, 7
 270:	09 2e       	mov	r0, r25
 272:	07 26       	eor	r0, r23
 274:	0a d0       	rcall	.+20     	; 0x28a <__divmodhi4_neg1>
 276:	77 fd       	sbrc	r23, 7
 278:	04 d0       	rcall	.+8      	; 0x282 <__divmodhi4_neg2>
 27a:	0c d0       	rcall	.+24     	; 0x294 <__udivmodhi4>
 27c:	06 d0       	rcall	.+12     	; 0x28a <__divmodhi4_neg1>
 27e:	00 20       	and	r0, r0
 280:	1a f4       	brpl	.+6      	; 0x288 <__divmodhi4_exit>

00000282 <__divmodhi4_neg2>:
 282:	70 95       	com	r23
 284:	61 95       	neg	r22
 286:	7f 4f       	sbci	r23, 0xFF	; 255

00000288 <__divmodhi4_exit>:
 288:	08 95       	ret

0000028a <__divmodhi4_neg1>:
 28a:	f6 f7       	brtc	.-4      	; 0x288 <__divmodhi4_exit>
 28c:	90 95       	com	r25
 28e:	81 95       	neg	r24
 290:	9f 4f       	sbci	r25, 0xFF	; 255
 292:	08 95       	ret

00000294 <__udivmodhi4>:
 294:	aa 1b       	sub	r26, r26
 296:	bb 1b       	sub	r27, r27
 298:	51 e1       	ldi	r21, 0x11	; 17
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <__udivmodhi4_ep>

0000029c <__udivmodhi4_loop>:
 29c:	aa 1f       	adc	r26, r26
 29e:	bb 1f       	adc	r27, r27
 2a0:	a6 17       	cp	r26, r22
 2a2:	b7 07       	cpc	r27, r23
 2a4:	10 f0       	brcs	.+4      	; 0x2aa <__udivmodhi4_ep>
 2a6:	a6 1b       	sub	r26, r22
 2a8:	b7 0b       	sbc	r27, r23

000002aa <__udivmodhi4_ep>:
 2aa:	88 1f       	adc	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	5a 95       	dec	r21
 2b0:	a9 f7       	brne	.-22     	; 0x29c <__udivmodhi4_loop>
 2b2:	80 95       	com	r24
 2b4:	90 95       	com	r25
 2b6:	bc 01       	movw	r22, r24
 2b8:	cd 01       	movw	r24, r26
 2ba:	08 95       	ret

000002bc <_exit>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <_exit>

   1               		.file	"main.c"
   2               		.arch atmega8535
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  69               	.global	delay_ns
  71               	delay_ns:
  73               	.Ltext1:
   1:lcd.h         **** /*	lcd.h
   2:lcd.h         **** *******************************************************************************************
   3:lcd.h         **** COPYRIGHT(C)Technophilia Systems
   4:lcd.h         **** Date:...............31st May 2011
   5:lcd.h         **** Author:.............Prasanta Kumar Nayak
   6:lcd.h         **** Organization:.......Technophilia Syestems
   7:lcd.h         **** compiler:...........WinAVR
   8:lcd.h         **** 
   9:lcd.h         **** Description:
  10:lcd.h         **** 
  11:lcd.h         **** 	This header files have enables some common functions of the LCD.
  12:lcd.h         **** 	Include this header file in your C code. 
  13:lcd.h         **** 	Call the lcd_init() function before calling any other functions to initialize the lcd.
  14:lcd.h         **** 
  15:lcd.h         **** Functions:
  16:lcd.h         **** 
  17:lcd.h         **** 	lcd_init();		Call this function before calling any other functions to initialize 
  18:lcd.h         **** 					the lcd.
  19:lcd.h         **** 	lcd_cmd();		This function is used to give any command instructions to the LCD.
  20:lcd.h         **** 					For e.g. lcd_cmd(0x01); will give the clear command.
  21:lcd.h         **** 	lcd_char();		This function will display a single character on the LCD display.
  22:lcd.h         **** 					For e.g. lcd_char(0x61); will display A. 
  23:lcd.h         **** 					Again lcd_char('b'); will display b.
  24:lcd.h         **** 	lcd_string();	This function will display a string.
  25:lcd.h         **** 					An e.g. of this would b like lcd_string("This is AVR");
  26:lcd.h         **** 	lcd_showvalue();This will show a 3-digit decimal value on the LCD. 
  27:lcd.h         **** 					For e.g. if we give lcd_showvalue(0xFF); then 255 will be displayed.
  28:lcd.h         **** 	lcd_gotoxy();	Will set the cursor at a particular position on of the LCD.
  29:lcd.h         **** 					So lcd_gotoxy(1,4); will set the cursor at the 2d row 3rd column.
  30:lcd.h         **** 					Row and columnAddress are starts from (0,0).
  31:lcd.h         **** 	lcd_clear();	To clear content of the LCD
  32:lcd.h         **** 	
  33:lcd.h         **** *******************************************************************************************/
  34:lcd.h         **** 
  35:lcd.h         **** #ifndef _LCD_H_
  36:lcd.h         **** #define _LCD_H_
  37:lcd.h         **** 
  38:lcd.h         **** unsigned char k=0,j=0;
  39:lcd.h         **** unsigned char save=0;
  40:lcd.h         **** 
  41:lcd.h         **** void lcd_init(void);
  42:lcd.h         **** void lcd_cmd(unsigned char cmd);
  43:lcd.h         **** void latch(void);
  44:lcd.h         **** void delay_ns(unsigned char tim);
  45:lcd.h         **** void lcd_char(unsigned char single);
  46:lcd.h         **** void lcd_string(unsigned char str[32]);
  47:lcd.h         **** void lcd_showvalue(unsigned char num);
  48:lcd.h         **** void lcd_gotoxy(unsigned char row,unsigned char column);
  49:lcd.h         **** void delay_ms(unsigned int ms);
  50:lcd.h         **** void lcd_clear();
  51:lcd.h         **** 
  52:lcd.h         **** void lcd_init(void)	//init the lcd
  53:lcd.h         **** {	
  54:lcd.h         **** 	delay_ms(20);
  55:lcd.h         **** 	save=PORTC;
  56:lcd.h         **** 	DDRC=0xFF;
  57:lcd.h         **** 	
  58:lcd.h         **** 	delay_ms(15);
  59:lcd.h         **** 	PORTC=0x20;
  60:lcd.h         **** 	lcd_cmd(0x01);
  61:lcd.h         **** 	lcd_cmd(0x02);
  62:lcd.h         **** 	lcd_cmd(0X80);
  63:lcd.h         **** 	delay_ms(20);
  64:lcd.h         **** }
  65:lcd.h         **** 
  66:lcd.h         **** void latch(void)
  67:lcd.h         **** {
  68:lcd.h         **** 	PORTC&=~0x04;
  69:lcd.h         **** 	delay_ns(200);  
  70:lcd.h         **** 	PORTC|=0x04;
  71:lcd.h         **** 	delay_ns(200);  
  72:lcd.h         **** 	PORTC&=~0x04;
  73:lcd.h         **** }
  74:lcd.h         **** 
  75:lcd.h         **** void delay_ns(unsigned char tim)
  76:lcd.h         **** {
  74               	gue end (size=0) */
  76               	.LM1:
  77               		sts j,__zero_reg__
  77:lcd.h         **** 	for(j=0;j<tim;j++)
  78               	 r18,k
  79               		ldi r25,lo8(0)
  80 0000 1092 0000 		rjmp .L2
  81 0004 2091 0000 	.L3:
  83 000a 00C0      	.LM2:
  84               		subi r25,lo8(-(1))
  85               		ldi r18,lo8(11)
  86               	.L2:
  87 000c 9F5F      		cp r25,r24
  88 000e 2BE0      		brlo .L3
  89               		sts k,r18
  90 0010 9817      		sts j,r25
  91 0012 00F0      	/* epilogue: frame size=0 */
  92 0014 2093 0000 		ret
  93 0018 9093 0000 	/* epilogue end (size=1) */
  94               	/* function delay_ns size 15 (14) */
  96               	.Lscope0:
  98               	.global	latch
 100               	latch:
 102               	.LM3:
 103               	/* prologue: frame size=0 */
 104               	/* prologue end (size=0) */
 106               	.LM4:
 107               		cbi 53-0x20,2
 109               	.LM5:
 110 001e AA98      		ldi r24,lo8(-56)
 111               		rcall delay_ns
 113 0020 88EC      	.LM6:
 114 0022 00D0      		sbi 53-0x20,2
 116               	.LM7:
 117 0024 AA9A      		ldi r24,lo8(-56)
 118               		rcall delay_ns
 120 0026 88EC      	.LM8:
 121 0028 00D0      		cbi 53-0x20,2
 122               	/* epilogue: frame size=0 */
 123               		ret
 124 002a AA98      	/* epilogue end (size=1) */
 125               	/* function latch size 8 (7) */
 127               	.Lscope1:
 130               	.global	lcd_cmd
 132               	lcd_cmd:
 134               	.LM9:
 135               	/* prologue: frame size=0 */
  78:lcd.h         **** 	{
  79:lcd.h         **** 		for(k=0;k<11;k++)
  80:lcd.h         **** 		{};
  81:lcd.h         **** 	}
  82:lcd.h         **** }
  83:lcd.h         **** 
  84:lcd.h         **** void lcd_cmd(unsigned char cmd)
  85:lcd.h         **** {
 136               	24
 138               	.LM10:
 139 002e 0F93      		in r24,53-0x20
 140 0030 1F93      		andi r24,lo8(-8)
 141               		out 53-0x20,r24
  86:lcd.h         **** 	PORTC&=~0x07;
 143               		mov r24,r16
 144               		andi r24,lo8(-16)
 145 0034 85B3      		out 53-0x20,r24
 147 0038 85BB      	.LM12:
  87:lcd.h         **** 	PORTC=((cmd&0xF0));			
 148               	l latch
 150 003a 802F      	.LM13:
 151 003c 807F      		clr r17
 152 003e 85BB      		andi r16,lo8(15)
  88:lcd.h         **** 	latch();
 153               	 r17,hi8(15)
 154               		ldi r24,4
 155 0040 00D0      	1:	lsl r16
  89:lcd.h         **** 	PORTC=(((cmd&(0x0F))*16));	
 156               	l r17
 157               		dec r24
 158 0042 1127      		brne 1b
 159 0044 0F70      		out 53-0x20,r16
 161 0048 84E0      	.LM14:
 162 004a 000F      		rcall latch
 163 004c 111F      	/* epilogue: frame size=0 */
 164 004e 8A95      		pop r17
 165 0050 01F4      		pop r16
 166 0052 05BB      		ret
  90:lcd.h         **** 	latch();
 167               	 end (size=3) */
 168               	/* function lcd_cmd size 23 (18) */
 170               	.Lscope2:
 173 005a 0895      	.global	lcd_char
 175               	lcd_char:
 177               	.LM15:
 178               	/* prologue: frame size=0 */
 179               		push r17
 180               	/* prologue end (size=1) */
 181               		mov r17,r24
  91:lcd.h         **** }
  92:lcd.h         **** 
  93:lcd.h         **** void lcd_char(unsigned char single)
  94:lcd.h         **** {
 183               	lo8(1)
 184               		out 53-0x20,r24
 186 005c 1F93      	.LM17:
 187               		out 53-0x20,__zero_reg__
  95:lcd.h         **** 	PORTC=0x01;
 189               	
 190               		mov r24,r17
 191 0060 81E0      		andi r24,lo8(-16)
 192 0062 85BB      		ori r24,lo8(1)
  96:lcd.h         **** 	PORTC=0x00;
 193               	t 53-0x20,r24
 195 0064 15BA      	.LM19:
  97:lcd.h         **** 	PORTC=(single&0xF0)|0x01;						
 196               	all latch
 198 0066 812F      	.LM20:
 199 0068 807F      		swap r17
 200 006a 8160      		andi r17,0xf0
 201 006c 85BB      		ori r17,lo8(1)
  98:lcd.h         **** 	latch();
 202               	3-0x20,r17
 204 006e 00D0      	.LM21:
  99:lcd.h         **** 	PORTC=((single&(0x0F))*16)|0x01;
 205               	all latch
 206               	/* epilogue: frame size=0 */
 207 0070 1295      		pop r17
 208 0072 107F      		ret
 209 0074 1160      	/* epilogue end (size=2) */
 210 0076 15BB      	/* function lcd_char size 17 (14) */
 100:lcd.h         **** 	latch();
 211               		lcd_char, .-lcd_char
 212               	.Lscope3:
 215 007a 1F91      	.global	lcd_string
 217               	lcd_string:
 219               	.LM22:
 220               	/* prologue: frame size=0 */
 221               		push r14
 222               		push r15
 223               		push r16
 224               		push r17
 225               		push r28
 101:lcd.h         **** }
 102:lcd.h         **** 
 103:lcd.h         **** void lcd_string(unsigned char str[32])
 104:lcd.h         **** {
 226               	ologue end (size=6) */
 227               		movw r14,r24
 229 007e EF92      	.LM23:
 230 0080 FF92      		ldi r24,lo8(1)
 231 0082 0F93      		out 53-0x20,r24
 233 0086 CF93      	.LM24:
 234 0088 DF93      		out 53-0x20,__zero_reg__
 235               		ldi r16,lo8(0)
 236 008a 7C01      		ldi r17,hi8(0)
 105:lcd.h         **** 	unsigned char k=0;
 106:lcd.h         **** 	PORTC=0x01;
 237               	.L14:
 239 008c 81E0      	.LM25:
 240 008e 85BB      		cpi r25,lo8(16)
 107:lcd.h         **** 	PORTC=0X00;
 241               	e .L15
 243 0090 15BA      	.LM26:
 244 0092 00E0      		ldi r24,lo8(-64)
 245 0094 10E0      		rcall lcd_cmd
 246 0096 00C0      	.L15:
 108:lcd.h         **** 
 109:lcd.h         **** 	while(str[k]!='\0')	//Till null character is encountered
 110:lcd.h         **** 	{
 111:lcd.h         **** 		if(k==16)
 248               		ld r24,Y
 249               		andi r24,lo8(-16)
 250 0098 9031      		ori r24,lo8(1)
 251 009a 01F4      		out 53-0x20,r24
 112:lcd.h         **** 		lcd_cmd(0XC0);
 252               	abn	68,0,114,.LM28-lcd_string
 253               	.LM28:
 254 009c 80EC      		rcall latch
 256               	.LM29:
 113:lcd.h         **** 		PORTC=((str[k])&0xF0)|0x01;
 257               	24,Y
 258               		swap r24
 259 00a0 8881      		andi r24,0xf0
 260 00a2 807F      		ori r24,lo8(1)
 261 00a4 8160      		out 53-0x20,r24
 114:lcd.h         **** 		latch();
 263               	
 264               		rcall latch
 265 00a8 00D0      		subi r16,lo8(-(1))
 115:lcd.h         **** 		PORTC=((str[k]&(0x0F))*16)|0x01;
 266               	bci r17,hi8(-(1))
 267               	.L13:
 268 00aa 8881      		mov r25,r16
 270 00ae 807F      	.LM31:
 271 00b0 8160      		movw r28,r14
 272 00b2 85BB      		add r28,r16
 116:lcd.h         **** 		latch();
 273               	9,__zero_reg__
 274               		ld r24,Y
 275 00b4 00D0      		tst r24
 276 00b6 0F5F      		brne .L14
 277 00b8 1F4F      	/* epilogue: frame size=0 */
 278               		pop r29
 279 00ba 902F      		pop r28
 280               		pop r17
 281               		pop r16
 282 00bc E701      		pop r15
 283 00be C00F      		pop r14
 284 00c0 D11D      		ret
 285 00c2 8881      	/* epilogue end (size=7) */
 286 00c4 8823      	/* function lcd_string size 44 (31) */
 291 00cc 1F91      	.Lscope4:
 294 00d2 EF90      	.global	lcd_showvalue
 296               	lcd_showvalue:
 298               	.LM32:
 299               	/* prologue: frame size=0 */
 300               		push r13
 301               		push r14
 302               		push r15
 303               		push r16
 304               		push r17
 305               	/* prologue end (size=5) */
 306               		mov r13,r24
 117:lcd.h         **** 		k++;
 118:lcd.h         **** 	}
 119:lcd.h         **** }
 120:lcd.h         **** 
 121:lcd.h         **** void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
 122:lcd.h         **** {
 308               	divmodqi4
 309               		mov r18,r24
 311 00d6 DF92      	.LM34:
 312 00d8 EF92      		ldi r25,lo8(100)
 313 00da FF92      		mov r14,r25
 314 00dc 0F93      		mul r24,r14
 315 00de 1F93      		movw r14,r0
 316               		clr r1
 317 00e0 D82E      		mov r24,r13
 123:lcd.h         **** 	unsigned char H=0,T=0,O=0;
 124:lcd.h         **** 	H=num/100;
 318               	sub r24,r14
 319               		sbc r25,r15
 320 00e2 64E6      		ldi r22,lo8(10)
 321 00e4 00D0      		ldi r23,hi8(10)
 322 00e6 282F      		rcall __divmodhi4
 125:lcd.h         **** 	T=(num - (H*100))/10;
 323               	 r16,r22
 325 00e8 94E6      	.LM35:
 326 00ea E92E      		mov r24,r18
 327 00ec 8E9D      		subi r24,lo8(-(48))
 328 00ee 7001      		rcall lcd_char
 330 00f2 8D2D      	.LM36:
 331 00f4 9927      		mov r24,r16
 332 00f6 8E19      		subi r24,lo8(-(48))
 333 00f8 9F09      		rcall lcd_char
 335 00fc 70E0      	.LM37:
 336 00fe 00D0      		sub r13,r14
 337 0100 8B01      		ldi r24,lo8(10)
 126:lcd.h         **** 	O=(num - (H*100) - (T*10));
 127:lcd.h         **** 	
 128:lcd.h         **** 	lcd_char(H+48);
 338               	ovw r24,r0
 339               		clr r1
 340 0102 822F      		sub r13,r24
 341 0104 805D      		mov r24,r13
 342 0106 00D0      		subi r24,lo8(-(48))
 129:lcd.h         **** 	lcd_char(T+48);
 343               	l lcd_char
 344               	/* epilogue: frame size=0 */
 345 0108 802F      		pop r17
 346 010a 805D      		pop r16
 347 010c 00D0      		pop r15
 130:lcd.h         **** 	lcd_char(O+48);
 348               	r14
 349               		pop r13
 350 010e DE18      		ret
 351 0110 8AE0      	/* epilogue end (size=6) */
 352 0112 089F      	/* function lcd_showvalue size 43 (32) */
 357 011c 805D      	.Lscope5:
 361 0122 0F91      	.global	lcd_gotoxy
 363 0126 EF90      	lcd_gotoxy:
 365 012a 0895      	.LM38:
 366               	/* prologue: frame size=0 */
 367               	/* prologue end (size=0) */
 369               	.LM39:
 370               		tst r24
 371               		brne .L22
 373               	.LM40:
 374               		mov r24,r22
 375               		subi r24,lo8(-(-128))
 376               		rcall lcd_cmd
 377               		ret
 378               	.L22:
 131:lcd.h         **** }
 132:lcd.h         **** 
 133:lcd.h         **** void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
 134:lcd.h         **** {
 379               	xy
 380               	.LM41:
 381               		cpi r24,lo8(1)
 382               		brne .L26
 135:lcd.h         **** 	if(row==0)
 383               	abn	68,0,141,.LM42-lcd_gotoxy
 384               	.LM42:
 385 012c 8823      		mov r24,r22
 386 012e 01F4      		subi r24,lo8(-(-64))
 136:lcd.h         **** 	{
 137:lcd.h         **** 		lcd_cmd(0x80+column);
 387               	ll lcd_cmd
 388               	.L26:
 389 0130 862F      		ret
 390 0132 8058      	/* epilogue: frame size=0 */
 391 0134 00D0      	/* epilogue: noreturn */
 392 0136 0895      	/* epilogue end (size=0) */
 393               	/* function lcd_gotoxy size 12 (12) */
 138:lcd.h         **** 	}
 139:lcd.h         **** 	else if(row==1)
 394               	lcd_gotoxy, .-lcd_gotoxy
 395               	.Lscope6:
 140:lcd.h         **** 	{
 141:lcd.h         **** 		lcd_cmd(0xC0+column);	
 398               	bal	delay_ms
 400 013c 862F      	delay_ms:
 402 0140 00D0      	.LM43:
 403               	/* prologue: frame size=0 */
 404 0142 0895      	/* prologue end (size=0) */
 405               		rjmp .L28
 406               	.L29:
 408               	.LM44:
 409               		ldi r18,lo8(0)
 410               		ldi r19,hi8(0)
 411               	.L30:
 413               	.LM45:
 414               	/* #APP */
 415               		nop
 142:lcd.h         **** 	}	
 143:lcd.h         **** }
 144:lcd.h         **** 
 145:lcd.h         **** void delay_ms(unsigned int ms)
 146:lcd.h         **** {
 416               	LM46-delay_ms
 417               	.LM46:
 418               	/* #NOAPP */
 419               		subi r18,lo8(-(1))
 420 0144 00C0      		sbci r19,hi8(-(1))
 421               		ldi r20,hi8(3276)
 147:lcd.h         **** 	int i;
 148:lcd.h         **** 
 149:lcd.h         **** 	while (ms-- > 0)
 422               	18,lo8(3276)
 423               		cpc r19,r20
 424 0146 20E0      		brne .L30
 425 0148 30E0      	.L28:
 150:lcd.h         **** 	{
 151:lcd.h         **** 		for (i = 0; i < 3276; ++i)
 152:lcd.h         **** 		asm("nop");
 427               	:
 428               		sbiw r24,1
 429               		ldi r18,hi8(-1)
 430 014a 0000      		cpi r24,lo8(-1)
 431               		cpc r25,r18
 432               		brne .L29
 433               	/* epilogue: frame size=0 */
 434 014c 2F5F      		ret
 435 014e 3F4F      	/* epilogue end (size=1) */
 436 0150 4CE0      	/* function delay_ms size 17 (16) */
 441               	.Lscope7:
 443 0158 0197      	.global	lcd_init
 445 015c 8F3F      	lcd_init:
 447 0160 01F4      	.LM48:
 448               	/* prologue: frame size=0 */
 449 0162 0895      	/* prologue end (size=0) */
 451               	.LM49:
 452               		ldi r24,lo8(20)
 453               		ldi r25,hi8(20)
 454               		rcall delay_ms
 456               	.LM50:
 457               		in r24,53-0x20
 458               		sts save,r24
 460               	.LM51:
 461               		ldi r24,lo8(-1)
 462               		out 52-0x20,r24
 464               	.LM52:
 465               		ldi r24,lo8(15)
 466               		ldi r25,hi8(15)
 467 0164 84E1      		rcall delay_ms
 469 0168 00D0      	.LM53:
 470               		ldi r24,lo8(32)
 471               		out 53-0x20,r24
 473 016c 8093 0000 	.LM54:
 474               		ldi r24,lo8(1)
 475               		rcall lcd_cmd
 477 0172 84BB      	.LM55:
 478               		ldi r24,lo8(2)
 479               		rcall lcd_cmd
 481 0176 90E0      	.LM56:
 482 0178 00D0      		ldi r24,lo8(-128)
 483               		rcall lcd_cmd
 485 017a 80E2      	.LM57:
 486 017c 85BB      		ldi r24,lo8(20)
 487               		ldi r25,hi8(20)
 488               		rcall delay_ms
 489 017e 81E0      	/* epilogue: frame size=0 */
 490 0180 00D0      		ret
 491               	/* epilogue end (size=1) */
 492               	/* function lcd_init size 23 (22) */
 494 0184 00D0      	.Lscope8:
 496               	.global	lcd_clear
 498 0188 00D0      	lcd_clear:
 500               	.LM58:
 501 018a 84E1      	/* prologue: frame size=0 */
 502 018c 90E0      	/* prologue end (size=0) */
 504               	.LM59:
 505 0190 0895      		ldi r24,lo8(1)
 506               		rcall lcd_cmd
 507               	/* epilogue: frame size=0 */
 508               		ret
 509               	/* epilogue end (size=1) */
 510               	/* function lcd_clear size 3 (2) */
 512               	.Lscope9:
 153:lcd.h         **** 	}
 154:lcd.h         **** }
 155:lcd.h         **** 
 156:lcd.h         **** void lcd_clear()
 157:lcd.h         **** {
 514               	
 516               	.Ltext2:
 158:lcd.h         **** 	lcd_cmd(0x01);
 518               	60:
 519               	/* prologue: frame size=0 */
 520 0192 81E0      	/* prologue end (size=0) */
 522               	.LM61:
 523 0196 0895      		sts (delaycounter1)+1,__zero_reg__
 524               		sts delaycounter1,__zero_reg__
 525               		ldi r18,lo8(0)
 526               		ldi r19,hi8(0)
 527               	.L40:
 529               	.LM62:
 530               		ldi r20,lo8(0)
 531               		ldi r21,hi8(0)
 532               	.L41:
 534               	.LM63:
   1:delay.h       **** /*	delay.h
   2:delay.h       **** *******************************************************************************************
   3:delay.h       **** COPYRIGHT(C)Technophilia Systems
   4:delay.h       **** Date:...............31st May 2011
   5:delay.h       **** Author:.............Prasanta Kumar Nayak
   6:delay.h       **** Organization:.......Technophilia Syestems
   7:delay.h       **** compiler:...........WinAVR
   8:delay.h       **** 
   9:delay.h       **** Description:
  10:delay.h       **** 
  11:delay.h       **** 	This header file generates time delay in the form of mili second and micro second
  12:delay.h       **** 	without affecting any interrupts.
  13:delay.h       **** 
  14:delay.h       **** Functions:
  15:delay.h       **** 
  16:delay.h       **** 	delayms();	  	This function provides delay in the form of mili second
  17:delay.h       **** 	delayus();	  	This function provides delay in the form of micro second
  18:delay.h       **** 	
  19:delay.h       **** *******************************************************************************************/
  20:delay.h       **** 
  21:delay.h       **** #ifndef _DELAY_H_
  22:delay.h       **** #define _DELAY_H_
  23:delay.h       **** 
  24:delay.h       **** unsigned int delaycounter1,delaycounter2;
  25:delay.h       **** 
  26:delay.h       **** void delayms(unsigned int delaytime)
  27:delay.h       **** {
 535               	nop
 536               		nop
 537               		nop
 538               		nop
  28:delay.h       **** 	for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 539               	
 541 0198 1092 0000 	.LM64:
 542 019c 1092 0000 		nop
 543 01a0 20E0      		nop
 544 01a2 30E0      		nop
 545               		nop
 546               		nop
 547               		nop
 548 01a4 40E0      	/* #NOAPP */
 549 01a6 50E0      		subi r20,lo8(-(1))
 550               		sbci r21,hi8(-(1))
  29:delay.h       **** 	{
  30:delay.h       **** 		for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
  31:delay.h       **** 		{
  32:delay.h       **** 			asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 551               	0,30,.LM65-delayms
 552               	.LM65:
 553               		ldi r22,hi8(801)
 554 01a8 0000      		cpi r20,lo8(801)
 555 01aa 0000      		cpc r21,r22
 556 01ac 0000      		brne .L41
 557 01ae 0000      		subi r18,lo8(-(1))
 558 01b0 0000      		sbci r19,hi8(-(1))
  33:delay.h       **** 			asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 560               	 #NOAPP */
 561               		subi r20,lo8(-(1))
 562 01b4 0000      		sbci r21,hi8(-(1))
 564 01b8 0000      	.LM65:
 565 01ba 0000      		ldi r22,hi8(801)
 566 01bc 0000      		cpi r20,lo8(801)
 567 01be 0000      		cpc r21,r22
 568               		brne .L41
 569 01c0 4F5F      		subi r18,lo8(-(1))
 570 01c2 5F4F      		sbci r19,hi8(-(1))
 572               	.LM66:
 573 01c4 63E0      		cp r24,r18
 574 01c6 4132      		cpc r25,r19
 575 01c8 5607      		brsh .L40
 576 01ca 01F4      		sts (delaycounter1)+1,r19
 577 01cc 2F5F      		sts delaycounter1,r18
 578 01ce 3F4F      		sts (delaycounter2)+1,r21
 579               		sts delaycounter2,r20
 580               	/* epilogue: frame size=0 */
 581 01d0 8217      		ret
 582 01d2 9307      	/* epilogue end (size=1) */
 583 01d4 00F4      	/* function delayms size 52 (51) */
 585 01da 2093 0000 	.Lscope10:
 588               	.global	delayus
 590               	delayus:
 592               	.LM67:
 593               	/* prologue: frame size=0 */
 594               	/* prologue end (size=0) */
 596               	.LM68:
 597               		sts (delaycounter1)+1,__zero_reg__
 598               		sts delaycounter1,__zero_reg__
  34:delay.h       **** 		}
  35:delay.h       **** 	}
  36:delay.h       **** }
  37:delay.h       **** 
  38:delay.h       **** void delayus(unsigned int delaytime)
  39:delay.h       **** {
 599               	68,0,39,.LM67-delayus
 600               	.LM67:
 601               	/* prologue: frame size=0 */
 602               	/* prologue end (size=0) */
  40:delay.h       **** 	for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 603               	,0,0,delayus
 605 01e8 1092 0000 	.global	delayus
 607 01f0 20E0      	delayus:
 609               	.LM67:
  41:delay.h       **** 	{
  42:delay.h       **** 		asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 610               		delayms, .-delayms
 611               	.Lscope10:
 614 01f6 0000      	.global	delayus
 616 01fa 0000      	delayus:
 618 01fe 0000      	.LM67:
  43:delay.h       **** 		asm("nop");asm("nop");asm("nop");asm("nop");
 619               		delayms, .-delayms
 620               	.Lscope10:
 623 0204 0000      	.global	delayus
 625               	delayus:
 627 020a 3F4F      	.LM67:
 628               	/* prologue: frame size=0 */
 629               	/* prologue end (size=0) */
 631 020e 9307      	.LM68:
 632 0210 00F4      		sts (delaycounter1)+1,__zero_reg__
 633 0212 3093 0000 		sts delaycounter1,__zero_reg__
 634 0216 2093 0000 		ldi r18,lo8(0)
 635               		ldi r19,hi8(0)
 636 021a 0895      	.L50:
 638               	.LM69:
 639               	/* #APP */
 640               		nop
 641               		nop
 642               		nop
 643 0000 4275 7A7A 		nop
 643      696E 6720 
 643      536F 756E 
 643      6400 
 644               		nop
 645               		nop
 647               	.LM70:
 648               		nop
 649               		nop
 650               		nop
   1:main.c        **** /***********************************************************************
   2:main.c        **** 
   3:main.c        **** CODE3.3: Program for when external interrupt 2 (INT2) than play Buzzer
   4:main.c        **** 
   5:main.c        **** ***********************************************************************
   6:main.c        **** COPYRIGHT(C)Technophilia Systems
   7:main.c        **** Date:...............1st May 2011
   8:main.c        **** Author:.............Prasanta Kumar Nayak
   9:main.c        **** Organization:.......Technophilia Syestems
  10:main.c        **** Target system:......AVR devlopment board s/n-107010
  11:main.c        **** Manufacturer:.......Technophilia Syestems
  12:main.c        **** Microcontroller:....ATmega-8535
  13:main.c        **** Clock:..............16mhz
  14:main.c        **** 
  15:main.c        **** ***********************************************************************/
  16:main.c        **** 
  17:main.c        **** #include<avr/io.h>
  18:main.c        **** #include<avr/interrupt.h> 	//Header file for AVR microcontroller Interrupt
  19:main.c        **** #include"lcd.h"
  20:main.c        **** #include"delay.h"
  21:main.c        **** 
  22:main.c        **** ISR (INT2_vect)
  23:main.c        **** {
 651               	reg__
 652               		ldi r18,lo8(0)
 653               		ldi r19,hi8(0)
 654 021c 1F92      	.L50:
 656 0220 0FB6      	.LM69:
 657 0222 0F92      	/* #APP */
 658 0224 1124      		nop
 659 0226 2F93      		nop
 660 0228 3F93      		nop
 661 022a 4F93      		nop
 662 022c 5F93      		nop
 663 022e 6F93      		nop
 665 0232 8F93      	.LM70:
 666 0234 9F93      		nop
 667 0236 AF93      		nop
 668 0238 BF93      		nop
 669 023a EF93      		nop
 670 023c FF93      	/* #NOAPP */
 671               		subi r18,lo8(-(1))
  24:main.c        **** 	PORTC=0x08;
 672               	0:
 674 023e 88E0      	.LM69:
 675 0240 85BB      	/* #APP */
  25:main.c        **** 	delayms(500);
 676               	n	68,0,40,.LM68-delayus
 677               	.LM68:
 678 0242 84EF      		sts (delaycounter1)+1,__zero_reg__
 679 0244 91E0      		sts delaycounter1,__zero_reg__
 680 0246 00D0      		ldi r18,lo8(0)
  26:main.c        **** 	PORTC=0x00;
 681               	ayus
 682               	.LM67:
 683 0248 15BA      	/* prologue: frame size=0 */
  27:main.c        **** 	delayms(500);
 684               	
 687 024c 91E0      	.global	delayus
  28:main.c        **** 	lcd_gotoxy(1,0);
 689               	=1) */
 690               	/* function delayms size 52 (51) */
 692 0252 81E0      	.Lscope10:
  29:main.c        **** 	lcd_string("Buzzing Sound");
 694               	r21
 695               		sts delaycounter2,r20
 696 0256 80E0      	/* epilogue: frame size=0 */
 697 0258 90E0      		ret
 698 025a 00D0      	/* epilogue end (size=1) */
 699               	/* function delayms size 52 (51) */
 701 025e EF91      	.Lscope10:
 704 0264 9F91      	.global	delayus
 706 0268 7F91      	delayus:
 708 026c 5F91      	.LM67:
 709 026e 4F91      	/* prologue: frame size=0 */
 710 0270 3F91      	/* prologue end (size=0) */
 712 0274 0F90      	.LM68:
 713 0276 0FBE      		sts (delaycounter1)+1,__zero_reg__
 714 0278 0F90      		sts delaycounter1,__zero_reg__
 715 027a 1F90      		ldi r18,lo8(0)
 716 027c 1895      		ldi r19,hi8(0)
 717               	.L50:
 719               	.LM69:
 720               	/* #APP */
 721               		nop
 722               		nop
 723 000e 4578 7420 		nop
 723      494E 5432 
 723      00
 724               		nop
 725               		nop
 726               		nop
 728               	.LM70:
  30:main.c        **** }
  31:main.c        **** 
  32:main.c        **** int main(void)
  33:main.c        **** {
 729               	aycounter1,__zero_reg__
 730               		ldi r18,lo8(0)
 731               		ldi r19,hi8(0)
 732               	.L50:
  34:main.c        **** 	PORTC=0x00;
 733               	 frame size=0 */
 734               	/* prologue end (size=0) */
  35:main.c        **** 	DDRC=0x08;
 736               	:P(0,4)",64,0,0,24
 737               	.global	delayus
 739 0282 84BB      	delayus:
  36:main.c        **** 	
  37:main.c        **** 	MCUCR=0x00;				//falling edge
 740               	function delayms size 52 (51) */
 742 0284 15BE      	.Lscope10:
  38:main.c        **** 	GICR=0x20;				//interrupt 2 enabled
 743               	 delaycounter1,r18
 744               		sts (delaycounter2)+1,r21
 745 0286 80E2      		sts delaycounter2,r20
 746 0288 8BBF      	/* epilogue: frame size=0 */
  39:main.c        **** 	lcd_init();
 747               	(-(1))
 749 028a 00D0      	.LM66:
  40:main.c        **** 	lcd_string("Ext INT2");
 750               	*/
 751               		subi r20,lo8(-(1))
 752 028c 80E0      		sbci r21,hi8(-(1))
 754 0290 00D0      	.LM65:
  41:main.c        **** 	sei();					//Global Interrupt Enable
 755               	,0,32,.LM63-delayms
 756               	.LM63:
 757               	/* #APP */
 758 0292 7894      		nop
 759               		nop
 760               		nop
 761 0294 00C0      		nop
 762               		nop
 763               		nop
 765               	.LM64:
 766               		nop
 767               		nop
 768               		nop
 769               		nop
 770               		nop
 771               		nop
 772               	/* #NOAPP */
 773               		subi r20,lo8(-(1))
 774 0000 00        		sbci r21,hi8(-(1))
 776               	.LM65:
 777               		ldi r22,hi8(801)
 778               		cpi r20,lo8(801)
 779               		cpc r21,r22
 780 0001 00        		brne .L41
 781               		subi r18,lo8(-(1))
 782               		sbci r19,hi8(-(1))
 784               	.LM66:
 785               		cp r24,r18
 786 0002 00        		cpc r25,r19
 787               		brsh .L40
 788               		sts (delaycounter1)+1,r19
 789               		sts delaycounter1,r18
 790               		sts (delaycounter2)+1,r21
 791               		sts delaycounter2,r20
 792               	/* epilogue: frame size=0 */
 793               		ret
 794               	/* epilogue end (size=1) */
 795               	/* function delayms size 52 (51) */
 797               	.Lscope10:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:3      *ABS*:0000003f __SREG__
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:4      *ABS*:0000003e __SP_H__
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:5      *ABS*:0000003d __SP_L__
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:7      *ABS*:00000001 __zero_reg__
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:71     .text:00000000 delay_ns
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:779    .bss:00000001 j
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:773    .bss:00000000 k
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:103    .text:0000001e latch
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:135    .text:0000002e lcd_cmd
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:182    .text:0000005c lcd_char
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:225    .text:0000007e lcd_string
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:307    .text:000000d6 lcd_showvalue
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:378    .text:0000012c lcd_gotoxy
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:415    .text:00000144 delay_ms
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:460    .text:00000164 lcd_init
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:785    .bss:00000002 save
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:513    .text:00000192 lcd_clear
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:532    .text:00000198 delayms
                            *COM*:00000002 delaycounter1
                            *COM*:00000002 delaycounter2
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:598    .text:000001e8 delayus
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:648    .text:0000021c __vector_18
C:\Users\User\AppData\Local\Temp/ccJGrRbx.s:728    .text:0000027e main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__udivmodqi4
__divmodhi4


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  00000434  2**0
                  ALLOC
  2 .stab         00000df8  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008bc  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e0 ec       	ldi	r30, 0xC0	; 192
  3e:	f3 e0       	ldi	r31, 0x03	; 3
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	a0 36       	cpi	r26, 0x60	; 96
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a7 36       	cpi	r26, 0x67	; 103
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	73 d1       	rcall	.+742    	; 0x344 <main>
  5e:	af c1       	rjmp	.+862    	; 0x3be <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <uart_init>:
#define _UART_H_

void uart_init()
{
	UCSRA=0x00;
  62:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x18;
  64:	88 e1       	ldi	r24, 0x18	; 24
  66:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
  68:	86 e8       	ldi	r24, 0x86	; 134
  6a:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x67;
  6e:	87 e6       	ldi	r24, 0x67	; 103
  70:	89 b9       	out	0x09, r24	; 9
  72:	08 95       	ret

00000074 <uart_read>:
}

void uart_char(unsigned char uchar)
{
	UDR=uchar;
	while((UCSRA&0x40)==0x00);
	delayuart(1000);
}
 
void uart_string(const unsigned char *ustring)
{
	while ( *ustring )
	{
		UDR=*ustring++;
		while((UCSRA&0x40)==0x00);
		delayuart(1000);
	}
}
 
void uart_num(unsigned char num)
{
    unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);	
}
 
unsigned char uart_read()
{
	while((UCSRA&0x80)==0x00);
  74:	5f 9b       	sbis	0x0b, 7	; 11
  76:	fe cf       	rjmp	.-4      	; 0x74 <uart_read>
	return UDR;
  78:	8c b1       	in	r24, 0x0c	; 12
}
  7a:	99 27       	eor	r25, r25
  7c:	08 95       	ret

0000007e <delayuart>:
 
void delayuart(unsigned int delaytime)
{
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	30 e0       	ldi	r19, 0x00	; 0
	...
	unsigned int dc;
	for(dc=0;dc<=delaytime;dc++)
  96:	2f 5f       	subi	r18, 0xFF	; 255
  98:	3f 4f       	sbci	r19, 0xFF	; 255
  9a:	82 17       	cp	r24, r18
  9c:	93 07       	cpc	r25, r19
  9e:	88 f7       	brcc	.-30     	; 0x82 <delayuart+0x4>
  a0:	08 95       	ret

000000a2 <uart_string>:
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	ec 01       	movw	r28, r24
  a8:	07 c0       	rjmp	.+14     	; 0xb8 <uart_string+0x16>
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	5e 9b       	sbis	0x0b, 6	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <uart_string+0xa>
  b0:	21 96       	adiw	r28, 0x01	; 1
  b2:	88 ee       	ldi	r24, 0xE8	; 232
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	e3 df       	rcall	.-58     	; 0x7e <delayuart>
  b8:	88 81       	ld	r24, Y
  ba:	88 23       	and	r24, r24
  bc:	b1 f7       	brne	.-20     	; 0xaa <uart_string+0x8>
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <uart_char>:
  c4:	8c b9       	out	0x0c, r24	; 12
  c6:	5e 9b       	sbis	0x0b, 6	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <uart_char+0x2>
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	d7 df       	rcall	.-82     	; 0x7e <delayuart>
  d0:	08 95       	ret

000000d2 <uart_num>:
  d2:	df 92       	push	r13
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	d8 2e       	mov	r13, r24
  de:	64 e6       	ldi	r22, 0x64	; 100
  e0:	3b d1       	rcall	.+630    	; 0x358 <__udivmodqi4>
  e2:	28 2f       	mov	r18, r24
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	e8 2e       	mov	r14, r24
  e8:	2e 9d       	mul	r18, r14
  ea:	70 01       	movw	r14, r0
  ec:	11 24       	eor	r1, r1
  ee:	8d 2d       	mov	r24, r13
  f0:	99 27       	eor	r25, r25
  f2:	8e 19       	sub	r24, r14
  f4:	9f 09       	sbc	r25, r15
  f6:	6a e0       	ldi	r22, 0x0A	; 10
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	3a d1       	rcall	.+628    	; 0x370 <__divmodhi4>
  fc:	8b 01       	movw	r16, r22
  fe:	82 2f       	mov	r24, r18
 100:	80 5d       	subi	r24, 0xD0	; 208
 102:	e0 df       	rcall	.-64     	; 0xc4 <uart_char>
 104:	80 2f       	mov	r24, r16
 106:	80 5d       	subi	r24, 0xD0	; 208
 108:	dd df       	rcall	.-70     	; 0xc4 <uart_char>
 10a:	de 18       	sub	r13, r14
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	08 9f       	mul	r16, r24
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	d8 1a       	sub	r13, r24
 116:	8d 2d       	mov	r24, r13
 118:	80 5d       	subi	r24, 0xD0	; 208
 11a:	d4 df       	rcall	.-88     	; 0xc4 <uart_char>
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	ef 90       	pop	r14
 124:	df 90       	pop	r13
 126:	08 95       	ret

00000128 <delay_ns>:
}

void delay_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
 128:	10 92 61 00 	sts	0x0061, r1
 12c:	20 91 60 00 	lds	r18, 0x0060
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <delay_ns+0x10>
 134:	9f 5f       	subi	r25, 0xFF	; 255
 136:	2b e0       	ldi	r18, 0x0B	; 11
 138:	98 17       	cp	r25, r24
 13a:	e0 f3       	brcs	.-8      	; 0x134 <delay_ns+0xc>
 13c:	20 93 60 00 	sts	0x0060, r18
 140:	90 93 61 00 	sts	0x0061, r25
 144:	08 95       	ret

00000146 <latch>:
 146:	aa 98       	cbi	0x15, 2	; 21
 148:	88 ec       	ldi	r24, 0xC8	; 200
 14a:	ee df       	rcall	.-36     	; 0x128 <delay_ns>
 14c:	aa 9a       	sbi	0x15, 2	; 21
 14e:	88 ec       	ldi	r24, 0xC8	; 200
 150:	eb df       	rcall	.-42     	; 0x128 <delay_ns>
 152:	aa 98       	cbi	0x15, 2	; 21
 154:	08 95       	ret

00000156 <lcd_cmd>:
	{
		for(k=0;k<11;k++)
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	08 2f       	mov	r16, r24
	PORTC&=~0x07;
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	88 7f       	andi	r24, 0xF8	; 248
 160:	85 bb       	out	0x15, r24	; 21
	PORTC=((cmd&0xF0));			
 162:	80 2f       	mov	r24, r16
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	85 bb       	out	0x15, r24	; 21
	latch();
 168:	ee df       	rcall	.-36     	; 0x146 <latch>
	PORTC=(((cmd&(0x0F))*16));	
 16a:	11 27       	eor	r17, r17
 16c:	0f 70       	andi	r16, 0x0F	; 15
 16e:	10 70       	andi	r17, 0x00	; 0
 170:	94 e0       	ldi	r25, 0x04	; 4
 172:	00 0f       	add	r16, r16
 174:	11 1f       	adc	r17, r17
 176:	9a 95       	dec	r25
 178:	e1 f7       	brne	.-8      	; 0x172 <lcd_cmd+0x1c>
 17a:	05 bb       	out	0x15, r16	; 21
	latch();
 17c:	e4 df       	rcall	.-56     	; 0x146 <latch>
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <lcd_char>:
}

void lcd_char(unsigned char single)
{
 184:	1f 93       	push	r17
 186:	18 2f       	mov	r17, r24
	PORTC=0x01;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	85 bb       	out	0x15, r24	; 21
	PORTC=0x00;
 18c:	15 ba       	out	0x15, r1	; 21
	PORTC=(single&0xF0)|0x01;						
 18e:	81 2f       	mov	r24, r17
 190:	80 7f       	andi	r24, 0xF0	; 240
 192:	81 60       	ori	r24, 0x01	; 1
 194:	85 bb       	out	0x15, r24	; 21
	latch();
 196:	d7 df       	rcall	.-82     	; 0x146 <latch>
	PORTC=((single&(0x0F))*16)|0x01;
 198:	12 95       	swap	r17
 19a:	10 7f       	andi	r17, 0xF0	; 240
 19c:	11 60       	ori	r17, 0x01	; 1
 19e:	15 bb       	out	0x15, r17	; 21
	latch();
 1a0:	d2 df       	rcall	.-92     	; 0x146 <latch>
 1a2:	1f 91       	pop	r17
 1a4:	08 95       	ret

000001a6 <lcd_string>:
}

void lcd_string(unsigned char str[32])
{
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTC=0x01;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	85 bb       	out	0x15, r24	; 21
	PORTC=0X00;
 1b8:	15 ba       	out	0x15, r1	; 21
 1ba:	00 e0       	ldi	r16, 0x00	; 0
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	11 c0       	rjmp	.+34     	; 0x1e2 <lcd_string+0x3c>

	while(str[k]!='\0')	//Till null character is encountered
	{
		if(k==16)
 1c0:	90 31       	cpi	r25, 0x10	; 16
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <lcd_string+0x22>
		lcd_cmd(0XC0);
 1c4:	80 ec       	ldi	r24, 0xC0	; 192
 1c6:	c7 df       	rcall	.-114    	; 0x156 <lcd_cmd>
		PORTC=((str[k])&0xF0)|0x01;
 1c8:	88 81       	ld	r24, Y
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	85 bb       	out	0x15, r24	; 21
		latch();
 1d0:	ba df       	rcall	.-140    	; 0x146 <latch>
		PORTC=((str[k]&(0x0F))*16)|0x01;
 1d2:	88 81       	ld	r24, Y
 1d4:	82 95       	swap	r24
 1d6:	80 7f       	andi	r24, 0xF0	; 240
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	85 bb       	out	0x15, r24	; 21
		latch();
 1dc:	b4 df       	rcall	.-152    	; 0x146 <latch>
 1de:	0f 5f       	subi	r16, 0xFF	; 255
 1e0:	1f 4f       	sbci	r17, 0xFF	; 255
 1e2:	90 2f       	mov	r25, r16
 1e4:	e7 01       	movw	r28, r14
 1e6:	c0 0f       	add	r28, r16
 1e8:	d1 1d       	adc	r29, r1
 1ea:	88 81       	ld	r24, Y
 1ec:	88 23       	and	r24, r24
 1ee:	41 f7       	brne	.-48     	; 0x1c0 <lcd_string+0x1a>
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	08 95       	ret

000001fe <lcd_showvalue>:
		k++;
	}
}

void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	d8 2e       	mov	r13, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 20a:	64 e6       	ldi	r22, 0x64	; 100
 20c:	a5 d0       	rcall	.+330    	; 0x358 <__udivmodqi4>
 20e:	28 2f       	mov	r18, r24
	T=(num - (H*100))/10;
 210:	34 e6       	ldi	r19, 0x64	; 100
 212:	e3 2e       	mov	r14, r19
 214:	8e 9d       	mul	r24, r14
 216:	70 01       	movw	r14, r0
 218:	11 24       	eor	r1, r1
 21a:	8d 2d       	mov	r24, r13
 21c:	99 27       	eor	r25, r25
 21e:	8e 19       	sub	r24, r14
 220:	9f 09       	sbc	r25, r15
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	a4 d0       	rcall	.+328    	; 0x370 <__divmodhi4>
 228:	8b 01       	movw	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 22a:	82 2f       	mov	r24, r18
 22c:	80 5d       	subi	r24, 0xD0	; 208
 22e:	aa df       	rcall	.-172    	; 0x184 <lcd_char>
	lcd_char(T+48);
 230:	80 2f       	mov	r24, r16
 232:	80 5d       	subi	r24, 0xD0	; 208
 234:	a7 df       	rcall	.-178    	; 0x184 <lcd_char>
	lcd_char(O+48);
 236:	de 18       	sub	r13, r14
 238:	8a e0       	ldi	r24, 0x0A	; 10
 23a:	08 9f       	mul	r16, r24
 23c:	c0 01       	movw	r24, r0
 23e:	11 24       	eor	r1, r1
 240:	d8 1a       	sub	r13, r24
 242:	8d 2d       	mov	r24, r13
 244:	80 5d       	subi	r24, 0xD0	; 208
 246:	9e df       	rcall	.-196    	; 0x184 <lcd_char>
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	08 95       	ret

00000254 <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
{
	if(row==0)
 254:	88 23       	and	r24, r24
 256:	21 f4       	brne	.+8      	; 0x260 <__stack+0x1>
	{
		lcd_cmd(0x80+column);
 258:	86 2f       	mov	r24, r22
 25a:	80 58       	subi	r24, 0x80	; 128
 25c:	7c df       	rcall	.-264    	; 0x156 <lcd_cmd>
 25e:	08 95       	ret
	}
	else if(row==1)
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	19 f4       	brne	.+6      	; 0x26a <__stack+0xb>
	{
		lcd_cmd(0xC0+column);	
 264:	86 2f       	mov	r24, r22
 266:	80 54       	subi	r24, 0x40	; 64
 268:	76 df       	rcall	.-276    	; 0x156 <lcd_cmd>
 26a:	08 95       	ret

0000026c <delay_ms>:
	}	
}

void delay_ms(unsigned int ms)
{
 26c:	09 c0       	rjmp	.+18     	; 0x280 <delay_ms+0x14>
	int i;

	while (ms-- > 0)
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i = 0; i < 3276; ++i)
		asm("nop");
 272:	00 00       	nop
 274:	2f 5f       	subi	r18, 0xFF	; 255
 276:	3f 4f       	sbci	r19, 0xFF	; 255
 278:	4c e0       	ldi	r20, 0x0C	; 12
 27a:	2c 3c       	cpi	r18, 0xCC	; 204
 27c:	34 07       	cpc	r19, r20
 27e:	c9 f7       	brne	.-14     	; 0x272 <delay_ms+0x6>
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	8f 3f       	cpi	r24, 0xFF	; 255
 286:	92 07       	cpc	r25, r18
 288:	91 f7       	brne	.-28     	; 0x26e <delay_ms+0x2>
 28a:	08 95       	ret

0000028c <lcd_init>:
 28c:	84 e1       	ldi	r24, 0x14	; 20
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ed df       	rcall	.-38     	; 0x26c <delay_ms>
 292:	85 b3       	in	r24, 0x15	; 21
 294:	80 93 62 00 	sts	0x0062, r24
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	84 bb       	out	0x14, r24	; 20
 29c:	8f e0       	ldi	r24, 0x0F	; 15
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	e5 df       	rcall	.-54     	; 0x26c <delay_ms>
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	85 bb       	out	0x15, r24	; 21
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	56 df       	rcall	.-340    	; 0x156 <lcd_cmd>
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	54 df       	rcall	.-344    	; 0x156 <lcd_cmd>
 2ae:	80 e8       	ldi	r24, 0x80	; 128
 2b0:	52 df       	rcall	.-348    	; 0x156 <lcd_cmd>
 2b2:	84 e1       	ldi	r24, 0x14	; 20
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	da df       	rcall	.-76     	; 0x26c <delay_ms>
 2b8:	08 95       	ret

000002ba <lcd_clear>:
	}
}

void lcd_clear()
{
	lcd_cmd(0x01);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	4c df       	rcall	.-360    	; 0x156 <lcd_cmd>
 2be:	08 95       	ret

000002c0 <delayms>:
unsigned int delaycounter1,delaycounter2;

void delayms(unsigned int delaytime)
{
	for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 2c0:	10 92 66 00 	sts	0x0066, r1
 2c4:	10 92 65 00 	sts	0x0065, r1
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	50 e0       	ldi	r21, 0x00	; 0
	...
	{
		for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
		{
			asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
			asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 2e8:	4f 5f       	subi	r20, 0xFF	; 255
 2ea:	5f 4f       	sbci	r21, 0xFF	; 255
 2ec:	63 e0       	ldi	r22, 0x03	; 3
 2ee:	41 32       	cpi	r20, 0x21	; 33
 2f0:	56 07       	cpc	r21, r22
 2f2:	71 f7       	brne	.-36     	; 0x2d0 <delayms+0x10>
 2f4:	2f 5f       	subi	r18, 0xFF	; 255
 2f6:	3f 4f       	sbci	r19, 0xFF	; 255
 2f8:	82 17       	cp	r24, r18
 2fa:	93 07       	cpc	r25, r19
 2fc:	38 f7       	brcc	.-50     	; 0x2cc <delayms+0xc>
 2fe:	30 93 66 00 	sts	0x0066, r19
 302:	20 93 65 00 	sts	0x0065, r18
 306:	50 93 64 00 	sts	0x0064, r21
 30a:	40 93 63 00 	sts	0x0063, r20
 30e:	08 95       	ret

00000310 <delayus>:
		}
	}
}

void delayus(unsigned int delaytime)
{
	for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 310:	10 92 66 00 	sts	0x0066, r1
 314:	10 92 65 00 	sts	0x0065, r1
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
	...
	{
		asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
 330:	2f 5f       	subi	r18, 0xFF	; 255
 332:	3f 4f       	sbci	r19, 0xFF	; 255
 334:	82 17       	cp	r24, r18
 336:	93 07       	cpc	r25, r19
 338:	88 f7       	brcc	.-30     	; 0x31c <delayus+0xc>
 33a:	30 93 66 00 	sts	0x0066, r19
 33e:	20 93 65 00 	sts	0x0065, r18
 342:	08 95       	ret

00000344 <main>:
#include"delay.h"

int main(void)
{
 	uart_init();
 344:	8e de       	rcall	.-740    	; 0x62 <uart_init>
	lcd_init();
 346:	a2 df       	rcall	.-188    	; 0x28c <lcd_init>
	delayms(100);
 348:	84 e6       	ldi	r24, 0x64	; 100
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	b9 df       	rcall	.-142    	; 0x2c0 <delayms>
}
 
unsigned char uart_read()
{
	while((UCSRA&0x80)==0x00);
 34e:	5f 9b       	sbis	0x0b, 7	; 11
 350:	fe cf       	rjmp	.-4      	; 0x34e <main+0xa>
	return UDR;
 352:	8c b1       	in	r24, 0x0c	; 12
	
	while(1)
	{
		lcd_char(uart_read());
 354:	17 df       	rcall	.-466    	; 0x184 <lcd_char>
 356:	fb cf       	rjmp	.-10     	; 0x34e <main+0xa>

00000358 <__udivmodqi4>:
 358:	99 1b       	sub	r25, r25
 35a:	79 e0       	ldi	r23, 0x09	; 9
 35c:	04 c0       	rjmp	.+8      	; 0x366 <__udivmodqi4_ep>

0000035e <__udivmodqi4_loop>:
 35e:	99 1f       	adc	r25, r25
 360:	96 17       	cp	r25, r22
 362:	08 f0       	brcs	.+2      	; 0x366 <__udivmodqi4_ep>
 364:	96 1b       	sub	r25, r22

00000366 <__udivmodqi4_ep>:
 366:	88 1f       	adc	r24, r24
 368:	7a 95       	dec	r23
 36a:	c9 f7       	brne	.-14     	; 0x35e <__udivmodqi4_loop>
 36c:	80 95       	com	r24
 36e:	08 95       	ret

00000370 <__divmodhi4>:
 370:	97 fb       	bst	r25, 7
 372:	09 2e       	mov	r0, r25
 374:	07 26       	eor	r0, r23
 376:	0a d0       	rcall	.+20     	; 0x38c <__divmodhi4_neg1>
 378:	77 fd       	sbrc	r23, 7
 37a:	04 d0       	rcall	.+8      	; 0x384 <__divmodhi4_neg2>
 37c:	0c d0       	rcall	.+24     	; 0x396 <__udivmodhi4>
 37e:	06 d0       	rcall	.+12     	; 0x38c <__divmodhi4_neg1>
 380:	00 20       	and	r0, r0
 382:	1a f4       	brpl	.+6      	; 0x38a <__divmodhi4_exit>

00000384 <__divmodhi4_neg2>:
 384:	70 95       	com	r23
 386:	61 95       	neg	r22
 388:	7f 4f       	sbci	r23, 0xFF	; 255

0000038a <__divmodhi4_exit>:
 38a:	08 95       	ret

0000038c <__divmodhi4_neg1>:
 38c:	f6 f7       	brtc	.-4      	; 0x38a <__divmodhi4_exit>
 38e:	90 95       	com	r25
 390:	81 95       	neg	r24
 392:	9f 4f       	sbci	r25, 0xFF	; 255
 394:	08 95       	ret

00000396 <__udivmodhi4>:
 396:	aa 1b       	sub	r26, r26
 398:	bb 1b       	sub	r27, r27
 39a:	51 e1       	ldi	r21, 0x11	; 17
 39c:	07 c0       	rjmp	.+14     	; 0x3ac <__udivmodhi4_ep>

0000039e <__udivmodhi4_loop>:
 39e:	aa 1f       	adc	r26, r26
 3a0:	bb 1f       	adc	r27, r27
 3a2:	a6 17       	cp	r26, r22
 3a4:	b7 07       	cpc	r27, r23
 3a6:	10 f0       	brcs	.+4      	; 0x3ac <__udivmodhi4_ep>
 3a8:	a6 1b       	sub	r26, r22
 3aa:	b7 0b       	sbc	r27, r23

000003ac <__udivmodhi4_ep>:
 3ac:	88 1f       	adc	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	5a 95       	dec	r21
 3b2:	a9 f7       	brne	.-22     	; 0x39e <__udivmodhi4_loop>
 3b4:	80 95       	com	r24
 3b6:	90 95       	com	r25
 3b8:	bc 01       	movw	r22, r24
 3ba:	cd 01       	movw	r24, r26
 3bc:	08 95       	ret

000003be <_exit>:
 3be:	ff cf       	rjmp	.-2      	; 0x3be <_exit>
